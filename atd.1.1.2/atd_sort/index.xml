<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></html></base>Atd_sort</root><digest>7d76e6b8b580f7bc0ff0ae6931132dca</digest><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><source><file>atd_sort.mli</file><dir>/home/dsheets/.opam/doc/build/atd.1.1.2</dir><digest>d6e69dd60bb55883d7a4339764fae7f5</digest></source><doc>Topological sort that doesn't give up on cycles.<newline/><verbatim>     A --&gt; B
     C --&gt; D
     B --&gt; C
     C --&gt; B
     D --&gt; E
     E --&gt; E</verbatim><newline/>gives the following ordering:<newline/><verbatim>     [A] [B C]* [D] [E]*</verbatim><newline/>where a group marked with a star is cyclic, i.e any member of the group
can be reached from any other member of that group.<newline/>This is used by atdgen to sort type definitions by dependency order,
creating recursive groups only when needed. This makes ocamlopt
significantly faster in certain pathological situations.
Also it improves the clarity of the generated code and can be used to
report cycles in a context where they are not allowed.<newline/>Feel free to reuse outside of atdgen. The algorithm is outlined in
the ml file. The interface of this module may change without notice.</doc><module_type><module_type><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>Param</module_type><signature><type><type><module_type><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>Param</module_type>t</type><doc>Type of the nodes as specified by the user</doc></type><type><type><module_type><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>Param</module_type>id</type><doc>Node identifier that can be compared and hashed using
the generic comparison and hashing functions of the standard library.
Typically an int or a string.</doc></type><value><value><module_type><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>Param</module_type>id</value><doc>User function to extract a node's unique identifier</doc><arrow><path><resolved><identifier><type><module_type><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>Param</module_type>t</type></identifier></resolved></path><path><resolved><identifier><type><module_type><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>Param</module_type>id</type></identifier></resolved></path></arrow></value><value><value><module_type><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>Param</module_type>to_string</value><doc>User function to make a node identifier printable,
used for debugging only.</doc><arrow><path><resolved><identifier><type><module_type><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>Param</module_type>id</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value></signature></module_type><module><module><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>Make</module><type><functor><argument><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>Make</module>P</argument><resolved><identifier><module_type><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>Param</module_type></identifier></resolved></argument><signature><value><value><module><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>Make</module>sort</value><doc>Partition the nodes of a directed graph into groups and sort these
groups such that all edges going from one group to another
point to the right, and such that each group
has a single element or is a cycle. A cyclic group is marked
as <code>true</code> while non-cyclic singletons are marked as <code>false</code>.<newline/>A cycle is a set of nodes such that any node of the set
can be reached from any other node of that set.<newline/>All groups of more than one node are cyclic.
Groups of one node may or may not be cyclic.</doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><type><identifier><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>Make</module>P</argument></identifier>t</type></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><type><identifier><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>Make</module>P</argument></identifier>id</type></resolved></path></path></tuple></path><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>bool</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><type><identifier><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>Make</module>P</argument></identifier>t</type></resolved></path></path></tuple></path></arrow></value><stop/><value><value><module><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>Make</module>debug</value><path><resolved><type><identifier><root><base><html src="../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>ref</type></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></value></signature></functor></type></module><stop/><value><value><root><base><xml src="index.xml"><cmti name="Atd_sort" src="/home/dsheets/.opam/doc/build/atd.1.1.2/atd_sort.cmti" digest="7d76e6b8b580f7bc0ff0ae6931132dca"/></xml></base>Atd_sort</root>test</value><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value></unit>