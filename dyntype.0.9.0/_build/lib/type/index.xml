<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></html></base>Type</root><digest>bcf61e280cce6ec2148493d898c0902f</digest><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><source><file>lib/type.mli</file><dir>/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build</dir><digest>6956a477f9206a4da6c4f45c08968b22</digest></source><doc>Dynamic types</doc><type><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type><variant><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type>Unit</constructor><doc>unit</doc></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type>Bool</constructor><doc>booleans</doc></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type>Float</constructor><doc>floating-point numbers</doc></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type>Char</constructor><doc>characters</doc></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type>String</constructor><doc>strings</doc></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type>Int</constructor><doc>integer type of a given size (as 31-,32- or 64-bits); <code>Int None</code> is for bigints</doc><arguments><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></arguments></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type>List</constructor><doc>collection of stuff of the same type (stored as lists)</doc><arguments><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path></arguments></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type>Array</constructor><doc>collection of stuff of the same type (stored as arrays)</doc><arguments><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path></arguments></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type>Tuple</constructor><doc>Cartesian product</doc><arguments><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path></path></arguments></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type>Dict</constructor><doc>record <code>'R</code> or object <code>'O</code> type; <code>`RW</code> stands for mutable fields</doc><arguments><poly_variant><fixed/><constructor>R<constant/></constructor><constructor>O<constant/></constructor></poly_variant><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><poly_variant><fixed/><constructor>RO<constant/></constructor><constructor>RW<constant/></constructor></poly_variant><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path></tuple></path></arguments></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type>Sum</constructor><doc>polymorphic <code>`P</code> or normal <code>`N</code> variant type</doc><arguments><poly_variant><fixed/><constructor>P<constant/></constructor><constructor>N<constant/></constructor></poly_variant><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path></path></tuple></path></arguments></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type>Option</constructor><doc>option type</doc><arguments><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path></arguments></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type>Rec</constructor><doc>recursive type</doc><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path></arguments></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type>Var</constructor><doc>recursive fix-point</doc><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type>Arrow</constructor><doc>arrow type</doc><arguments><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path></arguments></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type>Ext</constructor><doc>type variable</doc><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path></arguments></constructor></variant></type><comment><title level="2">Utility functions</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>is_mutable</value><doc><code>is_mutable t</code> checks whether <code>t</code> contains a mutable field</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>free_vars</value><doc><code>free_vars t</code> returns all the free variables of type <code>t</code>.
If <code>t</code> is unfolded (as it should be when calling <code>type_of_t</code>,
this call should return an empty list.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>foreigns</value><doc><code>foreigns t</code> returns all the type variables appearing in <code>t</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>unroll</value><doc><code>unroll env t</code> replaces every type appearing in <code>t</code> by its type value defined in <code>env</code>.</doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path></tuple></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path></arrow></arrow></value><comment><title level="2">Sub-typing</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>is_subtype_of</value><doc><code>is_subtype_of s t</code> checks whether <code>s</code> is a sub-type of <code>t</code>. Sub-typing relation is based on
naming. Basically, <code>s</code> is a sub-type of <code>t</code> if (i) named attributes have either compatible types
(ii) or some fields/methods defined in <code>t</code> do not appear in <code>s</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>(&lt;:)</value><doc><code>s &lt;: t</code> is a short-cut for <code>is_subtype_of s t</code></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>string_of_last_type_error</value><doc>Returns the more recent failing sub-type relation tested by <code>(&lt;:)</code> or <code>is_subtype_of</code></doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value><comment><title level="2">Pretty-printing</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>to_string</value><doc><code>to_string t</code> pretty-prints the type <code>t</code></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value><exception><exception><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>Parse_error</exception><doc>Exception that may be raised by <code>!of_string</code></doc><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></exception><value><value><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>of_string</value><doc><code>of_string str</code> returns the type <code>t</code> corresponding to the pretty-printed string <code>str</code>. Raises <code>!Parse_error</code>
if is not a valid string</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type" src="/home/dsheets/.opam/doc/build/dyntype.0.9.0/_build/lib/type.cmti" digest="bcf61e280cce6ec2148493d898c0902f"/></xml></base>Type</root>t</type></identifier></resolved></path></arrow></value></unit>