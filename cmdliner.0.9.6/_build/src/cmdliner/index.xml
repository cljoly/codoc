<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></html></base>Cmdliner</root><digest>44949748974e576b406650ee8540a185</digest><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Format<digest>61d4350242b30078d3ad96c904c9f7a1</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><source><file>src/cmdliner.mli</file><dir>/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build</dir><digest>097f63443c7b47bad4b235267952d908</digest></source><doc>Declarative definition of command line interfaces.<newline/><code>Cmdliner</code> provides a simple and compositional mechanism
to convert command line arguments to OCaml values and pass them to
your functions. The module automatically handles syntax errors,
help messages and UNIX man page generation. It supports programs
with single or multiple commands
(like <code>darcs</code> or <code>git</code>) and respect most of the
<reference><link>http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html</link>POSIX</reference> and
<reference><link>http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html</link>GNU</reference> conventions.<newline/>Consult the <reference><element><resolved><identifier><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>basics</label></identifier></resolved></element>basics</reference>, details about the supported
<reference><element><resolved><identifier><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>cmdline</label></identifier></resolved></element>command line syntax</reference> and <reference><element><resolved><identifier><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>examples</label></identifier></resolved></element>examples</reference> of
use. Open the module to use it, it defines only three modules in
your scope.<newline/><emphasize>Release 0.9.6 - Daniel BÃ¼nzli &lt;daniel.buenzl i@erratique.ch&gt;</emphasize></doc><comment><title level="1"><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>top</label>Interface</title></comment><module><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Manpage</module><doc>Man page specification.<newline/>Man page generation is automatically handled by <code>Cmdliner</code>. The
<reference><element><root>block</root></element></reference> type is used to define a man page's content.<newline/>The <reference><element><root>print</root></element></reference> function can be useful if the client wants to define
other man pages (e.g. to implement a help command).</doc><type><signature><comment><title level="1">Man pages</title></comment><type><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Manpage</module>block</type><doc>The type for a block of man page text.<newline/><list><item><code>`S s</code> introduces a new section <code>s</code>.</item><item><code>`P t</code> is a new paragraph with text <code>t</code>.</item><item><code>`I (l,t)</code> is an indented paragraph with label
<code>l</code> and text <code>t</code>.</item><item><code>`Noblank</code> suppresses the blank line introduced between two blocks.</item></list><newline/>In text strings <code>t</code>, whitespace and newlines are not significant
and are all collapsed to a single space. In labels <code>l</code> and text
strings <code>t</code>, the syntax <code>&quot;$(i,italic text)&quot;</code> and <code>&quot;$(b,bold
      text)&quot;</code> can be used to respectively produce italic and bold
text.</doc><poly_variant><fixed/><constructor>S<path><resolved><identifier><type>string</type></identifier></resolved></path></constructor><constructor>P<path><resolved><identifier><type>string</type></identifier></resolved></path></constructor><constructor>I<tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></tuple></constructor><constructor>Noblank<constant/></constructor></poly_variant></type><type><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Manpage</module>title</type><doc>The type for man page titles. Describes the man page
<code>title</code>, <code>section</code>, <code>center_footer</code>, <code>left_footer</code>, <code>center_header</code>.</doc><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></tuple></type><type><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Manpage</module>t</type><doc>The type for a man page. A title and the page text as a list of blocks.</doc><tuple><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Manpage</module>title</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Manpage</module>block</type></identifier></resolved></path></path></tuple></type><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Manpage</module>print</value><doc><code>print ~subst fmt ppf page</code> prints <code>page</code> on <code>ppf</code> in the format <code>fmt</code>.
If <code>fmt</code> is <code>`Pager</code> the function tries to write the formatted
result in a pager, if that fails the format <code>`Plain</code> is written
on <code>ppf</code>. <code>subst</code> can be used to perform variable substitution,
see <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/buffer/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/buffer/index.xml"><cmti name="Buffer" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/buffer.cmti" digest="a579f4a57e300ec755f84af883c1e51b"/></xml></html></base>Buffer</root></identifier>add_substitute</value></resolved></element></reference> (defaults to the identity).</doc><arrow><optional>subst</optional><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow><arrow><poly_variant><fixed/><constructor>Pager<constant/></constructor><constructor>Plain<constant/></constructor><constructor>Groff<constant/></constructor></poly_variant><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/format/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/format/index.xml"><cmti name="Format" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/format.cmti" digest="61d4350242b30078d3ad96c904c9f7a1"/></xml></html></base>Format</root></identifier>formatter</type></resolved></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Manpage</module>t</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value></signature></type></module><module><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module><doc>Terms.<newline/>A term is evaluated by a program to produce a <reference><element><root>result</root></element>result</reference>.
A term made of terms referring to <reference><element><resolved><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module></identifier></resolved></element>command line arguments</reference>
implicitly defines a command line syntax.</doc><type><signature><comment><title level="1">Terms</title></comment><type><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type><doc>The type for terms evaluating to values of type 'a.</doc><param>a<pos/></param></type><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>pure</value><doc><code>pure v</code> is a term that evaluates to <code>v</code>.</doc><arrow><var>a</var><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>($)</value><doc><code>f $ v</code> is a term that evaluates to the result of applying
the evaluation of <code>v</code> to the one of <code>f</code>.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type></identifier></resolved><arrow><var>a</var><var>b</var></arrow></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>app</value><doc><code>app</code> is <reference><element><root>($)</root></element></reference>.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type></identifier></resolved><arrow><var>a</var><var>b</var></arrow></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type></identifier></resolved><var>b</var></path></arrow></arrow></value><type><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>ret</type><doc>The type for command return values. See <reference><element><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>ret</type></identifier></resolved></element></reference>.</doc><param>a</param><poly_variant><fixed/><constructor>Help<tuple><poly_variant><fixed/><constructor>Pager<constant/></constructor><constructor>Plain<constant/></constructor><constructor>Groff<constant/></constructor></poly_variant><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></tuple></constructor><constructor>Error<tuple><path><resolved><identifier><type>bool</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></tuple></constructor><constructor>Ok<var>a</var></constructor></poly_variant></type><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>ret</value><doc><code>ret v</code> is a term whose evaluation depends on the case
to which <code>v</code> evaluates. With :
<list><item><code>`Ok r</code>, it evaluates to <code>r</code>.</item><item><code>`Error (usage,e)</code>, the evaluation fails and <code>Cmdliner</code> prints
the error <code>e</code> and the term's usage if <code>usage</code> is <code>true</code>.</item><item><code>`Help (format, name)</code>, the evaluation fails and <code>Cmdliner</code> prints the
term's man page in the given <code>format</code> (or the man page for a
specific <code>name</code> term in case of multiple term evaluation).</item></list></doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type></identifier></resolved><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>ret</type></identifier></resolved><var>a</var></path></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>main_name</value><doc><code>main_name</code> is a term that evaluates to the &quot;main&quot; term's name.</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>choice_names</value><doc><code>choice_names</code> is a term that evaluates to the names of the terms
to choose from.</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>man_format</value><doc><code>man_format</code> is a term that defines a <code>--man-format</code> option and
evaluates to a value that can be used with <reference><element><resolved><value><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Manpage</module></identifier>print</value></resolved></element></reference>.</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type></identifier></resolved><poly_variant><fixed/><constructor>Pager<constant/></constructor><constructor>Plain<constant/></constructor><constructor>Groff<constant/></constructor></poly_variant></path></value><comment><title level="1"><label><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>tinfo</label>Term information</title><newline/>Term information defines the name and man page of a term.
For simple evaluation this is the name of the program and its
man page. For multiple term evaluation, this is
the name of a command and its man page.</comment><type><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>info</type><doc>The type for term information.</doc></type><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>info</value><doc><code>info sdocs man docs doc version name</code> is a term information
such that:
<list><item><code>name</code> is the name of the program or the command.</item><item><code>version</code> is the version string of the program, ignored
for commands.</item><item><code>doc</code> is a one line description of the program or command used
for the <code>NAME</code> section of the term's man page. For commands this
description is also used in the list of commands of the main
term's man page.</item><item><code>docs</code>, only for commands, the title of the section of the main
term's man page where it should be listed (defaults to <code>&quot;COMMANDS&quot;</code>).</item><item><code>man</code> is the text of the man page for the term. In the text,
the variables <code>&quot;$(tname)&quot;</code> and <code>&quot;$(mname)&quot;</code> can respectively be
used to refer to the value of <code>name</code> and the main term's name.</item><item><code>sdocs</code> defines the title of the section in which the
standard <code>--help</code> and <code>--version</code> arguments are listed.</item></list></doc><arrow><optional>sdocs</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><optional>man</optional><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Manpage</module></identifier>block</type></resolved></path></path><arrow><optional>docs</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><optional>doc</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><optional>version</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>info</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>name</value><doc><code>name ti</code> is the name of the term information.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>info</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value><comment><title level="1">Evaluation</title></comment><type><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>result</type><doc>The type for evaluation results.
<list><item><code>`Ok v</code>, the term evaluated successfully and <code>v</code> is the result.</item><item><code>`Version</code>, the version string of the main term was printed
on the help formatter.</item><item><code>`Help</code>, man page about the term was printed on the help formatter.</item><item><code>`Error `Parse</code>, a command line parse error occured and was
reported on the error formatter.</item><item><code>`Error `Term</code>, a term evaluation error occured and was reported
on the error formatter (see <reference><element><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>ret</type></resolved></element></reference>).</item><item><code>`Error `Exn</code>, an exception <code>e</code> was caught and reported
on the error formatter (see the <code>~catch</code> parameter of <reference><element><resolved><identifier><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>eval</value></identifier></resolved></element></reference>).</item></list></doc><param>a</param><poly_variant><fixed/><constructor>Ok<var>a</var></constructor><constructor>Error<poly_variant><fixed/><constructor>Parse<constant/></constructor><constructor>Term<constant/></constructor><constructor>Exn<constant/></constructor></poly_variant></constructor><constructor>Version<constant/></constructor><constructor>Help<constant/></constructor></poly_variant></type><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>eval</value><doc><code>eval help err catch argv (t,i)</code> is the evaluation result
of <code>t</code> with command line arguments <code>argv</code> (defaults to <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/sys/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/sys/index.xml"><cmti name="Sys" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/sys.cmti" digest="0ce699458ce4430954d7e6a78874647c"/></xml></html></base>Sys</root></identifier>argv</value></resolved></element></reference>).<newline/>If <code>catch</code> is <code>true</code> (default) uncaught exeptions
are intercepted and their stack trace is written to the <code>err</code>
formatter.<newline/><code>help</code> is the formatter used to print help or version messages
(defaults to <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/format/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/format/index.xml"><cmti name="Format" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/format.cmti" digest="61d4350242b30078d3ad96c904c9f7a1"/></xml></html></base>Format</root></identifier>std_formatter</value></resolved></element></reference>). <code>err</code> is the formatter
used to print error messages (defaults to <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/format/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/format/index.xml"><cmti name="Format" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/format.cmti" digest="61d4350242b30078d3ad96c904c9f7a1"/></xml></html></base>Format</root></identifier>err_formatter</value></resolved></element></reference>).</doc><arrow><optional>help</optional><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/format/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/format/index.xml"><cmti name="Format" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/format.cmti" digest="61d4350242b30078d3ad96c904c9f7a1"/></xml></html></base>Format</root></identifier>formatter</type></resolved></path><arrow><optional>err</optional><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/format/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/format/index.xml"><cmti name="Format" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/format.cmti" digest="61d4350242b30078d3ad96c904c9f7a1"/></xml></html></base>Format</root></identifier>formatter</type></resolved></path><arrow><optional>catch</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>argv</optional><path><resolved><identifier><type>array</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><arrow><tuple><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>info</type></identifier></resolved></path></tuple><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>result</type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>eval_choice</value><doc><code>eval_choice help err catch argv default (t,i) choices</code> is like <reference><element><resolved><identifier><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>eval</value></identifier></resolved></element></reference>
except that if the first argument on the command line is not an option
name it will look in <code>choices</code> for a term whose information has this
name and evaluate it.<newline/>If the command name is unknown an error is reported. If the name
is unspecified the &quot;main&quot; term <code>t</code> is evaluated. <code>i</code> defines the
name and man page of the program.</doc><arrow><optional>help</optional><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/format/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/format/index.xml"><cmti name="Format" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/format.cmti" digest="61d4350242b30078d3ad96c904c9f7a1"/></xml></html></base>Format</root></identifier>formatter</type></resolved></path><arrow><optional>err</optional><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/format/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/format/index.xml"><cmti name="Format" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/format.cmti" digest="61d4350242b30078d3ad96c904c9f7a1"/></xml></html></base>Format</root></identifier>formatter</type></resolved></path><arrow><optional>catch</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>argv</optional><path><resolved><identifier><type>array</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><arrow><tuple><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>info</type></identifier></resolved></path></tuple><arrow><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>info</type></identifier></resolved></path></tuple></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>result</type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>eval_peek_opts</value><doc><code>eval_peek_opts version_opt argv t</code> evaluates <code>t</code>, a term made
of optional arguments only, with the command line <code>argv</code>
(defaults to <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/sys/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/sys/index.xml"><cmti name="Sys" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/sys.cmti" digest="0ce699458ce4430954d7e6a78874647c"/></xml></html></base>Sys</root></identifier>argv</value></resolved></element></reference>). During this evaluation unknown
optional arguments, and positional arguments are ignored. The
evaluation returns a pair. The first component has a value if
the command line, given the <emphasize>partial</emphasize> knoweldge in <code>t</code> would
be parsed correctly regardless of both the help and version
request options (the latter only if <code>version_opt</code> is <code>true</code>,
defaults to <code>false</code>). The second component is the result of
parsing the command line with the <emphasize>partial</emphasize> knowledge in <code>t</code>
but without the side effects described in the <reference><element><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>result</type></identifier></resolved></element></reference> type.<newline/><bold>Note.</bold> Positional arguments can't be peeked without the full
specification of the command line: we can't tell apart a
positional argument from the value of an unknown optional
argument.</doc><arrow><optional>version_opt</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>argv</optional><path><resolved><identifier><type>array</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>t</type></identifier></resolved><var>a</var></path><tuple><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module>result</type></identifier></resolved><var>a</var></path></tuple></arrow></arrow></arrow></value></signature></type></module><module><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module><doc>Terms for command line arguments.<newline/>This module provides functions to define terms that evaluate
to the arguments provided on the command line.<newline/>Basic constraints, like the argument type or repeatability, are
specified by defining a value of type <reference><element><root>t</root></element></reference>. Further contraints can
be specified during the <reference><element><root>argterms</root></element>conversion</reference> to a term.</doc><type><signature><comment><title level="1"><label><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>argconv</label>Argument converters</title><newline/>An argument converter transforms a string argument of the command
line to an OCaml value. <reference><element><resolved><identifier><label><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converters</label></identifier></resolved></element>Predefined converters</reference>
are provided for many types of the standard library.</comment><type><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>parser</type><doc>The type for argument parsers.</doc><param>a</param><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><poly_variant><fixed/><constructor>Ok<var>a</var></constructor><constructor>Error<path><resolved><identifier><type>string</type></identifier></resolved></path></constructor></poly_variant></arrow></type><type><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>printer</type><doc>The type for converted argument printers.</doc><param>a</param><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/format/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/format/index.xml"><cmti name="Format" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/format.cmti" digest="61d4350242b30078d3ad96c904c9f7a1"/></xml></html></base>Format</root></identifier>formatter</type></resolved></path><arrow><var>a</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></type><type><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type><doc>The type for argument converters.</doc><param>a</param><tuple><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>parser</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>printer</type></identifier></resolved><var>a</var></path></tuple></type><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>some</value><doc><code>some none c</code> is like the converter <code>c</code> except it returns
<code>Some</code> value. It is used for command line arguments
that default to <code>None</code> when absent. <code>none</code> is what to print to
document the absence (defaults to <code>&quot;&quot;</code>).</doc><arrow><optional>none</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path></path></arrow></arrow></value><comment><title level="1"><label><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>arginfo</label>Arguments and their information</title><newline/>Argument information defines the man page information of an argument and,
for optional arguments, its names.</comment><type><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t</type><doc>The type for arguments holding data of type <code>'a</code>.</doc><param>a</param></type><type><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>info</type><doc>The type for information about command line arguments.</doc></type><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>info</value><doc><code>info docs docv doc names</code> defines information for
an argument.<newline/><code>names</code> defines the names under which an optional argument
can be referred to. Strings of length <code>1</code> (<code>&quot;c&quot;</code>) define short
option names (<code>&quot;-c&quot;</code>), longer strings (<code>&quot;count&quot;</code>) define long
option names (<code>&quot;--count&quot;</code>). <code>names</code> must be empty for positional
arguments.<newline/><list><item><code>doc</code> is the man page information of the argument.
The variable <code>&quot;$(docv)&quot;</code> can be used to refer to the value
of <code>docv</code> (see below). <reference><element><resolved><identifier><label><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>doc_helpers</label></identifier></resolved></element>These functions</reference> can help with
formatting argument values.</item><item><code>docv</code> is for positional and non-flag optional arguments.
It is a variable name used in the man page to stand for their value.</item><item><code>docs</code> is the title of the man page section in which the argument
will be listed. For optional arguments this defaults
to <code>&quot;OPTIONS&quot;</code>. For positional arguments this defaults
to <code>&quot;ARGUMENTS&quot;</code>. However a positional argument is only listed
if it has both a <code>doc</code> and <code>docv</code> specified.</item></list></doc><arrow><optional>docs</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><optional>docv</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><optional>doc</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>info</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>(&amp;)</value><doc><code>f &amp; v</code> is <code>f v</code>, a right associative composition operator for
specifying argument terms.</doc><arrow><arrow><var>a</var><var>b</var></arrow><arrow><var>a</var><var>b</var></arrow></arrow></value><comment><title level="1"><label><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>optargs</label>Optional arguments</title><newline/>The information of an optional argument must have at least
one name or <code>Invalid_argument</code> is raised.</comment><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>flag</value><doc><code>flag i</code> is a <code>bool</code> argument defined by an optional flag
that may appear <emphasize>at most</emphasize> once on the command line under one of
the names specified by <code>i</code>. The argument holds <code>true</code> if the
flag is present on the command line and <code>false</code> otherwise.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>info</type></identifier></resolved></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>flag_all</value><doc><code>flag_all</code> is like <reference><element><resolved><identifier><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>flag</value></identifier></resolved></element></reference> except the flag may appear more than
once. The argument holds a list that contains one <code>true</code> value per
occurence of the flag. It holds the empty list if the flag
is absent from the command line.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>info</type></identifier></resolved></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>vflag</value><doc><code>vflag v [v</code><subscript>0</subscript><code>,i</code><subscript>0</subscript><code>;...]</code> is an <code>'a</code> argument defined
by an optional flag that may appear <emphasize>at most</emphasize> once on
the command line under one of the names specified in the <code>i</code><subscript>k</subscript>
values. The argument holds <code>v</code> if the flag is absent from the
command line and the value <code>v</code><subscript>k</subscript> if the name under which it appears
is in <code>i</code><subscript>k</subscript>.</doc><arrow><var>a</var><arrow><path><resolved><identifier><type>list</type></identifier></resolved><tuple><var>a</var><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>info</type></identifier></resolved></path></tuple></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>vflag_all</value><doc><code>vflag_all v l</code> is like <reference><element><resolved><identifier><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>vflag</value></identifier></resolved></element></reference> except the flag may appear more
than once. The argument holds the list <code>v</code> if the flag is absent
from the command line. Otherwise it holds a list that contains one
corresponding value per occurence of the flag, in the order found on
the command line.</doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><tuple><var>a</var><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>info</type></identifier></resolved></path></tuple></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>opt</value><doc><code>opt vopt c v i</code> is an <code>'a</code> argument defined by the value of
an optional argument that may appear <emphasize>at most</emphasize> once on the command
line under one of the names specified by <code>i</code>. The argument holds
<code>v</code> if the option is absent from the command line. Otherwise
it has the value of the option as converted by <code>c</code>.<newline/>If <code>vopt</code> is provided the value of the optional argument is itself
optional, taking the value <code>vopt</code> if unspecified on the command line.</doc><arrow><optional>vopt</optional><var>a</var><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>a</var></path><arrow><var>a</var><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>info</type></identifier></resolved></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t</type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>opt_all</value><doc><code>opt_all vopt c v i</code> is like <reference><element><resolved><identifier><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>opt</value></identifier></resolved></element></reference> except the optional argument may
appear more than once. The argument holds a list that contains one value
per occurence of the flag in the order found on the command line.
It holds the list <code>v</code> if the flag is absent from the command line.</doc><arrow><optional>vopt</optional><var>a</var><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>info</type></identifier></resolved></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></arrow></arrow></arrow></arrow></value><comment><title level="1"><label><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>posargs</label>Positional arguments</title><newline/>The information of a positional argument must have no name
or <code>Invalid_argument</code> is raised. Positional arguments indexing
is zero-based.</comment><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>pos</value><doc><code>pos rev n c v i</code> is an <code>'a</code> argument defined by the <code>n</code>th
positional argument of the command line as converted by <code>c</code>.
If the positional argument is absent from the command line
the argument is <code>v</code>.<newline/>If <code>rev</code> is <code>true</code> (defaults to <code>false</code>), the computed
position is <code>max-n</code> where <code>max</code> is the position of
the last positional argument present on the command line.</doc><arrow><optional>rev</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>a</var></path><arrow><var>a</var><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>info</type></identifier></resolved></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t</type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>pos_all</value><doc><code>pos_all c v i</code> is an <code>'a list</code> argument that holds
all the positional arguments of the command line as converted
by <code>c</code> or <code>v</code> if there are none.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>info</type></identifier></resolved></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>pos_left</value><doc><code>pos_left rev n c v i</code> is an <code>'a list</code> argument that holds
all the positional arguments as converted by <code>c</code> found on the left
of the <code>n</code>th positional argument or <code>v</code> if there are none.<newline/>If <code>rev</code> is <code>true</code> (defaults to <code>false</code>), the computed
position is <code>max-n</code> where <code>max</code> is the position of
the last positional argument present on the command line.</doc><arrow><optional>rev</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>info</type></identifier></resolved></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></arrow></arrow></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>pos_right</value><doc><code>pos_right</code> is like <reference><element><resolved><identifier><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>pos_left</value></identifier></resolved></element></reference> except it holds all the positional
arguments found on the right of the specified positional argument.</doc><arrow><optional>rev</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>info</type></identifier></resolved></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></arrow></arrow></arrow></arrow></arrow></value><comment><title level="1"><label><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>argterms</label>Arguments as terms</title></comment><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>value</value><doc><code>value a</code> is a term that evaluates to <code>a</code>'s value.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>t</type></resolved><var>a</var></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>required</value><doc><code>required a</code> is a term that fails if <code>a</code>'s value is <code>None</code> and
evaluates to the value of <code>Some</code> otherwise. Use this for required
positional arguments (it can also be used for defining required
optional arguments, but from a user interface perspective this
shouldn't be done, it is a contradiction in terms).</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t</type></identifier></resolved><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path></path><path><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>t</type></resolved><var>a</var></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>non_empty</value><doc><code>non_empty a</code> is term that fails if <code>a</code>'s list is empty and
evaluates to <code>a</code>'s list otherwise. Use this for non empty lists
of positional arguments.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path><path><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>t</type></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>last</value><doc><code>last a</code> is a term that fails if <code>a</code>'s list is empty and evaluates
to the value of the last element of the list otherwise. Use this
for lists of flags or options where the last occurence takes precedence
over the others.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path><path><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>t</type></resolved><var>a</var></path></arrow></value><comment><title level="1"><label><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converters</label>Predefined converters</title></comment><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>bool</value><doc><code>bool</code> converts values with <reference><element><root>bool_of_string</root></element></reference>.</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>char</value><doc><code>char</code> converts values by ensuring the argument has a single char.</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><path><resolved><identifier><type>char</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>int</value><doc><code>int</code> converts values with <reference><element><root>int_of_string</root></element></reference>.</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>nativeint</value><doc><code>nativeint</code> converts values with <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/nativeint/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/nativeint/index.xml"><cmti name="Nativeint" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/nativeint.cmti" digest="d9e04753374f7110b66feda40414e5e3"/></xml></html></base>Nativeint</root></identifier>of_string</value></resolved></element></reference>.</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><path><resolved><identifier><type>nativeint</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>int32</value><doc><code>int32</code> converts values with <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/int32/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/int32/index.xml"><cmti name="Int32" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/int32.cmti" digest="f43b8a2972804b40e28b661b6fdf157a"/></xml></html></base>Int32</root></identifier>of_string</value></resolved></element></reference>.</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><path><resolved><identifier><type>int32</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>int64</value><doc><code>int64</code> converts values with <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/int64/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/int64/index.xml"><cmti name="Int64" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/int64.cmti" digest="3565b288ec68024088360805650448dd"/></xml></html></base>Int64</root></identifier>of_string</value></resolved></element></reference>.</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><path><resolved><identifier><type>int64</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>float</value><doc><code>float</code> converts values with <reference><element><root>float_of_string</root></element></reference>.</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><path><resolved><identifier><type>float</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>string</value><doc><code>string</code> converts values with the identity function.</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>enum</value><doc><code>enum l p</code> converts values such that unambiguous prefixes of string names
in <code>l</code> map to the corresponding value of type <code>'a</code>.<raise><name>Invalid_argument</name>if <code>l</code> is empty.</raise></doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><var>a</var></tuple></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>a</var></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>file</value><doc><code>file</code> converts a value with the identity function and
checks with <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/sys/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/sys/index.xml"><cmti name="Sys" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/sys.cmti" digest="0ce699458ce4430954d7e6a78874647c"/></xml></html></base>Sys</root></identifier>file_exists</value></resolved></element></reference> that a file with that name exists.</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>dir</value><doc><code>dir</code> converts a value with the identity function and checks
with <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/sys/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/sys/index.xml"><cmti name="Sys" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/sys.cmti" digest="0ce699458ce4430954d7e6a78874647c"/></xml></html></base>Sys</root></identifier>file_exists</value></resolved></element></reference> and <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/sys/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/sys/index.xml"><cmti name="Sys" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/sys.cmti" digest="0ce699458ce4430954d7e6a78874647c"/></xml></html></base>Sys</root></identifier>is_directory</value></resolved></element></reference>
that a directory with that name exists.</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>non_dir_file</value><doc><code>non_dir_file</code> converts a value with the identity function and checks
with <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/sys/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/sys/index.xml"><cmti name="Sys" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/sys.cmti" digest="0ce699458ce4430954d7e6a78874647c"/></xml></html></base>Sys</root></identifier>file_exists</value></resolved></element></reference> and <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/sys/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/sys/index.xml"><cmti name="Sys" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/sys.cmti" digest="0ce699458ce4430954d7e6a78874647c"/></xml></html></base>Sys</root></identifier>is_directory</value></resolved></element></reference>
that a non directory file with that name exists.</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>list</value><doc><code>list sep c</code> splits the argument at each <code>sep</code> (defaults to <code>','</code>)
character and converts each substrings with <code>c</code>.</doc><arrow><optional>sep</optional><path><resolved><identifier><type>char</type></identifier></resolved></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>array</value><doc><code>array sep c</code> splits the argument at each <code>sep</code> (defaults to <code>','</code>)
character and converts each substring with <code>c</code>.</doc><arrow><optional>sep</optional><path><resolved><identifier><type>char</type></identifier></resolved></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><path><resolved><identifier><type>array</type></identifier></resolved><var>a</var></path></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>pair</value><doc><code>pair sep c0 c1</code> splits the argument at the <emphasize>first</emphasize> <code>sep</code> character
(defaults to <code>','</code>) and respectively converts the substrings with
<code>c0</code> and <code>c1</code>.</doc><arrow><optional>sep</optional><path><resolved><identifier><type>char</type></identifier></resolved></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>b</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><tuple><var>a</var><var>b</var></tuple></path></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t2</value><doc><reference><element><resolved><identifier><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t2</value></identifier></resolved></element></reference> is <reference><element><resolved><identifier><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>pair</value></identifier></resolved></element></reference>.</doc><arrow><optional>sep</optional><path><resolved><identifier><type>char</type></identifier></resolved></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>b</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><tuple><var>a</var><var>b</var></tuple></path></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t3</value><doc><code>t3 sep c0 c1 c2</code> splits the argument at the <emphasize>first</emphasize> two <code>sep</code>
characters (defaults to <code>','</code>) and respectively converts the
substrings with <code>c0</code>, <code>c1</code> and <code>c2</code>.</doc><arrow><optional>sep</optional><path><resolved><identifier><type>char</type></identifier></resolved></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>b</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>c</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><tuple><var>a</var><var>b</var><var>c</var></tuple></path></arrow></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>t4</value><doc><code>t4 sep c0 c1 c2 c3</code> splits the argument at the <emphasize>first</emphasize> three <code>sep</code>
characters (defaults to <code>','</code>) respectively converts the substrings
with <code>c0</code>, <code>c1</code>, <code>c2</code> and <code>c3</code>.</doc><arrow><optional>sep</optional><path><resolved><identifier><type>char</type></identifier></resolved></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>b</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>c</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><var>d</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>converter</type></identifier></resolved><tuple><var>a</var><var>b</var><var>c</var><var>d</var></tuple></path></arrow></arrow></arrow></arrow></arrow></value><comment><title level="1"><label><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>doc_helpers</label>Documentation formatting helpers</title></comment><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>doc_quote</value><doc><code>doc_quote s</code> quotes the string <code>s</code>.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>doc_alts</value><doc><code>doc_alts alts</code> documents the alternative tokens <code>alts</code> according
the number of alternatives. If <code>quoted</code> is <code>true</code> (default)
the tokens are quoted. The resulting string can be used in
sentences of the form <code>&quot;$(docv) must be %s&quot;</code>.<raise><name>Invalid_argument</name>if <code>alts</code> is the empty string.</raise></doc><arrow><optional>quoted</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module>doc_alts_enum</value><doc><code>doc_alts_enum quoted alts</code> is <code>doc_alts quoted (List.map fst alts)</code>.</doc><arrow><optional>quoted</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><var>a</var></tuple></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></value></signature></type></module><comment><title level="1"><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>basics</label>Basics</title><newline/>With <code>Cmdliner</code> your program evaluates a term. A <emphasize>term</emphasize>
is a value of type <reference><element><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>t</type></resolved></element></reference>. The type parameter indicates
the type of the result of the evaluation.<newline/>One way to create terms is by lifting regular OCaml values with
<reference><element><resolved><value><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>pure</value></resolved></element></reference>. Terms can be applied to terms evaluating to
functional values with <reference><element><dot><resolved><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier></resolved>( $ )</dot></element></reference> (the type for terms is an
<reference><link>http://dx.doi.org/10.1017/S0956796807006326</link>applicative
functor</reference>). For example for the function:
<precode>let revolt () = print_endline &quot;Revolt!&quot;</precode>
the term :
<precode>open Cmdliner;;

let revolt_t = Term.(pure revolt $ pure ())</precode>
is a term that evaluates to the result (and effect) of the <code>revolt</code>
function.
Terms are evaluated with <reference><element><resolved><value><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>eval</value></resolved></element></reference>:
<precode>let () = match Term.eval (revolt_t, Term.info &quot;revolt&quot;) with
| `Error _ -&gt; exit 1 | _ -&gt; exit 0</precode>
This defines a command line program named <code>&quot;revolt&quot;</code>, without command line
arguments arguments, that just prints <code>&quot;Revolt!&quot;</code> on <code>stdout</code>.
<precode>&gt; ./revolt
Revolt!</precode>
The combinators in the <reference><element><resolved><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module></identifier></resolved></element></reference> module allow to extract command
line argument data as terms. These terms can then be applied to
lifted OCaml functions to be evaluated by the program.<newline/>Terms corresponding to command line argument data that are part of
a term evaluation implicitly define a command line syntax. We
show this on an concrete example.<newline/>Consider the <code>chorus</code> function that prints repeatedly a
given message :
<precode>let chorus count msg =
  for i = 1 to count do print_endline msg done</precode>
we want to make it available from the command line
with the synopsis:
<precode>chorus [-c COUNT | --count=COUNT] [MSG]</precode>
where <code>COUNT</code> defaults to <code>10</code> and <code>MSG</code> defaults to <code>&quot;Revolt!&quot;</code>.
We first define a term corresponding to the <code>--count</code>
option:
<precode>let count =
  let doc = &quot;Repeat the message $(docv) times.&quot; in
  Arg.(value &amp; opt int 10 &amp; info [&quot;c&quot;; &quot;count&quot;] ~docv:&quot;COUNT&quot; ~doc)</precode>
This says that <code>count</code> is a term that evaluates to the
value of an optional argument of type <code>int</code> that
defaults to <code>10</code> if unspecified and whose option name is
either <code>-c</code> or <code>--count</code>. The arguments <code>doc</code> and <code>docv</code> are used to
generate the option's man page information.<newline/>The term for the positional argument <code>MSG</code> is:
<precode>let msg =
  let doc = &quot;The message to print.&quot; in
  Arg.(value &amp; pos 0 string &quot;Revolt!&quot; &amp; info [] ~docv:&quot;MSG&quot; ~doc)</precode>
which says that <code>msg</code> is a term whose value is
the positional argument at index <code>0</code> of type <code>string</code> and
defaults to <code>&quot;Revolt!&quot;</code> if unspecified. Here again
<code>doc</code> and <code>docv</code> are used for the man page information.<newline/>The term for executing <code>chorus</code> with these command line arguments
is :
<precode>let chorus_t = Term.(pure chorus $ count $ msg)</precode>
and we are now ready to define our program:
<precode>let info =
  let doc = &quot;print a customizable message repeatedly&quot; in
  let man = [ `S &quot;BUGS&quot;; `P &quot;Email bug reports to &lt;hehey at example.org&gt;.&quot;;] in
  Term.info &quot;chorus&quot; ~version:&quot;1.6.1&quot; ~doc ~man

let () = match Term.eval (chorus_t, info) with `Error _ -&gt; exit 1 | _ -&gt; exit 0</precode>
The <code>info</code> value created with <reference><element><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>info</type></resolved></element></reference> gives more information
about the term we execute and is used to generate the program's
man page. Since we provided a <code>~version</code> string, the program will
automatically respond to the <code>--version</code> option by printing this
string.<newline/>A program using <reference><element><resolved><value><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>eval</value></resolved></element></reference> always responds to the
<code>--help</code> option by showing the man page about the program generated
using the information you provided with <reference><element><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>info</type></resolved></element></reference> and <reference><element><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module></identifier>info</type></resolved></element></reference>.
Here is the output generated by our example :
<verbatim>&gt; ./chorus --help
NAME
       chorus - print a customizable message repeatedly

SYNOPSIS
       chorus [OPTION]... [MSG]

ARGUMENTS
       MSG (absent=Revolt!)
           The message to print.

OPTIONS
       -c COUNT, --count=COUNT (absent=10)
           Repeat the message COUNT times.

       --help[=FMT] (default=pager)
           Show this help in format FMT (pager, plain or groff).

       --version
           Show version information.

BUGS
       Email bug reports to &lt;hehey at example.org&gt;.</verbatim><newline/>If a pager is available, this output is written to a pager.
This help is also available in plain text or in the
<reference><link>http://www.gnu.org/software/groff/groff.html</link>groff</reference> man page format by
invoking the program with the option <code>--help=plain</code> or <code>--help=groff</code>.<newline/>For examples of more complex command line definitions look and
run the <reference><element><resolved><identifier><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>examples</label></identifier></resolved></element>examples</reference>.<newline/><title level="2">Multiple terms</title><newline/><code>Cmdliner</code> also provides support for programs like <code>darcs</code> or
<code>git</code> that have multiple commands each with their own syntax:
<precode>prog COMMAND [OPTION]... ARG...</precode>
A command is defined by coupling a term with
<reference><element><resolved><label><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>tinfo</label></resolved></element>term information</reference>. The term information defines the
command name and its man page. Given a list of commands the function
<reference><element><resolved><value><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>eval_choice</value></resolved></element></reference> will execute the term corresponding to the
<code>COMMAND</code> argument or or a specific &quot;main&quot; term if there is
no <code>COMMAND</code> argument.<newline/><title level="2">Manual</title><newline/>Man page sections are printed in the order specified by
<reference><element><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>info</type></resolved></element></reference>. The man page information of an argument is listed in
alphabetical order at the end of the text of the section specified
by its <reference><element><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module></identifier>info</type></resolved></element>argument information</reference>. Positional arguments are
also listed iff both the <code>docv</code> and <code>doc</code> string is specified in
their argument information.<newline/>If an argument information mentions a section not specified in
<reference><element><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>info</type></resolved></element></reference>, an empty section is created for it. This section is
inserted just after the <code>&quot;SYNOPSIS&quot;</code> section or after a section
named <code>&quot;DESCRIPTION&quot;</code> if there is one.<newline/>The <code>&quot;SYNOPSIS&quot;</code> section of a man page is generated automatically
from a term's information and its arguments. To substitute your
own instead, start the term's information man page with
a <code>&quot;SYNOPSIS&quot;</code> section.<newline/>Ideally all manual strings should be UTF-8 encoded. However at the
moment Groff (at least <code>1.19.2</code>) doesn't seem to cope with UTF-8
input and UTF-8 characters beyond the ASCII set will look garbled.
Regarding UTF-8 output, generating the man page with <code>-Tutf8</code> maps
the hyphen-minus <code>U+002D</code> to the minus sign <code>U+2212</code> which makes it
difficult to search it in the pager, so <code>-Tascii</code> is used for now.
Conclusion is that it may be better to stick to the ASCII set for now.
Please contact the author if something seems wrong in this reasoning
or if you know a work around this.<newline/><title level="2">Miscellaneous</title><newline/><list><item>The option name <code>--help</code>, (and <code>--version</code> if you specify a
version string) is reserved by the module. Using it as a term or
option name may result in undefined behaviour.</item><item>The evaluation of a term in which the same option name is defined
by more than one argument is undefined.</item></list><newline/><title level="1"><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>cmdline</label>Command line syntax</title><newline/>For programs evaluating a single term the most general form of invocation
is:
<list><item><code>prog [OPTION]... [ARG]...</code></item></list>
The program automatically reponds to the <code>--help</code> option by
printing the help. If a version string is provided in
the <reference><element><resolved><label><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>tinfo</label></resolved></element>term information</reference>, it also automatically responds
to the <code>--version</code> option by printing this string.<newline/>Command line arguments are either <reference><element><resolved><identifier><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>optargs</label></identifier></resolved></element><emphasize>optional</emphasize></reference> or
<reference><element><resolved><identifier><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>posargs</label></identifier></resolved></element><emphasize>positional</emphasize></reference>. Both can be freely interleaved but
since <code>Cmdliner</code> accepts many optional forms this may result in
ambiguities. The special <reference><element><resolved><identifier><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>posargs</label></identifier></resolved></element>token <code>--</code></reference> can be used to resolve
them.<newline/>Programs evaluating multiple terms also add this form of invocation:
<list><item><code>prog COMMAND [OPTION]... [ARG]...</code></item></list>
Commands automatically respond to the <code>--help</code> option
by printing their help. The <code>COMMAND</code> string must
be the first string following the program name and may be specified
by a prefix as long as it is not ambiguous.<newline/><title level="2"><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>optargs</label>Optional arguments</title><newline/>An optional argument is specified on the command line by a <emphasize>name</emphasize> possibly followed by a <emphasize>value</emphasize>.<newline/>The name of an option can be short or long.
<list><item>A <emphasize>short</emphasize> name is a dash followed by a single alphanumeric
character: <code>&quot;-h&quot;</code>, <code>&quot;-q&quot;</code>, <code>&quot;-I&quot;</code>.</item><item>A <emphasize>long</emphasize> name is two dashes followed by alphanumeric
characters and dashes: <code>&quot;--help&quot;</code>, <code>&quot;--silent&quot;</code>, <code>&quot;--ignore-case&quot;</code>.</item></list><newline/>More than one name may refer to the same optional argument. For
example in a given program the names <code>&quot;-q&quot;</code>, <code>&quot;--quiet&quot;</code> and
<code>&quot;--silent&quot;</code> may all stand for the same boolean argument
indicating the program to be quiet. Long names
can be specified by any non ambiguous prefix.<newline/>The value of an option can be specified in three different ways.
<list><item>As the next token on the command line: <code>&quot;-o a.out&quot;</code>,
<code>&quot;--output a.out&quot;</code>.</item><item>Glued to a short name: <code>&quot;-oa.out&quot;</code>.</item><item>Glued to a long name after an equal character:
<code>&quot;--output=a.out&quot;</code>.</item></list>
Glued forms are especially useful if
the value itself starts with a dash as is the case for negative numbers,
<code>&quot;--min=-10&quot;</code>.<newline/>An optional argument without a value is either a <emphasize>flag</emphasize>
(see <reference><element><resolved><value><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module></identifier>flag</value></resolved></element></reference>, <reference><element><resolved><value><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module></identifier>vflag</value></resolved></element></reference>) or an optional argument with an optional
value (see the <code>~vopt</code> argument of <reference><element><resolved><value><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module></identifier>opt</value></resolved></element></reference>).<newline/>Short flags can be grouped together to share a single dash and the group
can end with a short option. For example assuming <code>&quot;-v&quot;</code> and <code>&quot;-x&quot;</code>
are flags and <code>&quot;-f&quot;</code> is a short option:
<list><item><code>&quot;-vx&quot;</code> will be parsed as <code>&quot;-v -x&quot;</code>.</item><item><code>&quot;-vxfopt&quot;</code> will be parsed as <code>&quot;-v -x -fopt&quot;</code>.</item><item><code>&quot;-vxf opt&quot;</code> will be parsed as <code>&quot;-v -x -fopt&quot;</code>.</item><item><code>&quot;-fvx&quot;</code> will be parsed as <code>&quot;-f=vx&quot;</code>.</item></list><newline/><title level="2"><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>posargs</label>Positional arguments</title><newline/>Positional arguments are tokens on the command line that are not
option names and are not the value of an optional argument. They
are numbered from left to right starting with zero.<newline/>Since positional arguments may be mistaken as the optional value
of an optional argument or they may need to look like option
names, anything that follows the special token <code>&quot;--&quot;</code> on the command
line is considered to be a positional argument.<newline/><title level="1"><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>examples</label>Examples</title><newline/>These examples are in the <code>test</code> directory of the distribution.<newline/><title level="2"><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>exrm</label>A <code>rm</code> command</title><newline/>We define the command line interface of a
<code>rm</code> command with the synopsis:
<precode>rm [OPTION]... FILE...</precode>
The <code>-f</code>, <code>-i</code> and <code>-I</code> flags define the prompt behaviour of <code>rm</code>,
represented in our program by the <code>prompt</code> type. If more than one
of these flags is present on the command line the last one takes
precedence.<newline/>To implement this behaviour we map the presence of these flags
to values of the <code>prompt</code> type by using <reference><element><resolved><value><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module></identifier>vflag_all</value></resolved></element></reference>. This
argument will contain all occurences of the flag on the command
line and we just take the <reference><element><resolved><value><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module></identifier>last</value></resolved></element></reference> one to define our term value
(if there's no occurence the last value of the default list <code>[Always]</code> is
taken, i.e. the default is <code>Always</code>).
<precode>(* Implementation of the command, we just print the args. *)

type prompt = Always | Once | Never
let prompt_str = function
| Always -&gt; &quot;always&quot; | Once -&gt; &quot;once&quot; | Never -&gt; &quot;never&quot;

let rm prompt recurse files =
  Printf.printf &quot;prompt = %s\nrecurse = %b\nfiles = %s\n&quot;
    (prompt_str prompt) recurse (String.concat &quot;, &quot; files)

(* Command line interface *)

open Cmdliner;;

let files = Arg.(non_empty &amp; pos_all file [] &amp; info [] ~docv:&quot;FILE&quot;)
let prompt =
  let doc = &quot;Prompt before every removal.&quot; in
  let always = Always, Arg.info [&quot;i&quot;] ~doc in
  let doc = &quot;Ignore nonexistent files and never prompt.&quot; in
  let never = Never, Arg.info [&quot;f&quot;; &quot;force&quot;] ~doc in
  let doc = &quot;Prompt once before removing more than three files, or when
             removing recursively. Less intrusive than $(b,-i), while
             still giving protection against most mistakes.&quot;
  in
  let once = Once, Arg.info [&quot;I&quot;] ~doc in
  Arg.(last &amp; vflag_all [Always] [always; never; once])

let recursive =
  let doc = &quot;Remove directories and their contents recursively.&quot; in
  Arg.(value &amp; flag &amp; info [&quot;r&quot;; &quot;R&quot;; &quot;recursive&quot;] ~doc)

let cmd =
  let doc = &quot;remove files or directories&quot; in
  let man = [
    `S &quot;DESCRIPTION&quot;;
    `P &quot;$(tname) removes each specified $(i,FILE). By default it does not
        remove directories, to also remove them and their contents, use the
        option $(b,--recursive) ($(b,-r) or $(b,-R)).&quot;;
    `P &quot;To remove a file whose name starts with a `-', for example
        `-foo', use one of these commands:&quot;;
    `P &quot;rm -- -foo&quot;; `Noblank;
    `P &quot;rm ./-foo&quot;;
    `P &quot;$(tname) removes symbolic links, not the files referenced by the
        links.&quot;;
    `S &quot;BUGS&quot;; `P &quot;Report bugs to &lt;hehey at example.org&gt;.&quot;;
    `S &quot;SEE ALSO&quot;; `P &quot;$(b,rmdir)(1), $(b,unlink)(2)&quot; ]
  in
  Term.(pure rm $ prompt $ recursive $ files),
  Term.info &quot;rm&quot; ~version:&quot;1.6.1&quot; ~doc ~man

let () = match Term.eval cmd with `Error _ -&gt; exit 1 | _ -&gt; exit 0</precode>
<title level="2"><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>excp</label>A <code>cp</code> command</title><newline/>We define the command line interface of a
<code>cp</code> command with the synopsis:
<precode>cp [OPTION]... SOURCE... DEST</precode>
The <code>DEST</code> argument must be a directory if there is more than
one <code>SOURCE</code>. This constraint is too complex to be expressed by the
combinators of <reference><element><resolved><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module></identifier></resolved></element></reference>. Hence we just give it the <reference><element><resolved><value><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module></identifier>string</value></resolved></element></reference> type
and verify the constraint at the beginning of the <code>cp</code>
implementation. If unsatisfied we return an <code>`Error</code> and
by using <reference><element><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>ret</type></resolved></element></reference> on the lifted result <code>cp_t</code> of <code>cp</code>,
<code>Cmdliner</code> handles the error reporting.
<precode>(* Implementation, we check the dest argument and print the args *)

let cp verbose recurse force srcs dest =
  if List.length srcs &gt; 1 &amp;&amp;
  (not (Sys.file_exists dest) || not (Sys.is_directory dest))
  then
    `Error (false, dest ^ &quot; is not a directory&quot;)
  else
    `Ok (Printf.printf
     &quot;verbose = %b\nrecurse = %b\nforce = %b\nsrcs = %s\ndest = %s\n&quot;
      verbose recurse force (String.concat &quot;, &quot; srcs) dest)

(* Command line interface *)

open Cmdliner;;

let verbose =
  let doc = &quot;Print file names as they are copied.&quot; in
  Arg.(value &amp; flag &amp; info [&quot;v&quot;; &quot;verbose&quot;] ~doc)

let recurse =
  let doc = &quot;Copy directories recursively.&quot; in
  Arg.(value &amp; flag &amp; info [&quot;r&quot;; &quot;R&quot;; &quot;recursive&quot;] ~doc)

let force =
  let doc = &quot;If a destination file cannot be opened, remove it and try again.&quot;in
  Arg.(value &amp; flag &amp; info [&quot;f&quot;; &quot;force&quot;] ~doc)

let srcs =
  let doc = &quot;Source file(s) to copy.&quot; in
  Arg.(non_empty &amp; pos_left ~rev:true 0 file [] &amp; info [] ~docv:&quot;SOURCE&quot; ~doc)

let dest =
  let doc = &quot;Destination of the copy. Must be a directory if there is more
             than one $(i,SOURCE).&quot; in
  Arg.(required &amp; pos ~rev:true 0 (some string) None &amp; info [] ~docv:&quot;DEST&quot;
         ~doc)

let cmd =
  let doc = &quot;copy files&quot; in
  let man = [
    `S &quot;BUGS&quot;;
    `P &quot;Email them to &lt;hehey at example.org&gt;.&quot;;
    `S &quot;SEE ALSO&quot;;
    `P &quot;$(b,mv)(1), $(b,scp)(1), $(b,umask)(2), $(b,symlink)(7)&quot; ]
  in
  Term.(ret (pure cp $ verbose $ recurse $ force $ srcs $ dest)),
  Term.info &quot;cp&quot; ~version:&quot;1.6.1&quot; ~doc ~man

let () = match Term.eval cmd with `Error _ -&gt; exit 1 | _ -&gt; exit 0</precode><newline/><title level="2"><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>extail</label>A <code>tail</code> command</title><newline/>We define the command line interface of a <code>tail</code> command with the
synopsis:
<precode>tail [OPTION]... [FILE]...</precode><newline/>The <code>--lines</code> option whose value specifies the number of last lines to
print has a special syntax where a <code>+</code> prefix indicates to start
printing from that line number. In the program this is represented by
the <code>loc</code> type. We define a custom <code>loc</code> <reference><element><resolved><label><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module></identifier>argconv</label></resolved></element>argument converter</reference>
for this option.<newline/>The <code>--follow</code> option has an optional enumerated value. The argument
converter <code>follow</code>, created with <reference><element><resolved><value><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module></identifier>enum</value></resolved></element></reference> parses the option value
into the enumeration. By using <reference><element><resolved><value><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module></identifier>some</value></resolved></element></reference> and the <code>~vopt</code> argument of
<reference><element><resolved><value><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Arg</module></identifier>opt</value></resolved></element></reference>, the term corresponding to the option <code>--follow</code> evaluates to
<code>None</code> if <code>--follow</code> is absent from the command line, to <code>Some Descriptor</code>
if present but without a value and to <code>Some v</code> if present with a value
<code>v</code> specified.<newline/><precode>(* Implementation of the command, we just print the args. *)

type loc = bool * int
type verb = Verbose | Quiet
type follow = Name | Descriptor

let str = Printf.sprintf
let opt_str sv = function None -&gt; &quot;None&quot; | Some v -&gt; str &quot;Some(%s)&quot; (sv v)
let loc_str (rev, k) = if rev then str &quot;%d&quot; k else str &quot;+%d&quot; k
let follow_str = function Name -&gt; &quot;name&quot; | Descriptor -&gt; &quot;descriptor&quot;
let verb_str = function Verbose -&gt; &quot;verbose&quot; | Quiet -&gt; &quot;quiet&quot;

let tail lines follow verb pid files =
  Printf.printf &quot;lines = %s\nfollow = %s\nverb = %s\npid = %s\nfiles = %s\n&quot;
    (loc_str lines) (opt_str follow_str follow) (verb_str verb)
    (opt_str string_of_int pid) (String.concat &quot;, &quot; files)

(* Command line interface *)

open Cmdliner;;

let lines =
  let loc =
    let parse s = try
      if s &lt;&gt; &quot;&quot; &amp;&amp; s.[0] &lt;&gt; '+' then `Ok (true, int_of_string s) else
      `Ok (false, int_of_string (String.sub s 1 (String.length s - 1)))
    with Failure _ -&gt; `Error &quot;unable to parse integer&quot;
    in
    parse, fun ppf p -&gt; Format.fprintf ppf &quot;%s&quot; (loc_str p)
  in
  Arg.(value &amp; opt loc (true, 10) &amp; info [&quot;n&quot;; &quot;lines&quot;] ~docv:&quot;N&quot;
   ~doc:&quot;Output the last $(docv) lines or use $(i,+)$(docv) to start
         output after the $(i,N)-1th line.&quot;)
let follow =
  let doc = &quot;Output appended data as the file grows. $(docv) specifies how the
             file should be tracked, by its `name' or by its `descriptor'.&quot; in
  let follow = Arg.enum [&quot;name&quot;, Name; &quot;descriptor&quot;, Descriptor] in
  Arg.(value &amp; opt (some follow) ~vopt:(Some Descriptor) None &amp;
       info [&quot;f&quot;; &quot;follow&quot;] ~docv:&quot;ID&quot; ~doc)

let verb =
  let doc = &quot;Never output headers giving file names.&quot; in
  let quiet = Quiet, Arg.info [&quot;q&quot;; &quot;quiet&quot;; &quot;silent&quot;] ~doc in
  let doc = &quot;Always output headers giving file names.&quot; in
  let verbose = Verbose, Arg.info [&quot;v&quot;; &quot;verbose&quot;] ~doc in
  Arg.(last &amp; vflag_all [Quiet] [quiet; verbose])

let pid =
  let doc = &quot;With -f, terminate after process $(docv) dies.&quot; in
  Arg.(value &amp; opt (some int) None &amp; info [&quot;pid&quot;] ~docv:&quot;PID&quot; ~doc)

let files = Arg.(value &amp; (pos_all non_dir_file []) &amp; info [] ~docv:&quot;FILE&quot;)

let cmd =
  let doc = &quot;display the last part of a file&quot; in
  let man = [
    `S &quot;DESCRIPTION&quot;;
    `P &quot;$(tname) prints the last lines of each $(i,FILE) to standard output. If
        no file is specified reads standard input. The number of printed
        lines can be  specified with the $(b,-n) option.&quot;;
    `S &quot;BUGS&quot;;
    `P &quot;Report them to &lt;hehey at example.org&gt;.&quot;;
    `S &quot;SEE ALSO&quot;;
    `P &quot;$(b,cat)(1), $(b,head)(1)&quot; ]
  in
  Term.(pure tail $ lines $ follow $ verb $ pid $ files),
  Term.info &quot;tail&quot; ~version:&quot;1.6.1&quot; ~doc ~man

let () = match Term.eval cmd with `Error _ -&gt; exit 1 | _ -&gt; exit 0</precode><newline/><title level="2"><label><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>exdarcs</label>A <code>darcs</code> command</title><newline/>We define the command line interface of a <code>darcs</code> command with the synopsis:
<precode>darcs [COMMAND] ...</precode><newline/>The <code>--debug</code>, <code>-q</code>, <code>-v</code> and <code>--prehook</code> options are available in
each command. To avoid having to pass them individually to each
command we gather them in a record of type <code>copts</code>. By lifting the
record constructor <code>copts</code> into the term <code>copts_t</code> we now have a term
that we can pass to the commands to stand for an argument of type
<code>copts</code>. These options are documented in a section called <code>COMMON
OPTIONS</code>, since we also want to put <code>--help</code> and <code>--version</code> in this
section, the term information of commands makes a judicious use of the
<code>sdocs</code> parameter of <reference><element><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>info</type></resolved></element></reference>.<newline/>The <code>help</code> command shows help about commands or other topics. The help
shown for commands is generated by <code>Cmdliner</code> by making an approriate
use of <reference><element><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Cmdliner" src="/home/dsheets/.opam/doc/build/cmdliner.0.9.6/_build/src/cmdliner.cmti" digest="44949748974e576b406650ee8540a185"/></xml></base>Cmdliner</root>Term</module></identifier>ret</type></resolved></element></reference> on the lifted <code>help</code> function.<newline/>If the program is invoked without a command we just want to show the
help of the program as printed by <code>Cmdliner</code> with <code>--help</code>. This is
done by the <code>no_cmd</code> term.<newline/><precode>(* Implementations, just print the args. *)

type verb = Normal | Quiet | Verbose
type copts = { debug : bool; verb : verb; prehook : string option }

let str = Printf.sprintf
let opt_str sv = function None -&gt; &quot;None&quot; | Some v -&gt; str &quot;Some(%s)&quot; (sv v)
let opt_str_str = opt_str (fun s -&gt; s)
let verb_str = function
  | Normal -&gt; &quot;normal&quot; | Quiet -&gt; &quot;quiet&quot; | Verbose -&gt; &quot;verbose&quot;

let pr_copts oc copts = Printf.fprintf oc
    &quot;debug = %b\nverbosity = %s\nprehook = %s\n&quot;
    copts.debug (verb_str copts.verb) (opt_str_str copts.prehook)

let initialize copts repodir = Printf.printf
    &quot;%arepodir = %s\n&quot; pr_copts copts repodir

let record copts name email all ask_deps files = Printf.printf
    &quot;%aname = %s\nemail = %s\nall = %b\nask-deps = %b\nfiles = %s\n&quot;
    pr_copts copts (opt_str_str name) (opt_str_str email) all ask_deps
    (String.concat &quot;, &quot; files)

let help copts man_format cmds topic = match topic with
| None -&gt; `Help (`Pager, None) (* help about the program. *)
| Some topic -&gt;
    let topics = &quot;topics&quot; :: &quot;patterns&quot; :: &quot;environment&quot; :: cmds in
    let conv, _ = Cmdliner.Arg.enum (List.rev_map (fun s -&gt; (s, s)) topics) in
    match conv topic with
    | `Error e -&gt; `Error (false, e)
    | `Ok t when t = &quot;topics&quot; -&gt; List.iter print_endline topics; `Ok ()
    | `Ok t when List.mem t cmds -&gt; `Help (man_format, Some t)
    | `Ok t -&gt;
        let page = (topic, 7, &quot;&quot;, &quot;&quot;, &quot;&quot;), [`S topic; `P &quot;Say something&quot;;] in
        `Ok (Cmdliner.Manpage.print man_format Format.std_formatter page)

open Cmdliner;;

(* Help sections common to all commands *)

let copts_sect = &quot;COMMON OPTIONS&quot;
let help_secs = [
 `S copts_sect;
 `P &quot;These options are common to all commands.&quot;;
 `S &quot;MORE HELP&quot;;
 `P &quot;Use `$(mname) $(i,COMMAND) --help' for help on a single command.&quot;;`Noblank;
 `P &quot;Use `$(mname) help patterns' for help on patch matching.&quot;; `Noblank;
 `P &quot;Use `$(mname) help environment' for help on environment variables.&quot;;
 `S &quot;BUGS&quot;; `P &quot;Check bug reports at http://bugs.example.org.&quot;;]

(* Options common to all commands *)

let copts debug verb prehook = { debug; verb; prehook }
let copts_t =
  let docs = copts_sect in
  let debug =
    let doc = &quot;Give only debug output.&quot; in
    Arg.(value &amp; flag &amp; info [&quot;debug&quot;] ~docs ~doc)
  in
  let verb =
    let doc = &quot;Suppress informational output.&quot; in
    let quiet = Quiet, Arg.info [&quot;q&quot;; &quot;quiet&quot;] ~docs ~doc in
    let doc = &quot;Give verbose output.&quot; in
    let verbose = Verbose, Arg.info [&quot;v&quot;; &quot;verbose&quot;] ~docs ~doc in
    Arg.(last &amp; vflag_all [Normal] [quiet; verbose])
  in
  let prehook =
    let doc = &quot;Specify command to run before this $(mname) command.&quot; in
    Arg.(value &amp; opt (some string) None &amp; info [&quot;prehook&quot;] ~docs ~doc)
  in
  Term.(pure copts $ debug $ verb $ prehook)

(* Commands *)

let initialize_cmd =
  let repodir =
    let doc = &quot;Run the program in repository directory $(docv).&quot; in
    Arg.(value &amp; opt file Filename.current_dir_name &amp; info [&quot;repodir&quot;]
           ~docv:&quot;DIR&quot; ~doc)
  in
  let doc = &quot;make the current directory a repository&quot; in
  let man = [
    `S &quot;DESCRIPTION&quot;;
    `P &quot;Turns the current directory into a Darcs repository. Any
       existing files and subdirectories become ...&quot;] @ help_secs
  in
  Term.(pure initialize $ copts_t $ repodir),
  Term.info &quot;initialize&quot; ~sdocs:copts_sect ~doc ~man

let record_cmd =
  let pname =
    let doc = &quot;Name of the patch.&quot; in
    Arg.(value &amp; opt (some string) None &amp; info [&quot;m&quot;; &quot;patch-name&quot;] ~docv:&quot;NAME&quot;
         ~doc)
  in
  let author =
    let doc = &quot;Specifies the author's identity.&quot; in
    Arg.(value &amp; opt (some string) None &amp; info [&quot;A&quot;; &quot;author&quot;] ~docv:&quot;EMAIL&quot;
         ~doc)
  in
  let all =
    let doc = &quot;Answer yes to all patches.&quot; in
    Arg.(value &amp; flag &amp; info [&quot;a&quot;; &quot;all&quot;] ~doc)
  in
  let ask_deps =
    let doc = &quot;Ask for extra dependencies.&quot; in
    Arg.(value &amp; flag &amp; info [&quot;ask-deps&quot;] ~doc)
  in
  let files = Arg.(value &amp; (pos_all file) [] &amp; info [] ~docv:&quot;FILE or DIR&quot;) in
  let doc = &quot;create a patch from unrecorded changes&quot; in
  let man =
    [`S &quot;DESCRIPTION&quot;;
     `P &quot;Creates a patch from changes in the working tree. If you specify
      a set of files ...&quot;] @ help_secs
  in
  Term.(pure record $ copts_t $ pname $ author $ all $ ask_deps $ files),
  Term.info &quot;record&quot; ~doc ~sdocs:copts_sect ~man

let help_cmd =
  let topic =
    let doc = &quot;The topic to get help on. `topics' lists the topics.&quot; in
    Arg.(value &amp; pos 0 (some string) None &amp; info [] ~docv:&quot;TOPIC&quot; ~doc)
  in
  let doc = &quot;display help about darcs and darcs commands&quot; in
  let man =
    [`S &quot;DESCRIPTION&quot;;
     `P &quot;Prints help about darcs commands and other subjects...&quot;] @ help_secs
  in
  Term.(ret (pure help $ copts_t $ Term.man_format $ Term.choice_names $topic)),
  Term.info &quot;help&quot; ~doc ~man

let default_cmd =
  let doc = &quot;a revision control system&quot; in
  let man = help_secs in
  Term.(ret (pure (fun _ -&gt; `Help (`Pager, None)) $ copts_t)),
  Term.info &quot;darcs&quot; ~version:&quot;1.6.1&quot; ~sdocs:copts_sect ~doc ~man

let cmds = [initialize_cmd; record_cmd; help_cmd]

let () = match Term.eval_choice default_cmd cmds with
| `Error _ -&gt; exit 1 | _ -&gt; exit 0</precode></comment></unit>