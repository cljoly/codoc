<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></html></base>Core_thread</root><digest>2ed71f6bcc1d216085aa4bd11d9beaea</digest><import>Arg<digest>1a93c52516966fe6a58564a4c4d9e4fa</digest></import><import>Array<digest>ae800d8cf9903f1d36856950940430e6</digest></import><import>ArrayLabels<digest>58a6628d1722d835ca71a7e76108549e</digest></import><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Bin_prot<digest>1eba8a056671767c0ff0de95b9d79cf0</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>BytesLabels<digest>f6f25f5328b09c590f56c7e37005c501</digest></import><import>Callback<digest>deb9226b3de6bdba985bad268a5b7c51</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>CamlinternalOO<digest>3d0b4eb4525ba4274c8885d7124f7bbc</digest></import><import>Char<digest>60fd98ba6ff303baf9287e7bfb886f12</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Core_kernel<digest>03f47d5c0d0fe0934524d07b846b4d0a</digest></import><import>Digest<digest>eab54f58b34b8a6fdc763db6966614a1</digest></import><import>Fieldslib<digest>d78f9550b468f1166a617738859cc53d</digest></import><import>Filename<digest>3817bec1dad20c6f594d3a85b13020b8</digest></import><import>Format<digest>61d4350242b30078d3ad96c904c9f7a1</digest></import><import>Gc<digest>b6fd17066fdc1a10189b41093e32d95d</digest></import><import>Genlex<digest>b273667d018eaee28be8ef8663aada02</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Lazy<digest>7dba0bf02f60e5ff44e9e4057263f28d</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>List<digest>8988208489274193e4e3f69dc6ec2f75</digest></import><import>ListLabels<digest>f9c893b10648fae8e31ad7bfcd64248f</digest></import><import>Map<digest>770e6123e5460eeb42d3050f13c5ad53</digest></import><import>Marshal<digest>6a7be818a4d43f06397faef2c6f9d35b</digest></import><import>MoreLabels<digest>de38ed0a31c05b2d5f114679e33d4cad</digest></import><import>Nativeint<digest>d9e04753374f7110b66feda40414e5e3</digest></import><import>OUnit<digest>061c2b7c3576f155359af098da2b6cc4</digest></import><import>OUnit2<digest>c63c5d4e5d21b5a6e1c006ea3f6a9f40</digest></import><import>OUnitConf<digest>e9d7ac436b7c92024bd75e3ee9f66c27</digest></import><import>OUnitLogger<digest>2829f5e4133023ee1e1988da414aca56</digest></import><import>OUnitPropList<digest>00368900f7cfb75540524d6799d0501a</digest></import><import>OUnitShared<digest>272141ba126236b9846a49bb85586d03</digest></import><import>OUnitTest<digest>b2691574cfa63f167bc6f6ecaaf4805b</digest></import><import>OUnitUtils<digest>5471ffa587444f794375a4caab4e85fd</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Oo<digest>0977563fa9c23f2df2952b302bdba835</digest></import><import>Pa_bench_lib<digest>49e35efd8e698dfeaeed8204f5445f77</digest></import><import>Pa_ounit_lib<digest>c6212c5c68dc085c7c3df6d5dbfc4532</digest></import><import>Pa_test_lib<digest>9869606bf4a7705fc5a9fcc2bb324335</digest></import><import>Parsing<digest>4f8cd2d8537563c7ea7ee2e5dc94e427</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Printexc<digest>fb616c60404add6295347001c01bfcaa</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Queue<digest>06a89c77a23c672d34cb97e6dfc5f30d</digest></import><import>Random<digest>6d410ecc00aac669668fa399dbd6fca2</digest></import><import>Scanf<digest>31f1631ff7e3da78eabf4b08e91d2861</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>Sexplib<digest>edfea10cfcfd644a920e72e67cb0bbdd</digest></import><import>Signal<digest>5d501433a1c6cf5cc1b420e244749a7f</digest></import><import>Sort<digest>7f209dd54826e792b36c64d0a799f76b</digest></import><import>Stack<digest>3397768ddbaaa5d9fe72a4c82cdc6eb9</digest></import><import>StdLabels<digest>bde0996731d345de202224fb701f3910</digest></import><import>Stream<digest>55948988e71c3ee1749feb21ccec9fc9</digest></import><import>String<digest>9cb286f2c4569fd32c379b1a05c7b590</digest></import><import>StringLabels<digest>d53c23a5c85990103dbeef11dd5cf4f1</digest></import><import>Sys<digest>0ce699458ce4430954d7e6a78874647c</digest></import><import>Typerep_lib<digest>e6a610cd9119c4b89b2ecff18190c6e7</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><import>Weak<digest>441c40816fe88175926465199a665458</digest></import><source><file>lib/core_thread.mli</file><dir>/home/dsheets/.opam/doc/build/core.112.06.02/_build</dir><digest>77649b0c83588b7916f638d4859e36e4</digest></source><doc>Lightweight threads.</doc><type><type><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>t</type><doc>The type of thread handles.</doc></type><comment><title level="6">Thread creation and termination</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>create</value><doc><code>Thread.create funct arg</code> creates a new thread of control,
in which the function application <code>funct arg</code>
is executed concurrently with the other threads of the program.
The application of <code>Thread.create</code>
returns the handle of the newly created thread.
The new thread terminates when the application <code>funct arg</code>
returns, either normally or by raising an uncaught exception.
In the latter case, the exception is printed on standard error,
but not propagated back to the parent thread. Similarly, the
result of the application <code>funct arg</code> is discarded and not
directly accessible to the parent thread.</doc><arrow><arrow><var>a</var><var>b</var></arrow><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>t</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>self</value><doc>Return the thread currently executing.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>t</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>id</value><doc>Return the identifier of the given thread. A thread identifier
is an integer that identifies uniquely the thread.
It can be used to build data structures indexed by threads.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>t</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>exit</value><doc>Terminate prematurely the currently executing thread.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><comment>Terminate prematurely the thread whose handle is given.
This functionality is available only with bytecode-level threads.</comment><comment><title level="6">Suspending threads</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>delay</value><doc><code>delay d</code> suspends the execution of the calling thread for
<code>d</code> seconds. The other program threads continue to run during
this time.</doc><arrow><path><resolved><identifier><type>float</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>join</value><doc><code>join th</code> suspends the execution of the calling thread
until the thread <code>th</code> has terminated.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>t</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>wait_read</value><doc>See <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/thread/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/thread/index.xml"><cmti name="Thread" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/systhreads/thread.cmti" digest="3dbb5b312031de3d1abac0c9efabeba6"/></xml></html></base>Thread</root></identifier>wait_write</value></resolved></element></reference>.</doc><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>wait_write</value><doc>Suspend the execution of the calling thread until at least
one character is available for reading (<reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/thread/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/thread/index.xml"><cmti name="Thread" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/systhreads/thread.cmti" digest="3dbb5b312031de3d1abac0c9efabeba6"/></xml></html></base>Thread</root></identifier>wait_read</value></resolved></element></reference>) or
one character can be written without blocking (<code>wait_write</code>)
on the given Unix file descriptor.</doc><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>wait_timed_read</value><doc>See <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/thread/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/thread/index.xml"><cmti name="Thread" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/systhreads/thread.cmti" digest="3dbb5b312031de3d1abac0c9efabeba6"/></xml></html></base>Thread</root></identifier>wait_timed_write</value></resolved></element></reference>.</doc><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><path><resolved><identifier><type>float</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>wait_timed_write</value><doc>Same as <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/thread/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/thread/index.xml"><cmti name="Thread" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/systhreads/thread.cmti" digest="3dbb5b312031de3d1abac0c9efabeba6"/></xml></html></base>Thread</root></identifier>wait_read</value></resolved></element></reference> and <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/thread/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/thread/index.xml"><cmti name="Thread" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/systhreads/thread.cmti" digest="3dbb5b312031de3d1abac0c9efabeba6"/></xml></html></base>Thread</root></identifier>wait_write</value></resolved></element></reference>, but wait for at most
the amount of time given as second argument (in seconds).
Return <code>true</code> if the file descriptor is ready for input/output
and <code>false</code> if the timeout expired.</doc><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><path><resolved><identifier><type>float</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>yield</value><doc>Re-schedule the calling thread without suspending it.
This function can be used to give scheduling hints,
telling the scheduler that now is a good time to
switch to other threads.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><comment><title level="6">Management of signals</title></comment><comment>Signal handling follows the POSIX thread model: signals generated
by a thread are delivered to that thread; signals generated externally
are delivered to one of the threads that does not block it.
Each thread possesses a set of blocked signals, which can be modified
using <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/thread/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/thread/index.xml"><cmti name="Thread" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/systhreads/thread.cmti" digest="3dbb5b312031de3d1abac0c9efabeba6"/></xml></html></base>Thread</root></identifier>sigmask</value></resolved></element></reference>. This set is inherited at thread creation time.
Per-thread signal masks are supported only by the system thread library
under Unix, but not under Win32, nor by the VM thread library.</comment><value><value><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>sigmask</value><doc><code>sigmask cmd sigs</code> changes the set of blocked signals for the
calling thread.
If <code>cmd</code> is <code>`Set</code>, blocked signals are set to those in
the list <code>sigs</code>.
If <code>cmd</code> is <code>`Block</code>, the signals in <code>sigs</code> are added to
the set of blocked signals.
If <code>cmd</code> is <code>`Unblock</code>, the signals in <code>sigs</code> are removed
from the set of blocked signals.
<code>sigmask</code> returns the set of previously blocked signals for the thread.</doc><arrow><path><resolved><type><identifier><root><base><xml src="../../../../core.112.06.02/_build/lib/signal/index.xml"><cmti name="Signal" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/signal.cmti" digest="5d501433a1c6cf5cc1b420e244749a7f"/></xml></base>Signal</root></identifier>sigprocmask_command</type></resolved></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../core.112.06.02/_build/lib/signal/index.xml"><cmti name="Signal" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/signal.cmti" digest="5d501433a1c6cf5cc1b420e244749a7f"/></xml></base>Signal</root></identifier>t</type></resolved></path></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../core.112.06.02/_build/lib/signal/index.xml"><cmti name="Signal" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/signal.cmti" digest="5d501433a1c6cf5cc1b420e244749a7f"/></xml></base>Signal</root></identifier>t</type></resolved></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>wait_signal</value><doc><code>wait_signal sigs</code> suspends the execution of the calling thread
until the process receives one of the signals specified in the
list <code>sigs</code>. It then returns the number of the signal received.
Signal handlers attached to the signals in <code>sigs</code> will not
be invoked. The signals <code>sigs</code> are expected to be blocked before
calling <code>wait_signal</code>.</doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../core.112.06.02/_build/lib/signal/index.xml"><cmti name="Signal" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/signal.cmti" digest="5d501433a1c6cf5cc1b420e244749a7f"/></xml></base>Signal</root></identifier>t</type></resolved></path></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><comment>Jane Street extensions</comment><value><value><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>threads_have_been_created</value><doc><code>true</code> iff Thread.create has ever been called, even if there is
currently only one running thread.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>num_threads</value><doc><code>num_threads ()</code> attempts to return the number of currently running
threads by parsing /proc. Since this is an operation frought with
potential failure, we return an option in cases of failure</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_thread" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_thread.cmti" digest="2ed71f6bcc1d216085aa4bd11d9beaea"/></xml></base>Core_thread</root>block_forever</value><doc><code>block_forever ()</code> will block the calling thread forever.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><var>a</var></arrow></value></unit>