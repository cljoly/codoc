<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></html></base>Command</root><digest>65261970d130a04897ce5a135cd8c78f</digest><import>Arg<digest>1a93c52516966fe6a58564a4c4d9e4fa</digest></import><import>Array<digest>ae800d8cf9903f1d36856950940430e6</digest></import><import>ArrayLabels<digest>58a6628d1722d835ca71a7e76108549e</digest></import><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Bin_prot<digest>1eba8a056671767c0ff0de95b9d79cf0</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>BytesLabels<digest>f6f25f5328b09c590f56c7e37005c501</digest></import><import>Callback<digest>deb9226b3de6bdba985bad268a5b7c51</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>CamlinternalOO<digest>3d0b4eb4525ba4274c8885d7124f7bbc</digest></import><import>Char<digest>60fd98ba6ff303baf9287e7bfb886f12</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Core_kernel<digest>03f47d5c0d0fe0934524d07b846b4d0a</digest></import><import>Core_unix<digest>388726fa039711a4b1f5f38ce4801398</digest></import><import>Date<digest>314720aa0630b83b2fcbd9e0f3e3a21e</digest></import><import>Date0<digest>d73e4d9cd7753d8039182f3424c36ea2</digest></import><import>Digest<digest>eab54f58b34b8a6fdc763db6966614a1</digest></import><import>Fieldslib<digest>d78f9550b468f1166a617738859cc53d</digest></import><import>Filename<digest>3817bec1dad20c6f594d3a85b13020b8</digest></import><import>Format<digest>61d4350242b30078d3ad96c904c9f7a1</digest></import><import>Gc<digest>b6fd17066fdc1a10189b41093e32d95d</digest></import><import>Genlex<digest>b273667d018eaee28be8ef8663aada02</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Lazy<digest>7dba0bf02f60e5ff44e9e4057263f28d</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>List<digest>8988208489274193e4e3f69dc6ec2f75</digest></import><import>ListLabels<digest>f9c893b10648fae8e31ad7bfcd64248f</digest></import><import>Map<digest>770e6123e5460eeb42d3050f13c5ad53</digest></import><import>Marshal<digest>6a7be818a4d43f06397faef2c6f9d35b</digest></import><import>MoreLabels<digest>de38ed0a31c05b2d5f114679e33d4cad</digest></import><import>Nativeint<digest>d9e04753374f7110b66feda40414e5e3</digest></import><import>OUnit<digest>061c2b7c3576f155359af098da2b6cc4</digest></import><import>OUnit2<digest>c63c5d4e5d21b5a6e1c006ea3f6a9f40</digest></import><import>OUnitConf<digest>e9d7ac436b7c92024bd75e3ee9f66c27</digest></import><import>OUnitLogger<digest>2829f5e4133023ee1e1988da414aca56</digest></import><import>OUnitPropList<digest>00368900f7cfb75540524d6799d0501a</digest></import><import>OUnitShared<digest>272141ba126236b9846a49bb85586d03</digest></import><import>OUnitTest<digest>b2691574cfa63f167bc6f6ecaaf4805b</digest></import><import>OUnitUtils<digest>5471ffa587444f794375a4caab4e85fd</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Ofday<digest>e79e5a85bca18793e88aec1a00c7a0c9</digest></import><import>Oo<digest>0977563fa9c23f2df2952b302bdba835</digest></import><import>Pa_bench_lib<digest>49e35efd8e698dfeaeed8204f5445f77</digest></import><import>Pa_ounit_lib<digest>c6212c5c68dc085c7c3df6d5dbfc4532</digest></import><import>Pa_test_lib<digest>9869606bf4a7705fc5a9fcc2bb324335</digest></import><import>Parsing<digest>4f8cd2d8537563c7ea7ee2e5dc94e427</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Printexc<digest>fb616c60404add6295347001c01bfcaa</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Queue<digest>06a89c77a23c672d34cb97e6dfc5f30d</digest></import><import>Random<digest>6d410ecc00aac669668fa399dbd6fca2</digest></import><import>Scanf<digest>31f1631ff7e3da78eabf4b08e91d2861</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>Sexplib<digest>edfea10cfcfd644a920e72e67cb0bbdd</digest></import><import>Signal<digest>5d501433a1c6cf5cc1b420e244749a7f</digest></import><import>Sort<digest>7f209dd54826e792b36c64d0a799f76b</digest></import><import>Span<digest>fd812834cefbb5618e8eac24c1ed24c4</digest></import><import>Stack<digest>3397768ddbaaa5d9fe72a4c82cdc6eb9</digest></import><import>StdLabels<digest>bde0996731d345de202224fb701f3910</digest></import><import>Stream<digest>55948988e71c3ee1749feb21ccec9fc9</digest></import><import>String<digest>9cb286f2c4569fd32c379b1a05c7b590</digest></import><import>StringLabels<digest>d53c23a5c85990103dbeef11dd5cf4f1</digest></import><import>Stringable<digest>e3c5a2102cbd3ac274d7047c8d4a9d2f</digest></import><import>Sys<digest>0ce699458ce4430954d7e6a78874647c</digest></import><import>Syslog<digest>44f55f5a9ac79855f1c1562613ac4eae</digest></import><import>Time<digest>db18ab5d16fedad4c573e5ba90afbd43</digest></import><import>Time_internal<digest>60a099a263690734b488933de6e368d9</digest></import><import>Typerep_lib<digest>e6a610cd9119c4b89b2ecff18190c6e7</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><import>Weak<digest>441c40816fe88175926465199a665458</digest></import><import>Zone<digest>9880f18d90b9cc99bbaa0851a6e92018</digest></import><source><file>lib/command.mli</file><dir>/home/dsheets/.opam/doc/build/core.112.06.02/_build</dir><digest>0b6fd7d5bfe214212792174d495d5831</digest></source><doc>purely functional command line parsing</doc><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module><doc>composable command-line specifications</doc><type><signature><comment><title level="1">command parameters</title></comment><type><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type><doc>specification of an individual parameter to the command's main function</doc><param>a</param></type><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>const</value><doc>a hard-coded parameter</doc><arrow><var>a</var><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type></identifier></resolved><var>a</var></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>map</value><doc>parameter transformation</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type></identifier></resolved><var>a</var></path><arrow><label>f</label><arrow><var>a</var><var>b</var></arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>apply</value><doc>parameter combination</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type></identifier></resolved><arrow><var>a</var><var>b</var></arrow></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>pair</value><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type></identifier></resolved><var>b</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type></identifier></resolved><tuple><var>a</var><var>b</var></tuple></path></arrow></arrow></value><comment><title level="2">various internal values</title></comment><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>help</value><doc>the help text for the command</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type></identifier></resolved><path><dot><dot><dot><root>Core_kernel</root>Std</dot>Lazy</dot>t</dot><path><resolved><identifier><type>string</type></identifier></resolved></path></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>path</value><doc>the subcommand path of the command</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>args</value><doc>the arguments passed to the command</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></path></value><comment><title level="1">command specifications</title></comment><type><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>t</type><doc>composable command-line specifications<newline/>Ultimately one forms a base command by combining a spec of type
<code>('main, unit -&gt; unit) t</code> with a main function of type <code>'main</code>; see the <code>basic</code>
function below. Combinators in this library incrementally build up the type of main
according to what command-line parameters it expects, so the resulting type of
<code>main</code> is something like:<newline/><code>arg1 -&gt; ... -&gt; argN -&gt; unit -&gt; unit</code><newline/>It may help to think of <code>('a, 'b) t</code> as a function space <code>'a -&gt; 'b</code> embellished with
information about:<newline/><list><item>how to parse command line</item><item>what the command does and how to call it</item><item>how to auto-complete a partial command line</item></list><newline/>One can view a value of type <code>('main_in, 'main_out) t</code> as function that transforms a
main function from type <code>'main_in</code> to <code>'main_out</code>, typically by supplying some
arguments. E.g. a value of type <code>Spec.t</code> might have type:<newline/><precode>        (arg1 -&gt; ... -&gt; argN -&gt; 'r, 'r) Spec.t</precode><newline/>Such a value can transform a main function of type <code>arg1 -&gt; ... -&gt; argN -&gt; 'r</code> by
supplying it argument values of type <code>arg1</code>, ..., <code>argn</code>, leaving a main function
whose type is <code>'r</code>. In the end, <code>Command.basic</code> takes a completed spec where
<code>'r = unit -&gt; unit</code>, and hence whose type looks like:<newline/><precode>        (arg1 -&gt; ... -&gt; argN -&gt; unit -&gt; unit, unit -&gt; unit) Spec.t</precode><newline/>A value of this type can fully apply a main function of type
<code>arg1 -&gt; ... -&gt; argN -&gt; unit -&gt; unit</code> to all its arguments.<newline/>The final unit argument allows the implementation to distinguish between the phases
of (1) parsing the command line and (2) running the body of the command. Exceptions
raised in phase (1) lead to a help message being displayed alongside the exception.
Exceptions raised in phase (2) are displayed without any command line help.<newline/>The view of <code>('main_in, main_out) Spec.t</code> as a function from <code>'main_in</code> to
<code>'main_out</code> is directly reflected by the <code>step</code> function, whose type is:<newline/><precode>        val step : ('m1 -&gt; 'm2) -&gt; ('m1, 'm2) t</precode></doc><param>main_in</param><param>main_out</param></type><comment><code>spec1 ++ spec2 ++ ... ++ specN</code> composes spec1 through specN.<newline/>For example, if <code>spec_a</code> and <code>spec_b</code> have types:<newline/><precode>        spec_a: (a1 -&gt; ... -&gt; aN -&gt; 'ra, 'ra) Spec.t
        spec_b: (b1 -&gt; ... -&gt; bM -&gt; 'rb, 'rb) Spec.t</precode><newline/>then <code>spec_a ++ spec_b</code> has the following type:<newline/><precode>        (a1 -&gt; ... -&gt; aN -&gt; b1 -&gt; ... -&gt; bM -&gt; 'rb, 'rb) Spec.t</precode><newline/>So, <code>spec_a ++ spec_b</code> transforms a main function it by first supplying <code>spec_a</code>'s
arguments of type <code>a1</code>, ..., <code>aN</code>, and then supplying <code>spec_b</code>'s arguments of type
<code>b1</code>, ..., <code>bm</code>.<newline/>One can understand <code>++</code> as function composition by thinking of the type of specs
as concrete function types, representing the transformation of a main function:<newline/><precode>        spec_a: \/ra. (a1 -&gt; ... -&gt; aN -&gt; 'ra) -&gt; 'ra
        spec_b: \/rb. (b1 -&gt; ... -&gt; bM -&gt; 'rb) -&gt; 'rb</precode><newline/>Under this interpretation, the composition of <code>spec_a</code> and <code>spec_b</code> has type:<newline/><precode>        spec_a ++ spec_b : \/rc. (a1 -&gt; ... -&gt; aN -&gt; b1 -&gt; ... -&gt; bM -&gt; 'rc) -&gt; 'rc</precode><newline/>And the implementation is just function composition:<newline/><precode>        sa ++ sb = fun main -&gt; sb (sa main)</precode></comment><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>empty</value><doc>the empty command-line spec</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>t</type></identifier></resolved><var>m</var><var>m</var></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>(++)</value><doc>command-line spec composition</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>t</type></identifier></resolved><var>m1</var><var>m2</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>t</type></identifier></resolved><var>m2</var><var>m3</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>t</type></identifier></resolved><var>m1</var><var>m3</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>(+&gt;)</value><doc>add a rightmost parameter onto the type of main</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>t</type></identifier></resolved><var>m1</var><arrow><var>a</var><var>m2</var></arrow></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>t</type></identifier></resolved><var>m1</var><var>m2</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>(+&lt;)</value><doc>add a leftmost parameter onto the type of main<newline/>this function should only be used as a workaround in situations where the
order of composition is at odds with the order of anonymous arguments due
to factoring out some common spec</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>t</type></identifier></resolved><var>m1</var><var>m2</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>t</type></identifier></resolved><arrow><var>a</var><var>m1</var></arrow><var>m2</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>step</value><doc>combinator for patching up how parameters are obtained or presented<newline/>Here are a couple examples of some of its many uses
<list><item><italic>introducing labeled arguments</italic>
<verbatim>step (fun m v -&gt; m ~foo:v)
               +&gt; flag &quot;-foo&quot; no_arg : (foo:bool -&gt; 'm, 'm) t</verbatim></item><item><italic>prompting for missing values</italic>
<verbatim>step (fun m user -&gt; match user with
                 | Some user -&gt; m user
                 | None -&gt; print_string &quot;enter username: &quot;; m (read_line ()))
               +&gt; flag &quot;-user&quot; (optional string) ~doc:&quot;USER to frobnicate&quot;
               : (string -&gt; 'm, 'm) t</verbatim></item></list><newline/>A use of <code>step</code> might look something like:<newline/><precode>        step (fun main -&gt; let ... in main x1 ... xN) : (arg1 -&gt; ... -&gt; argN -&gt; 'r, 'r) t</precode><newline/>Thus, <code>step</code> allows one to write arbitrary code to decide how to transform a main
function. As a simple example:<newline/><precode>        step (fun main -&gt; main 13.) : (float -&gt; 'r, 'r) t</precode><newline/>This spec is identical to <code>const 13.</code>; it transforms a main function by supplying
it with a single float argument, <code>13.</code>. As another example:<newline/><precode>        step (fun m v -&gt; m ~foo:v) : (foo:'foo -&gt; 'r, 'foo -&gt; 'r) t</precode><newline/>This spec transforms a main function that requires a labeled argument into
a main function that requires the argument unlabeled, making it easily composable
with other spec combinators.</doc><arrow><arrow><var>m1</var><var>m2</var></arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>t</type></identifier></resolved><var>m1</var><var>m2</var></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>wrap</value><doc>combinator for defining a class of commands with common behavior<newline/>Here are two examples of command classes defined using <code>wrap</code>
<list><item><italic>print top-level exceptions to stderr</italic>
<verbatim>wrap (fun ~run ~main -&gt;
                 Exn.handle_uncaught ~exit:true (fun () -&gt; run main)
               ) : ('m, unit) t -&gt; ('m, unit) t</verbatim></item><item><italic>iterate over lines from stdin</italic>
<verbatim>wrap (fun ~run ~main -&gt;
                 In_channel.iter_lines stdin ~f:(fun line -&gt; run (main line))
               ) : ('m, unit) t -&gt; (string -&gt; 'm, unit) t</verbatim></item></list></doc><arrow><arrow><label>run</label><arrow><var>m1</var><var>r1</var></arrow><arrow><label>main</label><var>m2</var><var>r2</var></arrow></arrow><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>t</type></identifier></resolved><var>m1</var><var>r1</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>t</type></identifier></resolved><var>m2</var><var>r2</var></path></arrow></arrow></value><comment><title level="1">argument types</title></comment><module><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module><type><signature><type><type><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module>t</type><doc>the type of a command line argument</doc><param>a</param></type><value><value><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module>create</value><doc>an argument type includes information about how to parse values of that type from
the command line, and (optionally) how to auto-complete partial arguments of that
type via bash's programmable TAB-completion. In addition to the argument prefix,
autocompletion also has access to any previously parsed arguments in the form of a
heterogeneous map into which previously parsed arguments may register themselves by
providing a Univ_map.Key using the ~key argument to <code>create</code>.<newline/>If the <code>of_string</code> function raises an exception, command line parsing will be
aborted and the exception propagated up to top-level and printed along with
command-line help.</doc><arrow><optional>complete</optional><arrow><path><dot><dot><dot><root>Core_kernel</root>Std</dot>Univ_map</dot>t</dot></path><arrow><label>part</label><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></arrow><arrow><optional>key</optional><path><dot><dot><dot><dot><dot><root>Core_kernel</root>Std</dot>Univ_map</dot>Multi</dot>Key</dot>t</dot><var>a</var></path><arrow><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><var>a</var></arrow><path><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module>t</type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></value><value><value><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module>of_map</value><doc>an auto-completing Arg_type over a finite set of values</doc><arrow><optional>key</optional><path><dot><dot><dot><dot><dot><root>Core_kernel</root>Std</dot>Univ_map</dot>Multi</dot>Key</dot>t</dot><var>a</var></path><arrow><path><dot><dot><dot><dot><root>Core_kernel</root>Std</dot>String</dot>Map</dot>t</dot><var>a</var></path><path><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module>t</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module>of_alist_exn</value><doc>convenience wrapper for <code>of_map</code>. Raises on duplicate keys</doc><arrow><optional>key</optional><path><dot><dot><dot><dot><dot><root>Core_kernel</root>Std</dot>Univ_map</dot>Multi</dot>Key</dot>t</dot><var>a</var></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><var>a</var></tuple></path><path><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module>t</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module>file</value><doc><code>file</code> defines an <code>Arg_type.t</code> that completes in the same way as
<code>Command.Spec.file</code>, but perhaps with a different type than <code>string</code> or with an
autocompletion key.</doc><arrow><optional>key</optional><path><dot><dot><dot><dot><dot><root>Core_kernel</root>Std</dot>Univ_map</dot>Multi</dot>Key</dot>t</dot><var>a</var></path><arrow><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><var>a</var></arrow><path><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module>t</type></identifier></resolved><var>a</var></path></arrow></arrow></value></signature></type></module><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>string</value><doc>Beware that an anonymous argument of type <code>int</code> cannot be specified as negative, as
it is ambiguous whether -1 is a negative number or a flag. If you need to pass a
negative number to your program, make it a parameter to a flag.</doc><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module></identifier>t</type></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>int</value><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module></identifier>t</type></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>float</value><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module></identifier>t</type></resolved><path><resolved><identifier><type>float</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>bool</value><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module></identifier>t</type></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>date</value><doc><code>time</code> requires a time zone.</doc><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module></identifier>t</type></resolved><path><resolved><type><identifier><root><base><xml src="../../../../core.112.06.02/_build/lib/date/index.xml"><cmti name="Date" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/date.cmti" digest="314720aa0630b83b2fcbd9e0f3e3a21e"/></xml></base>Date</root></identifier>t</type></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>time</value><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module></identifier>t</type></resolved><path><dot><resolved><identifier><root><base><xml src="../../../../menhir.20141215/src/_stage1/time/index.xml"><cmti name="Time" src="/home/dsheets/.opam/doc/build/menhir.20141215/src/_stage1/time.cmti" digest="8e7f3f3fb0c2edf2c2f966fa16ff9bfb"/></xml></base>Time</root></identifier></resolved>t</dot></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>time_ofday</value><doc>Use <code>time_ofday_unzoned</code> only when time zone is implied somehow.</doc><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module></identifier>t</type></resolved><path><dot><dot><dot><resolved><identifier><root><base><xml src="../../../../menhir.20141215/src/_stage1/time/index.xml"><cmti name="Time" src="/home/dsheets/.opam/doc/build/menhir.20141215/src/_stage1/time.cmti" digest="8e7f3f3fb0c2edf2c2f966fa16ff9bfb"/></xml></base>Time</root></identifier></resolved>Ofday</dot>Zoned</dot>t</dot></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>time_ofday_unzoned</value><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module></identifier>t</type></resolved><path><dot><dot><resolved><identifier><root><base><xml src="../../../../menhir.20141215/src/_stage1/time/index.xml"><cmti name="Time" src="/home/dsheets/.opam/doc/build/menhir.20141215/src/_stage1/time.cmti" digest="8e7f3f3fb0c2edf2c2f966fa16ff9bfb"/></xml></base>Time</root></identifier></resolved>Ofday</dot>t</dot></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>time_span</value><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module></identifier>t</type></resolved><path><dot><dot><resolved><identifier><root><base><xml src="../../../../menhir.20141215/src/_stage1/time/index.xml"><cmti name="Time" src="/home/dsheets/.opam/doc/build/menhir.20141215/src/_stage1/time.cmti" digest="8e7f3f3fb0c2edf2c2f966fa16ff9bfb"/></xml></base>Time</root></identifier></resolved>Span</dot>t</dot></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>file</value><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module></identifier>t</type></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></value><comment><title level="1">flag specifications</title></comment><type><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>flag</type><doc>a flag specification</doc><param>a</param></type><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>flag</value><doc><code>flag name spec ~doc</code> specifies a command that, among other things, takes a flag
named <code>name</code> on its command line. <code>doc</code> indicates the meaning of the flag.<newline/>All flags must have a dash at the beginning of the name. If <code>name</code> is not prefixed
by &quot;-&quot;, it will be normalized to <code>&quot;-&quot; ^ name</code>.<newline/>Unless <code>full_flag_required</code> is used, one doesn't have to pass <code>name</code> exactly on the
command line, but only an unambiguous prefix of <code>name</code> (i.e., a prefix which is not
a prefix of any other flag's name).<newline/>NOTE: the <code>doc</code> for a flag which takes an argument should be of the form
<code>arg_name ^ &quot; &quot; ^ description</code> where <code>arg_name</code> describes the argument and
<code>description</code> describes the meaning of the flag.<newline/>NOTE: flag names (including aliases) containing underscores will be rejected.
Use dashes instead.<newline/>NOTE: &quot;-&quot; by itself is an invalid flag name and will be rejected.</doc><arrow><optional>aliases</optional><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><arrow><optional>full_flag_required</optional><path><resolved><identifier><type>unit</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>flag</type></identifier></resolved><var>a</var></path><arrow><label>doc</label><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>map_flag</value><doc><code>map_flag flag ~f</code> transforms the parsed result of <code>flag</code> by applying <code>f</code></doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>flag</type></identifier></resolved><var>a</var></path><arrow><label>f</label><arrow><var>a</var><var>b</var></arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>flag</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>required</value><doc>required flags must be passed exactly once</doc><arrow><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module></identifier>t</type></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>flag</type></identifier></resolved><var>a</var></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>optional</value><doc>optional flags may be passed at most once</doc><arrow><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module></identifier>t</type></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>flag</type></identifier></resolved><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>optional_with_default</value><doc><code>optional_with_default</code> flags may be passed at most once, and
default to a given value</doc><arrow><var>a</var><arrow><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module></identifier>t</type></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>flag</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>listed</value><doc><code>listed</code> flags may be passed zero or more times</doc><arrow><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module></identifier>t</type></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>flag</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>one_or_more</value><doc><code>one_or_more</code> flags must be passed one or more times</doc><arrow><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module></identifier>t</type></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>flag</type></identifier></resolved><tuple><var>a</var><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></tuple></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>no_arg</value><doc><code>no_arg</code> flags may be passed at most once. The boolean returned
is true iff the flag is passed on the command line</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>flag</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>no_arg_register</value><doc><code>no_arg_register ~key ~value</code> is like <code>no_arg</code>, but associates <code>value</code>
with <code>key</code> in the in the auto-completion environment</doc><arrow><label>key</label><path><dot><dot><dot><dot><dot><root>Core_kernel</root>Std</dot>Univ_map</dot>With_default</dot>Key</dot>t</dot><var>a</var></path><arrow><label>value</label><var>a</var><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>flag</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>no_arg_abort</value><doc><code>no_arg_abort ~exit</code> is like <code>no_arg</code>, but aborts command-line parsing
by calling <code>exit</code>. This flag type is useful for &quot;help&quot;-style flags that
just print something and exit.</doc><arrow><label>exit</label><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><dot><dot><root>Core_kernel</root>Std</dot>never_returns</dot></path></arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>flag</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>escape</value><doc><code>escape</code> flags may be passed at most once. They cause the command line parser to
abort and pass through all remaining command line arguments as the value of the
flag.<newline/>A standard choice of flag name to use with <code>escape</code> is <code>&quot;--&quot;</code>.</doc><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>flag</type></identifier></resolved><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></path></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>flags_of_args_exn</value><doc><code>flags_of_args_exn args</code> creates a spec from <code>Arg.t</code>s, for compatibility with
ocaml's base libraries. Fails if it encounters an arg that cannot be converted.<newline/>NOTE: There is a difference in side effect ordering between <code>Arg</code> and <code>Command</code>. In
the <code>Arg</code> module, flag handling functions embedded in <code>Arg.t</code> values will be run in
the order that flags are passed on the command line. In the <code>Command</code> module, using
<code>flags_of_args_exn flags</code>, they are evaluated in the order that the <code>Arg.t</code> values
appear in <code>flags</code>.</doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><dot><dot><dot><root>Core_kernel</root>Std</dot>Arg</dot>t</dot></path></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>t</type></identifier></resolved><var>a</var><var>a</var></path></arrow></value><comment><title level="1">anonymous argument specifications</title></comment><type><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type><doc>a specification of some number of anonymous arguments</doc><param>a</param></type><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anon</value><doc><code>anon spec</code> specifies a command that, among other things, takes
the anonymous arguments specified by <code>spec</code>.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>param</type></identifier></resolved><var>a</var></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>map_anons</value><doc><code>map_anons anons ~f</code> transforms the parsed result of <code>anons</code> by applying <code>f</code></doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>a</var></path><arrow><label>f</label><arrow><var>a</var><var>b</var></arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>(%:)</value><doc><code>(name %: typ)</code> specifies a required anonymous argument of type <code>typ</code>.<newline/>The <code>name</code> must not be surrounded by whitespace, if it is, an exn will be raised.<newline/>If the <code>name</code> is surrounded by a special character pair (&lt;&gt;, {}, [] or (),)
<code>name</code> will remain as-is, otherwise, <code>name</code> will be uppercased.<newline/>In the situation where <code>name</code> is only prefixed or only suffixed by one of the
special character pairs, or different pairs are used, (e.g. &quot;&lt;ARG]&quot;) an exn will
be raised.<newline/>The (possibly transformed) <code>name</code> is mentioned in the generated help for the
command.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>Arg_type</module></identifier>t</type></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>sequence</value><doc><code>sequence anons</code> specifies a sequence of anonymous arguments. An exception
will be raised if <code>anons</code> matches anything other than a fixed number of
anonymous arguments</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>non_empty_sequence</value><doc><code>non_empty_sequence anons</code> is like <code>sequence anons</code> except an exception will be
raised if there is not at least one anonymous argument given.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><tuple><var>a</var><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></tuple></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>maybe</value><doc><code>(maybe anons)</code> indicates that some anonymous arguments are optional</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>maybe_with_default</value><doc><code>(maybe_with_default default anons)</code> indicates an optional anonymous
argument with a default value</doc><arrow><var>a</var><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>a</var></path></arrow></arrow></value><comment><code>t2</code>, <code>t3</code>, and <code>t4</code> each concatenate multiple anonymous argument
specs into a single one. The purpose of these combinators is to allow
for optional sequences of anonymous arguments. Consider a command with
usage:<newline/><verbatim>        main.exe FOO [BAR BAZ]</verbatim><newline/>where the second and third anonymous arguments must either both
be there or both not be there. This can be expressed as:<newline/><precode>        t2 (&quot;FOO&quot; %: foo) (maybe (t2 (&quot;BAR&quot; %: bar) (&quot;BAZ&quot; %: baz)))]</precode><newline/>Sequences of 5 or more anonymous arguments can be built up using
nested tuples:<newline/><precode>        maybe (t3 a b (t3 c d e))</precode></comment><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>t2</value><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>b</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><tuple><var>a</var><var>b</var></tuple></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>t3</value><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>b</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>c</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><tuple><var>a</var><var>b</var><var>c</var></tuple></path></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>t4</value><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>b</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>c</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><var>d</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module>anons</type></identifier></resolved><tuple><var>a</var><var>b</var><var>c</var><var>d</var></tuple></path></arrow></arrow></arrow></arrow></value></signature></type></module><type><type><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>t</type><doc>commands which can be combined into a hierarchy of subcommands</doc></type><type><type><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>basic_command</type><param>main</param><param>result</param><arrow><label>summary</label><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><optional>readme</optional><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow><arrow><path><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module></identifier>t</type></resolved><var>main</var><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><var>result</var></arrow></path><arrow><var>main</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>t</type></identifier></resolved></path></arrow></arrow></arrow></arrow></type><value><value><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>basic</value><doc><code>basic ~summary ?readme spec main</code> is a basic command that executes a function <code>main</code>
which is passed parameters parsed from the command line according to <code>spec</code>. <code>summary</code>
is to contain a short one-line description of its behavior. <code>readme</code> is to contain
any longer description of its behavior that will go on that commands' help screen.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>basic_command</type></identifier></resolved><var>main</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>group</value><doc><code>group ~summary subcommand_alist</code> is a compound command with named
subcommands, as found in <code>subcommand_alist</code>. <code>summary</code> is to contain
a short one-line description of the command group. <code>readme</code> is to
contain any longer description of its behavior that will go on that
command's help screen.<newline/>NOTE: subcommand names containing underscores will be rejected. Use dashes
instead.</doc><arrow><label>summary</label><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><optional>readme</optional><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>t</type></identifier></resolved></path></tuple></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>t</type></identifier></resolved></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>exec</value><doc><code>exec ~summary ~path_to_exe</code> runs <code>exec</code> on the executable at <code>path_to_exe</code>. If
<code>path_to_exe</code> is <code>`Absolute path</code> then <code>path</code> is executed without any further
qualification. If it is <code>`Relative_to_me path</code> then <code>Filename.dirname
    Sys.executable_name ^ &quot;/&quot; ^ path</code> is executed instead. All of the usual caveats about
<code>Sys.executable_name</code> apply: specifically, it may only return an absolute path in
Linux. On other operating systems it will return <code>Sys.argv.(0)</code>.<newline/>Care has been taken to support nesting multiple executables built with Command. In
particular, recursive help and autocompletion should work as expected.<newline/>NOTE: non-Command executables can be used with this function but will still be
executed when <code>help -recursive</code> is called or autocompletion is attempted (despite the
fact that neither will be particularly helpful in this case). This means that if you
have a shell script called &quot;reboot-everything.sh&quot; that takes no arguments and reboots
everything no matter how it is called, you shouldn't use it with <code>exec</code>.<newline/>Additionally, no loop detection is attempted, so if you nest an executable within
itself, <code>help -recursive</code> and autocompletion will hang forever (although actually
running the subcommand will work).</doc><arrow><label>summary</label><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><optional>readme</optional><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow><arrow><label>path_to_exe</label><poly_variant><fixed/><constructor>Absolute<path><resolved><identifier><type>string</type></identifier></resolved></path></constructor><constructor>Relative_to_me<path><resolved><identifier><type>string</type></identifier></resolved></path></constructor></poly_variant><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>t</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>run</value><doc>Run a command against <code>Sys.argv</code>, or <code>argv</code> if it is specified.<newline/><code>extend</code> can be used to add extra command line arguments to basic subcommands of the
command. <code>extend</code> will be passed the (fully expanded) path to a command, and its
output will be appended to the list of arguments being processed. For example,
suppose a program like this is compiled into <code>exe</code>:<newline/><precode>        let bar = Command.basic ...
        let foo = Command.group ~summary:... [&quot;bar&quot;, bar]
        let main = Command.group ~summary:... [&quot;foo&quot;, foo]
        Command.run ~extend:(fun _ -&gt; [&quot;-baz&quot;]) main</precode><newline/>Then if a user ran <code>exe f b</code>, <code>extend</code> would be passed <code>[&quot;foo&quot;; &quot;bar&quot;]</code> and <code>&quot;-baz&quot;</code>
would be appended to the command line for processing by <code>bar</code>. This can be used to
add a default flags section to a user config file.</doc><arrow><optional>version</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><optional>build_info</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><optional>argv</optional><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><arrow><optional>extend</optional><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>t</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></value><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Deprecated</module><doc><code>Deprecated</code> should be used only by <code>Core_extended.Deprecated_command</code>. At some point
it will go away.</doc><type><signature><module><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Deprecated</module>Spec</module><type><signature><value><value><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Deprecated</module>Spec</module>no_arg</value><arrow><label>hook</label><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><path><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module></identifier>flag</type></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></arrow></value><value><value><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Deprecated</module>Spec</module>escape</value><arrow><label>hook</label><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><path><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module></identifier>flag</type></resolved><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></path></path></arrow></value><value><value><module><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Deprecated</module>Spec</module>ad_hoc</value><arrow><label>usage_arg</label><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Spec</module></identifier>anons</type></resolved><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></path></arrow></value></signature></type></module><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Deprecated</module>summary</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>t</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Deprecated</module>help_recursive</value><arrow><label>cmd</label><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><label>with_flags</label><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><label>expand_dots</label><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>t</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></tuple></path></arrow></arrow></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Deprecated</module>run</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>t</type></identifier></resolved></path><arrow><label>cmd</label><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><label>args</label><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><arrow><label>is_help</label><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><label>is_help_rec</label><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><label>is_help_rec_flags</label><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><label>is_expand_dots</label><path><resolved><identifier><type>bool</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Deprecated</module>get_flag_names</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>t</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Deprecated</module>version</value><path><resolved><identifier><type>string</type></identifier></resolved></path></value><value><value><module><root><base><xml src="index.xml"><cmti name="Command" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/command.cmti" digest="65261970d130a04897ce5a135cd8c78f"/></xml></base>Command</root>Deprecated</module>build_info</value><path><resolved><identifier><type>string</type></identifier></resolved></path></value></signature></type></module></unit>