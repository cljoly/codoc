<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></html></base>Core_mutex</root><digest>0535defeba3f5f0cd21feeb1e1c0a42d</digest><import>Arg<digest>1a93c52516966fe6a58564a4c4d9e4fa</digest></import><import>Array<digest>ae800d8cf9903f1d36856950940430e6</digest></import><import>ArrayLabels<digest>58a6628d1722d835ca71a7e76108549e</digest></import><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Bin_prot<digest>1eba8a056671767c0ff0de95b9d79cf0</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>BytesLabels<digest>f6f25f5328b09c590f56c7e37005c501</digest></import><import>Callback<digest>deb9226b3de6bdba985bad268a5b7c51</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>CamlinternalOO<digest>3d0b4eb4525ba4274c8885d7124f7bbc</digest></import><import>Char<digest>60fd98ba6ff303baf9287e7bfb886f12</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Condition<digest>bcf45895f3d241f67f7a2d9d58cc6219</digest></import><import>Core_kernel<digest>03f47d5c0d0fe0934524d07b846b4d0a</digest></import><import>Core_unix<digest>388726fa039711a4b1f5f38ce4801398</digest></import><import>Date0<digest>d73e4d9cd7753d8039182f3424c36ea2</digest></import><import>Digest<digest>eab54f58b34b8a6fdc763db6966614a1</digest></import><import>Fieldslib<digest>d78f9550b468f1166a617738859cc53d</digest></import><import>Filename<digest>3817bec1dad20c6f594d3a85b13020b8</digest></import><import>Format<digest>61d4350242b30078d3ad96c904c9f7a1</digest></import><import>Gc<digest>b6fd17066fdc1a10189b41093e32d95d</digest></import><import>Genlex<digest>b273667d018eaee28be8ef8663aada02</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Lazy<digest>7dba0bf02f60e5ff44e9e4057263f28d</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>List<digest>8988208489274193e4e3f69dc6ec2f75</digest></import><import>ListLabels<digest>f9c893b10648fae8e31ad7bfcd64248f</digest></import><import>Map<digest>770e6123e5460eeb42d3050f13c5ad53</digest></import><import>Marshal<digest>6a7be818a4d43f06397faef2c6f9d35b</digest></import><import>MoreLabels<digest>de38ed0a31c05b2d5f114679e33d4cad</digest></import><import>Mutex<digest>4b92df061cc00e380f5e31b33f076281</digest></import><import>Nativeint<digest>d9e04753374f7110b66feda40414e5e3</digest></import><import>OUnit<digest>061c2b7c3576f155359af098da2b6cc4</digest></import><import>OUnit2<digest>c63c5d4e5d21b5a6e1c006ea3f6a9f40</digest></import><import>OUnitConf<digest>e9d7ac436b7c92024bd75e3ee9f66c27</digest></import><import>OUnitLogger<digest>2829f5e4133023ee1e1988da414aca56</digest></import><import>OUnitPropList<digest>00368900f7cfb75540524d6799d0501a</digest></import><import>OUnitShared<digest>272141ba126236b9846a49bb85586d03</digest></import><import>OUnitTest<digest>b2691574cfa63f167bc6f6ecaaf4805b</digest></import><import>OUnitUtils<digest>5471ffa587444f794375a4caab4e85fd</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Ofday<digest>e79e5a85bca18793e88aec1a00c7a0c9</digest></import><import>Oo<digest>0977563fa9c23f2df2952b302bdba835</digest></import><import>Pa_bench_lib<digest>49e35efd8e698dfeaeed8204f5445f77</digest></import><import>Pa_ounit_lib<digest>c6212c5c68dc085c7c3df6d5dbfc4532</digest></import><import>Pa_test_lib<digest>9869606bf4a7705fc5a9fcc2bb324335</digest></import><import>Parsing<digest>4f8cd2d8537563c7ea7ee2e5dc94e427</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Printexc<digest>fb616c60404add6295347001c01bfcaa</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Queue<digest>06a89c77a23c672d34cb97e6dfc5f30d</digest></import><import>Random<digest>6d410ecc00aac669668fa399dbd6fca2</digest></import><import>Scanf<digest>31f1631ff7e3da78eabf4b08e91d2861</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>Sexplib<digest>edfea10cfcfd644a920e72e67cb0bbdd</digest></import><import>Signal<digest>5d501433a1c6cf5cc1b420e244749a7f</digest></import><import>Sort<digest>7f209dd54826e792b36c64d0a799f76b</digest></import><import>Span<digest>fd812834cefbb5618e8eac24c1ed24c4</digest></import><import>Stack<digest>3397768ddbaaa5d9fe72a4c82cdc6eb9</digest></import><import>StdLabels<digest>bde0996731d345de202224fb701f3910</digest></import><import>Stream<digest>55948988e71c3ee1749feb21ccec9fc9</digest></import><import>String<digest>9cb286f2c4569fd32c379b1a05c7b590</digest></import><import>StringLabels<digest>d53c23a5c85990103dbeef11dd5cf4f1</digest></import><import>Stringable<digest>e3c5a2102cbd3ac274d7047c8d4a9d2f</digest></import><import>Sys<digest>0ce699458ce4430954d7e6a78874647c</digest></import><import>Syslog<digest>44f55f5a9ac79855f1c1562613ac4eae</digest></import><import>Time<digest>db18ab5d16fedad4c573e5ba90afbd43</digest></import><import>Time_internal<digest>60a099a263690734b488933de6e368d9</digest></import><import>Typerep_lib<digest>e6a610cd9119c4b89b2ecff18190c6e7</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><import>Weak<digest>441c40816fe88175926465199a665458</digest></import><import>Zone<digest>9880f18d90b9cc99bbaa0851a6e92018</digest></import><source><file>lib/core_mutex.mli</file><dir>/home/dsheets/.opam/doc/build/core.112.06.02/_build</dir><digest>6a96ec3b44cf9198abd2915c8b35bad5</digest></source><type><type><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>t</type><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/mutex/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/mutex/index.xml"><cmti name="Mutex" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/systhreads/mutex.cmti" digest="4b92df061cc00e380f5e31b33f076281"/></xml></html></base>Mutex</root></identifier>t</type></resolved></path></type><value><value><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>create</value><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>t</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>equal</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>t</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>t</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>lock</value><doc><code>lock mtx</code> locks <code>mtx</code>, possibly waiting for it to be released
first by another thread.<raise><name>Unix_error</name>if <code>lock</code> attempts to acquire <code>mtx</code> recursively.</raise></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>t</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>try_lock</value><doc><code>try_lock</code> is like <code>lock</code>, but always returns immediately. If the calling thread or
another one already has the mutex it returns <code>`Already_held_by_me_or_other</code>, otherwise
it locks it and returns <code>`Acquired</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>t</type></identifier></resolved></path><poly_variant><fixed/><constructor>Already_held_by_me_or_other<constant/></constructor><constructor>Acquired<constant/></constructor></poly_variant></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>timedlock</value><doc><code>timedlock mtx timeout</code> like <code>lock</code>, but takes a <code>timeout</code> parameter.<return><code>true</code> if the mutex was acquired, or <code>false</code> when <code>timeout</code>
expires otherwise.</return><raise><name>Unix_error</name>if <code>timedlock</code> attempts to acquire <code>mtx</code> recursively.</raise></doc><path><dot><dot><dot><root>Core_kernel</root>Std</dot>Or_error</dot>t</dot><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>t</type></identifier></resolved></path><arrow><path><dot><resolved><identifier><root><base><xml src="../../../../menhir.20141215/src/_stage1/time/index.xml"><cmti name="Time" src="/home/dsheets/.opam/doc/build/menhir.20141215/src/_stage1/time.cmti" digest="8e7f3f3fb0c2edf2c2f966fa16ff9bfb"/></xml></base>Time</root></identifier></resolved>t</dot></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></arrow></path></value><value><value><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>unlock</value><doc><code>unlock mtx</code> unlocks <code>mtx</code>.<raise><name>Unix_error</name>if <code>unlock</code> attempts to release an unacquired
mutex or a mutex held by another thread.</raise></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>t</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>critical_section</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>t</type></identifier></resolved></path><arrow><label>f</label><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><var>a</var></arrow><var>a</var></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>synchronize</value><doc><code>synchronize f</code> creates a mutex and returns a new function that is identical to <code>f</code>
except that the mutex is held during its execution.</doc><arrow><arrow><var>a</var><var>b</var></arrow><arrow><var>a</var><var>b</var></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>update_signal</value><doc><code>update_signal mtx cnd ~f</code> updates some state within a critical
section protected by mutex <code>mtx</code> using function <code>f</code> and signals
condition variable <code>cnd</code> after finishing. If <code>f</code> raises an exception,
the condition will NOT be signaled!</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>t</type></identifier></resolved></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/condition/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/condition/index.xml"><cmti name="Condition" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/systhreads/condition.cmti" digest="bcf45895f3d241f67f7a2d9d58cc6219"/></xml></html></base>Condition</root></identifier>t</type></resolved></path><arrow><label>f</label><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><var>a</var></arrow><var>a</var></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>update_broadcast</value><doc><code>update_broadcast mtx cnd ~f</code> updates some state within a critical
section protected by mutex <code>mtx</code> using function <code>f</code> and broadcasts
condition variable <code>cnd</code> after finishing. If <code>f</code> raises an exception,
the condition will NOT be broadcast!</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Core_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/core_mutex.cmti" digest="0535defeba3f5f0cd21feeb1e1c0a42d"/></xml></base>Core_mutex</root>t</type></identifier></resolved></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/condition/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/systhreads/condition/index.xml"><cmti name="Condition" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/systhreads/condition.cmti" digest="bcf45895f3d241f67f7a2d9d58cc6219"/></xml></html></base>Condition</root></identifier>t</type></resolved></path><arrow><label>f</label><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><var>a</var></arrow><var>a</var></arrow></arrow></arrow></value></unit>