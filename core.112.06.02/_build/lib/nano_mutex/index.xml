<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></html></base>Nano_mutex</root><digest>77668a739d6c15e57bab27c0a706c26a</digest><import>Arg<digest>1a93c52516966fe6a58564a4c4d9e4fa</digest></import><import>Array<digest>ae800d8cf9903f1d36856950940430e6</digest></import><import>ArrayLabels<digest>58a6628d1722d835ca71a7e76108549e</digest></import><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Bin_prot<digest>1eba8a056671767c0ff0de95b9d79cf0</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>BytesLabels<digest>f6f25f5328b09c590f56c7e37005c501</digest></import><import>Callback<digest>deb9226b3de6bdba985bad268a5b7c51</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>CamlinternalOO<digest>3d0b4eb4525ba4274c8885d7124f7bbc</digest></import><import>Char<digest>60fd98ba6ff303baf9287e7bfb886f12</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Core_kernel<digest>03f47d5c0d0fe0934524d07b846b4d0a</digest></import><import>Digest<digest>eab54f58b34b8a6fdc763db6966614a1</digest></import><import>Fieldslib<digest>d78f9550b468f1166a617738859cc53d</digest></import><import>Filename<digest>3817bec1dad20c6f594d3a85b13020b8</digest></import><import>Format<digest>61d4350242b30078d3ad96c904c9f7a1</digest></import><import>Gc<digest>b6fd17066fdc1a10189b41093e32d95d</digest></import><import>Genlex<digest>b273667d018eaee28be8ef8663aada02</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Lazy<digest>7dba0bf02f60e5ff44e9e4057263f28d</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>List<digest>8988208489274193e4e3f69dc6ec2f75</digest></import><import>ListLabels<digest>f9c893b10648fae8e31ad7bfcd64248f</digest></import><import>Map<digest>770e6123e5460eeb42d3050f13c5ad53</digest></import><import>Marshal<digest>6a7be818a4d43f06397faef2c6f9d35b</digest></import><import>MoreLabels<digest>de38ed0a31c05b2d5f114679e33d4cad</digest></import><import>Nativeint<digest>d9e04753374f7110b66feda40414e5e3</digest></import><import>OUnit<digest>061c2b7c3576f155359af098da2b6cc4</digest></import><import>OUnit2<digest>c63c5d4e5d21b5a6e1c006ea3f6a9f40</digest></import><import>OUnitConf<digest>e9d7ac436b7c92024bd75e3ee9f66c27</digest></import><import>OUnitLogger<digest>2829f5e4133023ee1e1988da414aca56</digest></import><import>OUnitPropList<digest>00368900f7cfb75540524d6799d0501a</digest></import><import>OUnitShared<digest>272141ba126236b9846a49bb85586d03</digest></import><import>OUnitTest<digest>b2691574cfa63f167bc6f6ecaaf4805b</digest></import><import>OUnitUtils<digest>5471ffa587444f794375a4caab4e85fd</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Oo<digest>0977563fa9c23f2df2952b302bdba835</digest></import><import>Pa_bench_lib<digest>49e35efd8e698dfeaeed8204f5445f77</digest></import><import>Pa_ounit_lib<digest>c6212c5c68dc085c7c3df6d5dbfc4532</digest></import><import>Pa_test_lib<digest>9869606bf4a7705fc5a9fcc2bb324335</digest></import><import>Parsing<digest>4f8cd2d8537563c7ea7ee2e5dc94e427</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Printexc<digest>fb616c60404add6295347001c01bfcaa</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Queue<digest>06a89c77a23c672d34cb97e6dfc5f30d</digest></import><import>Random<digest>6d410ecc00aac669668fa399dbd6fca2</digest></import><import>Scanf<digest>31f1631ff7e3da78eabf4b08e91d2861</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>Sexplib<digest>edfea10cfcfd644a920e72e67cb0bbdd</digest></import><import>Sort<digest>7f209dd54826e792b36c64d0a799f76b</digest></import><import>Stack<digest>3397768ddbaaa5d9fe72a4c82cdc6eb9</digest></import><import>StdLabels<digest>bde0996731d345de202224fb701f3910</digest></import><import>Stream<digest>55948988e71c3ee1749feb21ccec9fc9</digest></import><import>String<digest>9cb286f2c4569fd32c379b1a05c7b590</digest></import><import>StringLabels<digest>d53c23a5c85990103dbeef11dd5cf4f1</digest></import><import>Sys<digest>0ce699458ce4430954d7e6a78874647c</digest></import><import>Typerep_lib<digest>e6a610cd9119c4b89b2ecff18190c6e7</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><import>Weak<digest>441c40816fe88175926465199a665458</digest></import><source><file>lib/nano_mutex.mli</file><dir>/home/dsheets/.opam/doc/build/core.112.06.02/_build</dir><digest>968d68d55ee1194f173d04f8ae932024</digest></source><doc>A nano-mutex is a lightweight mutex that can be used only within a single OCaml
runtime.<newline/><title level="1">Performance</title>
===============
Nano-mutexes are intended to be significantly cheaper than OS-level mutexes. Creating
a nano-mutex allocates a single OCaml record. Locking and unlocking an uncontested
nano-mutex take a handful of instructions. Only if a nano-mutex is contested will it
fall back to using an OS-level mutex. If a nano-mutex becomes uncontested again, it
will switch back to using an OCaml-only lock.<newline/>Nano-mutexes can be faster than using OS-level mutexes because OCaml uses a global
lock on the runtime, and requires all running OCaml code to hold the lock. The OCaml
compiler only allows thread switches at certain points, and we can use that fact to get
the atomic test-and-set used in the core of our implementaion without needing any
primitive locking, essentially because we're protected by the OCaml global lock.<newline/>Here are some benchmarks comparing various mutexes available in OCaml:<newline/><verbatim>      |-------------------------------------------------------------|
      |                       Name | Run time | S. dev. | Allocated |
      |----------------------------+----------+---------+-----------+
      |          Caml.Mutex create |   247 ns |    0 ns |         3 |
      |     Caml.Mutex lock/unlock |    49 ns |    0 ns |         0 |
      |          Core.Mutex create |   698 ns |    0 ns |         3 |
      |     Core.Mutex lock/unlock |    49 ns |    0 ns |         0 |
      |          Nano_mutex create |    10 ns |    0 ns |         4 |
      |     Nano_mutex lock/unlock |    28 ns |    0 ns |         0 |
      |-------------------------------------------------------------|</verbatim><newline/>The benchmark code is in core/extended/lib_test/bench_nano_mutex.ml.<newline/><title level="1">Error handling</title>
==================
For any mutex, there are design choices as to how to behave in certain situations:<newline/><list><item>recursive locking (when a thread locks a mutex it already has)</item><item>unlocking an unlocked mutex</item><item>unlocking a mutex held by another thread</item></list>Here is a table comparing how the various mutexes behave:<newline/><verbatim>      |--------------------+------------+------------+------------+
      |                    | Caml.Mutex | Core.Mutex | Nano_mutex |
      |--------------------+------------+------------+------------+
      | recursive lock     | undefined  | error      | error      |
      | unlocking unlocked | undefined  | error      | error      |
      | t1:lock  t2:unlock | undefined  | error      | error      |
      |--------------------+------------+------------+------------+</verbatim></doc><type><type><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>t</type></type><value><value><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>invariant</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>t</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>create</value><doc><code>create ()</code> returns a new, unlocked mutex.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>t</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>equal</value><doc><code>equal</code> is <code>phys_equal</code></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>t</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>t</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>current_thread_has_lock</value><doc><code>current_thread_has_lock t</code> returns <code>true</code> iff the current thread has <code>t</code> locked.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>t</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>lock</value><doc><code>lock t</code> locks the mutex <code>t</code>, blocking until it can be locked. <code>lock</code> immediately
returns <code>Error</code> if the current thread already holds <code>t</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>t</type></identifier></resolved></path><path><dot><dot><dot><root>Core_kernel</root>Std</dot>Or_error</dot>t</dot><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>lock_exn</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>t</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>try_lock</value><doc><code>try_lock t</code> locks <code>t</code> if it can immediately do so. The result indicates whether
<code>try_lock</code> succeeded in acquiring the lock. <code>try_lock</code> returns <code>Error</code> if the current
thread already holds <code>t</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>t</type></identifier></resolved></path><path><dot><dot><dot><root>Core_kernel</root>Std</dot>Or_error</dot>t</dot><poly_variant><fixed/><constructor>Acquired<constant/></constructor><constructor>Not_acquired<constant/></constructor></poly_variant></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>try_lock_exn</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>t</type></identifier></resolved></path><poly_variant><fixed/><constructor>Acquired<constant/></constructor><constructor>Not_acquired<constant/></constructor></poly_variant></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>unlock</value><doc><code>unlock t</code> unlocks <code>t</code>, if the current thread holds it. <code>unlock</code> returns <code>Error</code> if
the lock is not held by the calling thread.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>t</type></identifier></resolved></path><path><dot><dot><dot><root>Core_kernel</root>Std</dot>Or_error</dot>t</dot><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>unlock_exn</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>t</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>critical_section</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>t</type></identifier></resolved></path><arrow><label>f</label><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><var>a</var></arrow><var>a</var></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>sexp_of_t</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nano_mutex" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/nano_mutex.cmti" digest="77668a739d6c15e57bab27c0a706c26a"/></xml></base>Nano_mutex</root>t</type></identifier></resolved></path><path><dot><dot><root>Sexplib</root>Sexp</dot>t</dot></path></arrow></value></unit>