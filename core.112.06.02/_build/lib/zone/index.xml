<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></html></base>Zone</root><digest>9880f18d90b9cc99bbaa0851a6e92018</digest><import>Arg<digest>1a93c52516966fe6a58564a4c4d9e4fa</digest></import><import>Array<digest>ae800d8cf9903f1d36856950940430e6</digest></import><import>ArrayLabels<digest>58a6628d1722d835ca71a7e76108549e</digest></import><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Bin_prot<digest>1eba8a056671767c0ff0de95b9d79cf0</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>BytesLabels<digest>f6f25f5328b09c590f56c7e37005c501</digest></import><import>Callback<digest>deb9226b3de6bdba985bad268a5b7c51</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>CamlinternalOO<digest>3d0b4eb4525ba4274c8885d7124f7bbc</digest></import><import>Char<digest>60fd98ba6ff303baf9287e7bfb886f12</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Core_kernel<digest>03f47d5c0d0fe0934524d07b846b4d0a</digest></import><import>Digest<digest>eab54f58b34b8a6fdc763db6966614a1</digest></import><import>Fieldslib<digest>d78f9550b468f1166a617738859cc53d</digest></import><import>Filename<digest>3817bec1dad20c6f594d3a85b13020b8</digest></import><import>Format<digest>61d4350242b30078d3ad96c904c9f7a1</digest></import><import>Gc<digest>b6fd17066fdc1a10189b41093e32d95d</digest></import><import>Genlex<digest>b273667d018eaee28be8ef8663aada02</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Lazy<digest>7dba0bf02f60e5ff44e9e4057263f28d</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>List<digest>8988208489274193e4e3f69dc6ec2f75</digest></import><import>ListLabels<digest>f9c893b10648fae8e31ad7bfcd64248f</digest></import><import>Map<digest>770e6123e5460eeb42d3050f13c5ad53</digest></import><import>Marshal<digest>6a7be818a4d43f06397faef2c6f9d35b</digest></import><import>MoreLabels<digest>de38ed0a31c05b2d5f114679e33d4cad</digest></import><import>Nativeint<digest>d9e04753374f7110b66feda40414e5e3</digest></import><import>OUnit<digest>061c2b7c3576f155359af098da2b6cc4</digest></import><import>OUnit2<digest>c63c5d4e5d21b5a6e1c006ea3f6a9f40</digest></import><import>OUnitConf<digest>e9d7ac436b7c92024bd75e3ee9f66c27</digest></import><import>OUnitLogger<digest>2829f5e4133023ee1e1988da414aca56</digest></import><import>OUnitPropList<digest>00368900f7cfb75540524d6799d0501a</digest></import><import>OUnitShared<digest>272141ba126236b9846a49bb85586d03</digest></import><import>OUnitTest<digest>b2691574cfa63f167bc6f6ecaaf4805b</digest></import><import>OUnitUtils<digest>5471ffa587444f794375a4caab4e85fd</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Oo<digest>0977563fa9c23f2df2952b302bdba835</digest></import><import>Pa_bench_lib<digest>49e35efd8e698dfeaeed8204f5445f77</digest></import><import>Pa_ounit_lib<digest>c6212c5c68dc085c7c3df6d5dbfc4532</digest></import><import>Pa_test_lib<digest>9869606bf4a7705fc5a9fcc2bb324335</digest></import><import>Parsing<digest>4f8cd2d8537563c7ea7ee2e5dc94e427</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Printexc<digest>fb616c60404add6295347001c01bfcaa</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Queue<digest>06a89c77a23c672d34cb97e6dfc5f30d</digest></import><import>Random<digest>6d410ecc00aac669668fa399dbd6fca2</digest></import><import>Scanf<digest>31f1631ff7e3da78eabf4b08e91d2861</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>Sexplib<digest>edfea10cfcfd644a920e72e67cb0bbdd</digest></import><import>Sort<digest>7f209dd54826e792b36c64d0a799f76b</digest></import><import>Span<digest>fd812834cefbb5618e8eac24c1ed24c4</digest></import><import>Stack<digest>3397768ddbaaa5d9fe72a4c82cdc6eb9</digest></import><import>StdLabels<digest>bde0996731d345de202224fb701f3910</digest></import><import>Stream<digest>55948988e71c3ee1749feb21ccec9fc9</digest></import><import>String<digest>9cb286f2c4569fd32c379b1a05c7b590</digest></import><import>StringLabels<digest>d53c23a5c85990103dbeef11dd5cf4f1</digest></import><import>Sys<digest>0ce699458ce4430954d7e6a78874647c</digest></import><import>Time_internal<digest>60a099a263690734b488933de6e368d9</digest></import><import>Typerep_lib<digest>e6a610cd9119c4b89b2ecff18190c6e7</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><import>Weak<digest>441c40816fe88175926465199a665458</digest></import><source><file>lib/zone.mli</file><dir>/home/dsheets/.opam/doc/build/core.112.06.02/_build</dir><digest>844363e5eb67fc738834afadb99887d1</digest></source><doc>Time-zone handling.</doc><comment><title level="1">User-friendly interface</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type><doc>The type of a time-zone.<newline/>bin_io and sexp representations of Zone.t are the name of the zone, and not the full
data that is read from disk when Zone.find is called. The full Zone.t is
reconstructed on the receiving/reading side by reloading the zone file from disk. Any
zone name that is accepted by <code>find</code> is acceptable in the bin_io and sexp
representations.</doc></type><include><with><dot><dot><dot><root>Core_kernel</root>Std</dot>Identifiable</dot>S</dot><type_subst><dot><resolved><root/></resolved>t</dot><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></type_subst></with></include><value><value><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>find</value><doc><code>find name</code> looks up a <code>t</code> by its name and returns it.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>find_office</value><doc><code>find_office office</code> a more type-safe interface for pulling timezones related to
existing Jane Street offices/locations.</doc><arrow><poly_variant><fixed/><constructor>chi<constant/></constructor><constructor>hkg<constant/></constructor><constructor>ldn<constant/></constructor><constructor>nyc<constant/></constructor></poly_variant><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>find_exn</value><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>machine_zone</value><doc>Deprecated: this function will shortly be replaced by <code>local</code>.<newline/><code>machine_zone ?refresh ()</code> returns the machines zone (t). It does this by first
looking for a value in the environment variable &quot;TZ&quot;, and loading the named zone if it
is set. If &quot;TZ&quot; is not set it reads /etc/localtime directly.<newline/>The first call to machine_zone is cached, so there is no need to cache it locally.
The cache can be bypassed and refreshed by setting ~refresh to true.<newline/>Note that this function can throw an exception if the TZ time variable is
misconfigured or if the appropriate timezone files can't be found because of the way
the box is configured. We don't put an _exn on this function because that
misconfiguration is quite rare.</doc><arrow><optional>refresh</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>local</value><doc><code>local</code> is the result of <code>machine_zone ()</code>, taken the first time it is demanded. It
may be difficult to know exactly when that happens, so <code>local</code> should be avoided in
applications that expect TZ or /etc/localtime to change during program operation.<newline/>Arguably, changing the timezone of a running program is a problematic operation
anyway -- most people write code assuming the clock doesn't suddenly jump back several
hours without warning.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></path></value><value><value><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>likely_machine_zones</value><doc><code>likely_machine_zones</code> is a list of zone names that will be searched first when trying
to determine the machine zone of a box. Setting this to a likely set of zones for
your application will speed the very first call to machine_zone</doc><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>ref</type></resolved><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>of_utc_offset</value><doc><code>of_utc_offset offset</code> returns a timezone with a static UTC offset (given in
hours).</doc><arrow><label>hours</label><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>default_utc_offset_deprecated</value><doc><code>default_utc_offset</code> returns the UTC offset of default regime for timezone <code>t</code> in
seconds. Note: the default utc offset may not reflect the current utc offset.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>utc</value><doc><code>utc</code> the UTC time zone. Included for convenience</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></path></value><value><value><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>abbreviation</value><doc><code>abbreviation zone t</code> returns t abbreviation name such as EDT, EST, JST of given
<code>zone</code> at the time <code>t</code>. This string conversion is one-way only, and cannot reliably
be turned back into a t</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></path><arrow><path><resolved><identifier><type>float</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>name</value><doc><code>name zone</code> returns the name of the time zone</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>init</value><doc><code>init ()</code> pre-load all available time zones from disk, this function has no effect if
it is called multiple times. Time zones will otherwise be loaded at need from the
disk on the first call to find/find_exn.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>digest</value><doc><code>digest t</code> return the MD5 digest of the file the t was created from (if any)</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>initialized_zones</value><doc><code>initialized_zones ()</code> returns a sorted list of time zone names that have been loaded
from disk thus far.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></path></tuple></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>shift_epoch_time</value><doc><code>shift_epoch_time zone [`Local | `UTC] time</code> Takes an epoch (aka &quot;unix&quot;) time given
either in local or in UTC (as indicated in the arguments) and shifts it according to
the local time regime in force in zone. That is, given a Local epoch time it will
return the corresponding UTC timestamp and vice versa. This function is low level,
and is not intended to be called by most client code. Use the high level functions
provided in Time instead.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></path><arrow><poly_variant><fixed/><constructor>Local<constant/></constructor><constructor>UTC<constant/></constructor></poly_variant><arrow><path><resolved><identifier><type>float</type></identifier></resolved></path><path><resolved><identifier><type>float</type></identifier></resolved></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>next_clock_shift</value><doc>Takes a <code>Time.t</code> and returns the next <code>Time.t</code>, if any, that the time zone UTC offset
changes, and by how much it does so.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></path><arrow><label>after</label><path><dot><dot><root>Time_internal</root>T</dot>t</dot></path><path><resolved><identifier><type>option</type></identifier></resolved><tuple><path><dot><dot><root>Time_internal</root>T</dot>t</dot></path><path><resolved><type><identifier><root><base><xml src="../../../../core.112.06.02/_build/lib/span/index.xml"><cmti name="Span" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/span.cmti" digest="fd812834cefbb5618e8eac24c1ed24c4"/></xml></base>Span</root></identifier>t</type></resolved></path></tuple></path></arrow></arrow></value><exception><exception><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Unknown_zone</exception><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Invalid_file_format</exception><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></exception><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module><type><signature><module><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module><type><signature><include><with><signature><type><type><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>__pa_nonrec_0</type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></path></type><type><type><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>t</type><path><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>__pa_nonrec_0</type></identifier></resolved></path></type></signature><type_subst><resolved><type><root/>__pa_nonrec_0</type></resolved><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>t</type></identifier></resolved></type_subst></with></include><value><value><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>t_of_sexp</value><arrow><path><dot><dot><root>Sexplib</root>Sexp</dot>t</dot></path><path><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>t</type></identifier></resolved></path></arrow></value><value><value><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>sexp_of_t</value><arrow><path><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>t</type></identifier></resolved></path><path><dot><dot><root>Sexplib</root>Sexp</dot>t</dot></path></arrow></value><value><value><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>compare</value><arrow><path><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>t</type></identifier></resolved></path><arrow><path><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>t</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></value><value><value><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>bin_t</value><path><dot><dot><dot><dot><root>Core_kernel</root>Std</dot>Bin_prot</dot>Type_class</dot>t</dot><path><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>t</type></identifier></resolved></path></path></value><value><value><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>bin_read_t</value><path><dot><dot><dot><dot><root>Core_kernel</root>Std</dot>Bin_prot</dot>Read</dot>reader</dot><path><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>t</type></identifier></resolved></path></path></value><value><value><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>__bin_read_t__</value><path><dot><dot><dot><dot><root>Core_kernel</root>Std</dot>Bin_prot</dot>Read</dot>reader</dot><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>t</type></identifier></resolved></path></arrow></path></value><value><value><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>bin_reader_t</value><path><dot><dot><dot><dot><root>Core_kernel</root>Std</dot>Bin_prot</dot>Type_class</dot>reader</dot><path><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>t</type></identifier></resolved></path></path></value><value><value><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>bin_size_t</value><path><dot><dot><dot><dot><root>Core_kernel</root>Std</dot>Bin_prot</dot>Size</dot>sizer</dot><path><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>t</type></identifier></resolved></path></path></value><value><value><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>bin_write_t</value><path><dot><dot><dot><dot><root>Core_kernel</root>Std</dot>Bin_prot</dot>Write</dot>writer</dot><path><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>t</type></identifier></resolved></path></path></value><value><value><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>bin_writer_t</value><path><dot><dot><dot><dot><root>Core_kernel</root>Std</dot>Bin_prot</dot>Type_class</dot>writer</dot><path><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Zone" src="/home/dsheets/.opam/doc/build/core.112.06.02/_build/lib/zone.cmti" digest="9880f18d90b9cc99bbaa0851a6e92018"/></xml></base>Zone</root>Stable</module>V1</module>t</type></identifier></resolved></path></path></value></signature></type></module></signature></type></module><comment><title level="1">Notes on time</title><newline/>This library replicates and extends the functionality of the standard Unix time handling
functions (currently exposed in the Unix module, and indirectly through the Time
module).<newline/>Things you should know before delving into the mess of time...<newline/><title level="2">Some general resources (summarized information also appears below)</title><newline/><verbatim>    general overview   - http://www.twinsun.com/tz/tz-link.htm
    zone abbreviations - http://blogs.msdn.com/oldnewthing/archive/2008/03/07/8080060.aspx
    leap seconds       - http://en.wikipedia.org/wiki/Leap_second
    epoch time         - http://en.wikipedia.org/wiki/Unix_time
    UTC/GMT time       - http://www.apparent-wind.com/gmt-explained.html
    TAI time           - http://en.wikipedia.org/wiki/International_Atomic_Time
    Almost every possible time measurement -
      http://www.ucolick.org/~sla/leapsecs/timescales.html</verbatim><newline/><title level="2">Standards for measuring time</title><newline/><list><item>Epoch time/Unix time/Posix time: Defined as the number of seconds that have passed
since midnight, January 1st, 1970 GMT. However, under epoch time, a day is always
86,400 seconds long, and a minute never contains more than 60 total seconds. In other
words, epoch time does not take leap seconds into account properly. What a POSIX
compliant system does during a leap second depends on the way in which its clock is
managed. It either ignores it, replays the second, or causes a second to last longer
than a second (retards the second). The important thing to remember is that however
the transition is managed, all days start on an evenly divisible multiple of 86,400.</item><item>GMT/Greenwich Mean Time/Greenwich Civil Time: The time based on the movement of the
sun relative to the meridian through the Old Greenwich Observatory (0 degrees). The
movement of the sun in this case is a &quot;mean&quot; movement of the sun to adjust for slight
eccentricities in the rotation of the earth, as well as for the effect of the tilt of
the earth on the visible speed of the sun across the sky at different times of the
year. GMT is often used synonymously with the term UTC (see below), but may also be
used to refer to the time system described here, which differs from UTC (as of 2009)
by ~1 second.</item><item>Standard Time: The time based on the adjusted (as in GMT) movement of the sun over a
point on the earth that is not Greenwich. Colloquially, the time in a time zone
without accounting for any form of daylight savings time.</item><item>Wall Clock Time: The time as it appears on a clock on the wall in a given time zone.
Essentially this is standard time with DST adjustments.</item><item>TAI: International atomic time. The time based on a weighted average of the time kept
by roughly 300 atomic clocks worldwide. TAI is written using the same format as
normal solar (also called civil) times, but is not based on, or adjusted for the
apparent solar time. Thus, as of 2009 TAI appears to be ahead of most other time
systems by ~34 seconds when written out in date/time form (2004-09-17T00:00:32 TAI is
2004-09-17T00:00:00 UTC)</item><item>UTC/Universal Coordinated Time: Often taken as just another term for GMT, UTC is
actually TAI adjusted with leap seconds to keep it in line with apparent solar time.
Each UTC day is not an exact number of seconds long (unlike TAI or epoch time), and
every second is exactly one real second long (unlike GMT, which is based entirely on
the apparent motion of the sun, meaning that seconds under GMT slowly get longer as
the earth's rotation slows down). Leap seconds are determined by the rotation of
the earth, which is carefully measured by the International Earth Rotation Service
in Paris, France using a combination of satellite and lunar laser ranging, very
long baseline interferometry, and Navstar Global Positioning System (GPS) stations.
This isn't important for using UTC, but is very cool. UTC is not well defined before
about 1960.</item><item>Windows File Time: The number of 100-nanosecond intervals that have elapsed since
12:00 A.M. January 1, 1601, UTC. This is great because UTC has no meaning in 1601
(being based on atomic timekeeping technologies that didn't exist then), and also
because 1601 predates the development of even reasonably accurate clocks of any sort.
The reasoning behind the Windows epoch time choice is that &quot;The Gregorian calendar
operates on a 400-year cycle, and 1601 is the first year of the cycle that was
active at the time Windows NT was being designed. In other words, it was chosen to
make the math come out nicely.&quot;
(http://blogs.msdn.com/oldnewthing/archive/2009/03/06/9461176.aspx)</item><item>VBScript (this is my favorite):
http://blogs.msdn.com/ericlippert/archive/2003/09/16/eric-s-complete-guide-to-vt-date.aspx</item></list>All of these systems start to exhibit problems as you go further back in time, partly
because truly accurate timekeeping didn't make an appearance until roughly 1958, and
partly because different parts of the world didn't actually have well defined time zones
for a long time. If you go back far enough, you run into the switch between the Julian
(old) and the Gregorian calendar, which happened at different times in history in
different places in the world.<newline/><title level="2">How does a system determine what time zone it is in?</title><newline/><enum><item>Check to see if the TZ environment variable is set. If it is, it can be set to one
of three forms, two of which are rarely, if ever used see:</item></enum>http://www.opengroup.org/onlinepubs/000095399/basedefs/xbd_chap08.html<newline/>for more information on the obscure forms. The common form represents a relative path
from the base /usr/share/zoneinfo/posix, and is generally in the form of a continent
or country name paired with a city name (Europe/London, America/New_York). This is
used to load the specified file from disk, which contains a time zone database in zic
format (man tzfile).<newline/><enum><item>If TZ is not set, the system will try to read the file located at /etc/localtime,
which must be a zic timezone database (and which is often just a symlink into
/usr/share/zoneinfo/posix).</item><item>If /etc/localtime cannot be found, then the system is assumed to be in GMT.</item></enum>It's worth noting that under this system there is no place on the system to go to get
the name of the file you are using (/etc/localtime may not be a link, and may just be a
copy, or its own database not represented in /usr/share/zoneinfo). Additionally, the
names of the files in the system zoneinfo database follow an internal standard, and
there is no established standard for naming timezones. So even if you were using one of
these files, and you did know its name, you cannot assume that that name matches any
timezone specified by any other system or description.<newline/>One common misconception about time zones is that the standard time zone abbreviations
can be used. For instance, EST surely refers to Eastern Standard Time. This is
unfortunately not true - CST can refer to China Central Time, Central Standard Time, or
Cuba Summer Time for instance - and time zone libraries that appear to correctly parse
times that use time zone abbreviations do so by using a heuristic that usually assumes
you mean a time in the US or Europe, in that order. Time zones also sometimes use two
different abbreviations depending on whether the time in question is in standard time,
or daylight savings time. These abbreviations are kept in the timezone databases, which
is how programs like date manage to output meaningful abbreviations, it is only reading
in times with abbreviations that is poorly specified.<newline/>This library contains a function that attempts to make an accurate determination of the
machine timezone by testing the md5 sum of the currently referenced timezone file
against all of the possible candidates in the system database. It additionally makes
some adjustments to return the more common timezone names since some files in the
database are duplicated under several names. It returns an option because of the
problems mentioned above.<newline/><title level="2">The problems with string time conversions</title><newline/>There are two cases where string time conversions are problematic, both related to
daylight savings time.<newline/>In the case where time jumps forward one hour, there are possible representations of
times that never happened 2006-04-02T02:30:00 in the eastern U.S. never happened for
instance, because the clock jumped forward one hour directly from 2 to 3. Unix time
zone libraries asked to convert one of these times will generally produce the epoch time
that represents the time 1/2 hour after 2 am, which when converted back to a string
representation will be T03:30:00.<newline/>The second case is when the clocks are set back one hour, which causes one hour of time
to happen twice. Converting a string in this range without further specification into
an epoch time is indeterminate since it could be referring to either of two times. Unix
libraries handle this by either allowing you to pass in a dst flag to the conversion
function to specify which time you mean, or by using a heuristic to guess which time you
meant.<newline/>The existence of both cases make a strong argument for serializing all times in UTC,
which doesn't suffer from these issues.</comment></unit>