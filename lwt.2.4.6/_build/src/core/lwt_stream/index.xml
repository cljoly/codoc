<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></html></base>Lwt_stream</root><digest>cb31901fda8c8b13d0212288d5f80b59</digest><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Lwt<digest>3ec18d03611d8f4576b577b743482a48</digest></import><import>Lwt_sequence<digest>ce3592bc901ce0c829f4f282ef54d80a</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><source><file>src/core/lwt_stream.mli</file><dir>/home/dsheets/.opam/doc/build/lwt.2.4.6/_build</dir><digest>fd299632d493789011f61829951f3d3c</digest></source><doc>Data streams</doc><type><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type><doc>Type of a stream holding values of type <code>'a</code></doc><param>a</param></type><comment>Naming convention: in this module all function taking a function
which is applied to all element of the streams are suffixed by:<newline/><list><item><code>_s</code> when the function returns a thread and calls are serialised</item><item><code>_p</code> when the function returns a thread and calls are parallelised</item></list></comment><comment><title level="2">Construction</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>from</value><doc><code>from f</code> creates an stream from the given input function. <code>f</code> is
called each time more input is needed, and the stream ends when
<code>f</code> returns <code>None</code>.</doc><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path></path></arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>from_direct</value><doc><code>from_direct f</code> does the same as <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>from</value></identifier></resolved></element></reference> but with a function
that does not return a thread. It is better than wrapping <code>f</code>
into a function which return a thread.</doc><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path></arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path></arrow></value><exception><exception><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>Closed</exception><doc>Exception raised by the push function of a push-stream when
pushing an element after the end of stream (<code>= None</code>) have been
pushed.</doc></exception><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>create</value><doc><code>create ()</code> returns a new stream and a push function.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><tuple><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></tuple></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>create_with_reference</value><doc><code>create_with_reference ()</code> returns a new stream and a push
function. The last function allows to set a reference to an
external source. This prevent the external source from being
garbage collected.<newline/>For example, to convert a reactive event to a stream:<newline/><precode>        let stream, push, set_ref = Lwt_stream.create_with_reference () in
        set_ref (map_event push event)</precode></doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><tuple><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><var>b</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></tuple></arrow></value><exception><exception><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>Full</exception><doc>Exception raised by the push function of a bounded push-stream
when the stream queue is full and a thread is already waiting to
push an element.</doc></exception><class_type><class_type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>bounded_push</class_type><doc>Type of sources for bounded push-streams.</doc><param>a</param><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>bounded_push</class_type>size</method><doc>Size of the stream.</doc><path><resolved><identifier><type>int</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>bounded_push</class_type>resize</method><doc>Change the size of the stream queue. Note that the new size
can smaller than the current stream queue size.<newline/>It raises <code>Invalid_argument</code> if <code>size &lt; 0</code>.</doc><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>bounded_push</class_type>push</method><doc>Pushes a new element to the stream. If the stream is full then
it will block until one element is consumed. If another thread
is already blocked on <reference><element><resolved><identifier><method><class_type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>bounded_push</class_type>push</method></identifier></resolved></element></reference>, it raises <reference><element><resolved><identifier><exception><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>Full</exception></identifier></resolved></element></reference>.</doc><arrow><var>a</var><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>bounded_push</class_type>close</method><doc>Closes the stream. Any thread currently blocked on <reference><element><resolved><identifier><method><class_type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>bounded_push</class_type>push</method></identifier></resolved></element></reference>
will fail with <reference><element><resolved><identifier><exception><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>Closed</exception></identifier></resolved></element></reference>.</doc><path><resolved><identifier><type>unit</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>bounded_push</class_type>count</method><doc>Number of elements in the stream queue.</doc><path><resolved><identifier><type>int</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>bounded_push</class_type>blocked</method><doc>Is a thread is blocked on <reference><element><resolved><identifier><method><class_type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>bounded_push</class_type>push</method></identifier></resolved></element></reference> ?</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>bounded_push</class_type>closed</method><doc>Is the stream closed ?</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>bounded_push</class_type>set_reference</method><doc>Set the reference to an external source.</doc><poly><name>a</name><arrow><var>a</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></poly></method></signature></class_type><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>create_bounded</value><doc><code>create_bounded size</code> returns a new stream and a bounded push
source. The stream can hold a maximum of <code>size</code> elements. When
this limit is reached, pushing a new element will block until
one is consumed.<newline/>Note that you cannot clone or parse (with <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>parse</value></identifier></resolved></element></reference>) a bounded
stream. These functions will raise <code>Invalid_argument</code> if you try
to do so.<newline/>It raises <code>Invalid_argument</code> if <code>size &lt; 0</code>.</doc><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><tuple><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>bounded_push</class_type></identifier></resolved><var>a</var></path></tuple></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>of_list</value><doc><code>of_list l</code> creates a stream returning all elements of <code>l</code></doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>of_array</value><doc><code>of_array a</code> creates a stream returning all elements of <code>a</code></doc><arrow><path><resolved><identifier><type>array</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>of_string</value><doc><code>of_string str</code> creates a stream returning all characters of
<code>str</code></doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><path><resolved><identifier><type>char</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>clone</value><doc><code>clone st</code> clone the given stream. Operations on each stream
will not affect the other.<newline/>For example:<newline/><precode>        # let st1 = Lwt_stream.of_list [1; 2; 3];;
        val st1 : int Lwt_stream.t = &lt;abstr&gt;
        # let st2 = Lwt_stream.clone st1;;
        val st2 : int Lwt_stream.t = &lt;abstr&gt;
        # lwt x = Lwt_stream.next st1;;
        val x : int = 1
        # lwt y = Lwt_stream.next st2;;
        val y : int = 1</precode><newline/>It raises <code>Invalid_argument</code> if <code>st</code> is a bounded
push-stream.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path></arrow></value><comment><title level="2">Destruction</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>to_list</value><doc>Returns the list of elements of the given stream</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>to_string</value><doc>Returns the word composed of all characters of the given
stream</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><path><resolved><identifier><type>char</type></identifier></resolved></path></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></value><comment><title level="2">Data retreival</title></comment><exception><exception><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>Empty</exception><doc>Exception raised when trying to retreive data from an empty
stream.</doc></exception><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>peek</value><doc><code>peek st</code> returns the first element of the stream, if any,
without removing it.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>npeek</value><doc><code>npeek n st</code> returns at most the first <code>n</code> elements of <code>st</code>,
without removing them.</doc><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>get</value><doc><code>get st</code> remove and returns the first element of the stream, if
any.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>nget</value><doc><code>nget n st</code> remove and returns at most the first <code>n</code> elements of
<code>st</code>.</doc><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>get_while</value><arrow><arrow><var>a</var><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>get_while_s</value><doc><code>get_while f st</code> returns the longest prefix of <code>st</code> where all
elements satisfy <code>f</code>.</doc><arrow><arrow><var>a</var><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>next</value><doc><code>next st</code> remove and returns the next element of the stream, of
fail with <reference><element><resolved><identifier><exception><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>Empty</exception></identifier></resolved></element></reference> if the stream is empty.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>last_new</value><doc><code>last_new st</code> returns the last element that can be obtained
without sleepping, or wait for one if no one is already
available.<newline/>If fails with <reference><element><resolved><identifier><exception><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>Empty</exception></identifier></resolved></element></reference> if the stream has no more elements</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>junk</value><doc><code>junk st</code> remove the first element of <code>st</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>njunk</value><doc><code>njunk n st</code> removes at most the first <code>n</code> elements of the
stream.</doc><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>junk_while</value><arrow><arrow><var>a</var><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>junk_while_s</value><doc><code>junk_while f st</code> removes all elements at the beginning of the
streams which satisfy <code>f</code>.</doc><arrow><arrow><var>a</var><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>junk_old</value><doc><code>junk_old st</code> removes all elements that are ready to be read
without yeilding from <code>st</code>.<newline/>For example the <code>read_password</code> function of <code>Lwt_read_line</code> use
that to junk key previously typed by the user.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>get_available</value><doc><code>get_available st</code> returns all available elements of <code>l</code> without
blocking</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>get_available_up_to</value><doc><code>get_available_up_to n st</code> returns up to <code>n</code> elements of <code>l</code>
without blocking</doc><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>is_empty</value><doc><code>is_empty st</code> returns wether the given stream is empty</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>on_terminate</value><doc><code>on_terminate st f</code> executes <code>f</code> when the end of the stream <code>st</code>
is reached. Note that the stream may still contains elements if
<reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>peek</value></identifier></resolved></element></reference> or similar was used.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><comment><title level="2">Stream transversal</title></comment><comment>Note: all the following functions are destructive.<newline/>For example:<newline/><precode>      # let st1 = Lwt_stream.of_list [1; 2; 3];;
      val st1 : int Lwt_stream.t = &lt;abstr&gt;
      # let st2 = Lwt_stream.map string_of_int st1;;
      val st2 : string Lwt_stream.t = &lt;abstr&gt;
      # lwt x = Lwt_stream.next st1;;
      val x : int = 1
      # lwt y = Lwt_stream.next st2;;
      val y : string = &quot;2&quot;</precode></comment><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>choose</value><doc><code>choose l</code> creates an stream from a list of streams. The
resulting stream will returns elements returned by any stream of
<code>l</code> in an unspecified order.</doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>map</value><arrow><arrow><var>a</var><var>b</var></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>map_s</value><doc><code>map f st</code> maps the value returned by <code>st</code> with <code>f</code></doc><arrow><arrow><var>a</var><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><var>b</var></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>filter</value><arrow><arrow><var>a</var><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>filter_s</value><doc><code>filter f st</code> keeps only value <code>x</code> such that <code>f x</code> is <code>true</code></doc><arrow><arrow><var>a</var><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>filter_map</value><arrow><arrow><var>a</var><path><resolved><identifier><type>option</type></identifier></resolved><var>b</var></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>filter_map_s</value><doc><code>filter_map f st</code> filter and map <code>st</code> at the same time</doc><arrow><arrow><var>a</var><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>option</type></identifier></resolved><var>b</var></path></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>map_list</value><arrow><arrow><var>a</var><path><resolved><identifier><type>list</type></identifier></resolved><var>b</var></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>map_list_s</value><doc><code>map_list f st</code> applies <code>f</code> on each element of <code>st</code> and flattens
the lists returned</doc><arrow><arrow><var>a</var><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>b</var></path></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>fold</value><arrow><arrow><var>a</var><arrow><var>b</var><var>b</var></arrow></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><arrow><var>b</var><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><var>b</var></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>fold_s</value><doc><code>fold f s x</code> fold_like function for streams.</doc><arrow><arrow><var>a</var><arrow><var>b</var><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><var>b</var></path></arrow></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><arrow><var>b</var><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><var>b</var></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>iter</value><arrow><arrow><var>a</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>iter_p</value><arrow><arrow><var>a</var><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>iter_s</value><doc><code>iter f s</code> iterates over all elements of the stream</doc><arrow><arrow><var>a</var><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>find</value><arrow><arrow><var>a</var><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>find_s</value><doc><code>find f s</code> find an element in a stream.</doc><arrow><arrow><var>a</var><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>find_map</value><arrow><arrow><var>a</var><path><resolved><identifier><type>option</type></identifier></resolved><var>b</var></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>option</type></identifier></resolved><var>b</var></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>find_map_s</value><doc><code>find f s</code> find and map at the same time.</doc><arrow><arrow><var>a</var><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>option</type></identifier></resolved><var>b</var></path></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><path><resolved><identifier><type>option</type></identifier></resolved><var>b</var></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>combine</value><doc><code>combine s1 s2</code> combine two streams. The stream will ends when
the first stream ends.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>b</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><tuple><var>a</var><var>b</var></tuple></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>append</value><doc><code>append s1 s2</code> returns a stream which returns all elements of
<code>s1</code>, then all elements of <code>s2</code></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>concat</value><doc><code>concat st</code> returns the concatenation of all streams of <code>st</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>flatten</value><doc><code>flatten st = map_list (fun l -&gt; l) st</code></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path></arrow></value><type><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>result</type><doc>A value or an error.</doc><param>a</param><variant><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>result</type>Value</constructor><arguments><var>a</var></arguments></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>result</type>Error</constructor><arguments><path><resolved><identifier><type>exn</type></identifier></resolved></path></arguments></constructor></variant></type><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>map_exn</value><doc><code>map_exn s</code> returns a stream that captures all exceptions raised
by the source of the stream (the function passed to <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>from</value></identifier></resolved></element></reference>).<newline/>Note that for push-streams (as returned by <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>create</value></identifier></resolved></element></reference>) all
elements of the mapped streams are values.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>result</type></identifier></resolved><var>a</var></path></path></arrow></value><comment><title level="2">Parsing</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>parse</value><doc><code>parse st f</code> parses <code>st</code> with <code>f</code>. If <code>f</code> raise an exception,
<code>st</code> is restored to its previous state.<newline/>It raises <code>Invalid_argument</code> if <code>st</code> is a bounded
push-stream.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><var>b</var></path></arrow><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><var>b</var></path></arrow></arrow></value><comment><title level="2">Misc</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>hexdump</value><doc><code>hexdump byte_stream</code> returns a stream which is the same as the
output of <code>hexdump -C</code>.<newline/>Basically, here is a simple implementation of <code>hexdump -C</code>:<newline/><precode>        let () = Lwt_main.run (Lwt_io.write_lines Lwt_io.stdout (Lwt_stream.hexdump (Lwt_io.read_lines Lwt_io.stdin)))</precode></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><path><resolved><identifier><type>char</type></identifier></resolved></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt_stream" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_stream.cmti" digest="cb31901fda8c8b13d0212288d5f80b59"/></xml></base>Lwt_stream</root>t</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></value></unit>