<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></html></base>Lwt</root><digest>3ec18d03611d8f4576b577b743482a48</digest><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Lwt_sequence<digest>ce3592bc901ce0c829f4f282ef54d80a</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><source><file>src/core/lwt.mli</file><dir>/home/dsheets/.opam/doc/build/lwt.2.4.6/_build</dir><digest>98518f98c1b6dc16cb35a4bb6ddc1164</digest></source><doc>Module <code>Lwt</code>: cooperative light-weight threads.</doc><comment>This module defines <emphasize>cooperative light-weight threads</emphasize> with
their primitives. A <emphasize>light-weight thread</emphasize> represent a
computation that may be not terminated, for example because it is
waiting for some event to happen.<newline/>Lwt threads are cooperative in the sense that switching to another
thread is awlays explicit (with <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wakeup</value></identifier></resolved></element></reference> or <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wakeup_exn</value></identifier></resolved></element></reference>). When a
thread is running, it executes as much as possible, and then
returns (a value or an error) or sleeps.<newline/>Note that inside a Lwt thread, exceptions must be raised with
<reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>fail</value></identifier></resolved></element></reference> instead of <code>raise</code>. Also the <code>try ... with ...</code>
construction will not catch Lwt errors. You must use <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>catch</value></identifier></resolved></element></reference>
instead. You can also use <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wrap</value></identifier></resolved></element></reference> for functions that may raise
normal exception.<newline/>Lwt also provides the syntax extension <reference><element><root>Pa_lwt</root></element></reference> to make code
using Lwt more readable.</comment><comment><title level="2">Definitions and basics</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type><doc>The type of threads returning a result of type <code>'a</code>.</doc><param>a<pos/></param></type><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>return</value><doc><code>return e</code> is a thread whose return value is the value of the
expression <code>e</code>.</doc><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>fail</value><doc><code>fail e</code> is a thread that fails with the exception <code>e</code>.</doc><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>bind</value><doc><code>bind t f</code> is a thread which first waits for the thread <code>t</code> to
terminate and then, if the thread succeeds, behaves as the
application of function <code>f</code> to the return value of <code>t</code>. If the
thread <code>t</code> fails, <code>bind t f</code> also fails, with the same
exception.<newline/>The expression <code>bind t (fun x -&gt; t')</code> can intuitively be read as
<code>let x = t in t'</code>, and if you use the <emphasize>lwt.syntax</emphasize> syntax
extension, you can write a bind operation like that: <code>lwt x = t in t'</code>.<newline/>Note that <code>bind</code> is also often used just for synchronization
purpose: <code>t'</code> will not execute before <code>t</code> is terminated.<newline/>The result of a thread can be bound several times.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><arrow><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>(&gt;&gt;=)</value><doc><code>t &gt;&gt;= f</code> is an alternative notation for <code>bind t f</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><arrow><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>(=&lt;&lt;)</value><doc><code>f =&lt;&lt; t</code> is <code>t &gt;&gt;= f</code></doc><arrow><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>map</value><doc><code>map f m</code> maps the result of a thread. This is the same as <code>bind
      m (fun x -&gt; return (f x))</code></doc><arrow><arrow><var>a</var><var>b</var></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>(&gt;|=)</value><doc><code>m &gt;|= f</code> is <code>map f m</code></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><arrow><arrow><var>a</var><var>b</var></arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>(=|&lt;)</value><doc><code>f =|&lt; m</code> is <code>map f m</code></doc><arrow><arrow><var>a</var><var>b</var></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></value><comment><title level="3">Pre-allocated threads</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>return_unit</value><doc><code>return_unit = return ()</code></doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>return_none</value><doc><code>return_none = return None</code></doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>return_nil</value><doc><code>return_nil = return []</code></doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>return_true</value><doc><code>return_true = return true</code></doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>return_false</value><doc><code>return_false = return false</code></doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></value><comment><title level="2">Thread storage</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>key</type><doc>Type of a key. Keys are used to store local values into
threads.</doc><param>a</param></type><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>new_key</value><doc><code>new_key ()</code> creates a new key.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>key</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>get</value><doc><code>get key</code> returns the value associated with <code>key</code> in the current
thread.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>key</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>with_value</value><doc><code>with_value key value f</code> executes <code>f</code> with <code>value</code> associated to
<code>key</code>. <code>key</code> is restored to its previous value after <code>f</code> terminates.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>key</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><var>b</var></arrow><var>b</var></arrow></arrow></arrow></value><comment><title level="2">Exceptions handling</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>catch</value><doc><code>catch t f</code> is a thread that behaves as the thread <code>t ()</code> if
this thread succeeds. If the thread <code>t ()</code> fails with some
exception, <code>catch t f</code> behaves as the application of <code>f</code> to this
exception.</doc><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow><arrow><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>try_bind</value><doc><code>try_bind t f g</code> behaves as <code>bind (t ()) f</code> if <code>t</code> does not
fail. Otherwise, it behaves as the application of <code>g</code> to the
exception associated to <code>t ()</code>.</doc><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow><arrow><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow><arrow><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>finalize</value><doc><code>finalize f g</code> returns the same result as <code>f ()</code> whether it
fails or not. In both cases, <code>g ()</code> is executed after <code>f</code>.</doc><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wrap</value><doc><code>wrap f</code> calls <code>f</code> and transforms the result into an Lwt thread.
If <code>f</code> raises an exception, it is caught and converted to an Lwt
exception.<newline/>This is actually the same as:<newline/><precode>        try
          return (f ())
        with exn -&gt;
          fail exn</precode></doc><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><var>a</var></arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wrap1</value><doc><code>wrap1 f x</code> applies <code>f</code> on <code>x</code> and returns the result as a
thread. If the application of <code>f</code> to <code>x</code> raise an exception it
is catched and a thread is returned.<newline/>Note that you must use <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wrap</value></identifier></resolved></element></reference> instead of <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wrap1</value></identifier></resolved></element></reference> if the
evaluation of <code>x</code> may raise an exception.<newline/>For example, the following code is incorrect:<newline/><precode>        wrap1 f (Hashtbl.find table key)</precode><newline/>and should be written as:<newline/><precode>        wrap (fun () -&gt; f (Hashtbl.find table key))</precode></doc><arrow><arrow><var>a</var><var>b</var></arrow><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wrap2</value><arrow><arrow><var>a</var><arrow><var>b</var><var>c</var></arrow></arrow><arrow><var>a</var><arrow><var>b</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>c</var></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wrap3</value><arrow><arrow><var>a</var><arrow><var>b</var><arrow><var>c</var><var>d</var></arrow></arrow></arrow><arrow><var>a</var><arrow><var>b</var><arrow><var>c</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>d</var></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wrap4</value><arrow><arrow><var>a</var><arrow><var>b</var><arrow><var>c</var><arrow><var>d</var><var>e</var></arrow></arrow></arrow></arrow><arrow><var>a</var><arrow><var>b</var><arrow><var>c</var><arrow><var>d</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>e</var></path></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wrap5</value><arrow><arrow><var>a</var><arrow><var>b</var><arrow><var>c</var><arrow><var>d</var><arrow><var>e</var><var>f</var></arrow></arrow></arrow></arrow></arrow><arrow><var>a</var><arrow><var>b</var><arrow><var>c</var><arrow><var>d</var><arrow><var>e</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>f</var></path></arrow></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wrap6</value><arrow><arrow><var>a</var><arrow><var>b</var><arrow><var>c</var><arrow><var>d</var><arrow><var>e</var><arrow><var>f</var><var>g</var></arrow></arrow></arrow></arrow></arrow></arrow><arrow><var>a</var><arrow><var>b</var><arrow><var>c</var><arrow><var>d</var><arrow><var>e</var><arrow><var>f</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>g</var></path></arrow></arrow></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wrap7</value><arrow><arrow><var>a</var><arrow><var>b</var><arrow><var>c</var><arrow><var>d</var><arrow><var>e</var><arrow><var>f</var><arrow><var>g</var><var>h</var></arrow></arrow></arrow></arrow></arrow></arrow></arrow><arrow><var>a</var><arrow><var>b</var><arrow><var>c</var><arrow><var>d</var><arrow><var>e</var><arrow><var>f</var><arrow><var>g</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>h</var></path></arrow></arrow></arrow></arrow></arrow></arrow></arrow></arrow></value><comment><title level="2">Multi-threads composition</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>choose</value><doc><code>choose l</code> behaves as the first thread in <code>l</code> to terminate. If
several threads are already terminated, one is chosen at
random.<newline/>Note: <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>choose</value></identifier></resolved></element></reference> leaves the local values of the current thread
unchanged.</doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>nchoose</value><doc><code>nchoose l</code> returns the value of all that have succcessfully
terminated. If all threads are sleeping, it waits for at least
one to terminates. If one the threads of <code>l</code> fails, <code>nchoose</code>
fails with the same exception.<newline/>Note: <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>nchoose</value></identifier></resolved></element></reference> leaves the local values of the current thread
unchanged.</doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>nchoose_split</value><doc><code>nchoose_split l</code> does the same as <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>nchoose</value></identifier></resolved></element></reference> but also retrurns
the list of threads that have not yet terminated.</doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><tuple><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></path></tuple></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>join</value><doc><code>join l</code> waits for all threads in <code>l</code> to terminate. If one of
the threads fails, then <code>join l</code> will fails with the same
exception as the first one to terminate.<newline/>Note: <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>join</value></identifier></resolved></element></reference> leaves the local values of the current thread
unchanged.</doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>(&lt;?&gt;)</value><doc><code>t &lt;?&gt; t'</code> is the same as <code>choose [t; t']</code></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>(&lt;&amp;&gt;)</value><doc><code>t &lt;&amp;&gt; t'</code> is the same as <code>join [t; t']</code></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>async</value><doc><code>async f</code> starts a thread without waiting for the result. If it
fails (now or later), the exception is given to
<reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>async_exception_hook</value></identifier></resolved></element></reference>.<newline/>You should use this function if you want to start a thread that
might fail and don't care what its return value is, nor when it
terminates (for instance, because it is looping).</doc><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>ignore_result</value><doc><code>ignore_result t</code> is like <code>Pervasives.ignore t</code> except that:<newline/><list><item>if <code>t</code> already failed, it raises the exception now,</item><item>if <code>t</code> is sleeping and fails later, the exception will be
given to <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>async_exception_hook</value></identifier></resolved></element></reference>.</item></list></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>async_exception_hook</value><doc>Function called when a asynchronous exception is thrown.<newline/>The default behavior is to print an error message with a
backtrace if available and to exit the program.<newline/>The behavior is undefined if this function raise an
exception.</doc><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>ref</type></resolved><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></path></value><comment><title level="2">Sleeping and resuming</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>u</type><doc>The type of thread wakeners.</doc><param>a</param></type><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wait</value><doc><code>wait ()</code> is a pair of a thread which sleeps forever (unless it
is resumed by one of the functions <code>wakeup</code>, <code>wakeup_exn</code> below)
and the corresponding wakener. This thread does not block the
execution of the remainder of the program (except of course, if
another thread tries to wait for its termination).</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><tuple><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>u</type></identifier></resolved><var>a</var></path></tuple></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wakeup</value><doc><code>wakeup t e</code> makes the sleeping thread <code>t</code> terminate and return
the value of the expression <code>e</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>u</type></identifier></resolved><var>a</var></path><arrow><var>a</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wakeup_exn</value><doc><code>wakeup_exn t e</code> makes the sleeping thread <code>t</code> fail with the
exception <code>e</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>u</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wakeup_later</value><doc>Same as <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wakeup</value></identifier></resolved></element></reference> but it is not guaranteed that the thread will
be woken up immediately.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>u</type></identifier></resolved><var>a</var></path><arrow><var>a</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wakeup_later_exn</value><doc>Same as <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wakeup_exn</value></identifier></resolved></element></reference> but it is not guaranteed that the thread
will be woken up immediately.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>u</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>waiter_of_wakener</value><doc>Returns the thread associated to a wakener.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>u</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow></value><type><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>result</type><doc>Either a value of type <code>'a</code>, either an exception.</doc><param>a<pos/></param></type><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>make_value</value><doc><code>value x</code> creates a result containing the value <code>x</code>.</doc><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>result</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>make_error</value><doc><code>error e</code> creates a result containing the exception <code>e</code>.</doc><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>result</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>of_result</value><doc>Returns a thread from a result.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>result</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wakeup_result</value><doc><code>wakeup_result t r</code> makes the sleeping thread <code>t</code> terminate with
the result <code>r</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>u</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>result</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wakeup_later_result</value><doc>Same as <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wakeup_result</value></identifier></resolved></element></reference> but it is not guaranteed that the
thread will be woken up immediately.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>u</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>result</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><comment><title level="2">Threads state</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>state</type><doc>State of a thread</doc><param>a</param><variant><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>state</type>Return</constructor><doc>The thread which has successfully terminated</doc><arguments><var>a</var></arguments></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>state</type>Fail</constructor><doc>The thread raised an exception</doc><arguments><path><resolved><identifier><type>exn</type></identifier></resolved></path></arguments></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>state</type>Sleep</constructor><doc>The thread is sleeping</doc></constructor></variant></type><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>state</value><doc><code>state t</code> returns the state of a thread</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>state</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>is_sleeping</value><doc><code>is_sleeping t</code> returns <code>true</code> iff <code>t</code> is sleeping.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></value><comment><title level="2">Cancelable threads</title></comment><comment>Cancelable threads are the same as regular threads except that
they can be canceled.</comment><exception><exception><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>Canceled</exception><doc>Canceled threads fails with this exception</doc></exception><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>task</value><doc><code>task ()</code> is the same as <code>wait ()</code> except that threads created
with <code>task</code> can be canceled.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><tuple><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>u</type></identifier></resolved><var>a</var></path></tuple></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>on_cancel</value><doc><code>on_cancel t f</code> executes <code>f</code> when <code>t</code> is canceled. <code>f</code> will be
executed before all other threads waiting on <code>t</code>.<newline/>If <code>f</code> raises an exception it is given to
<reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>async_exception_hook</value></identifier></resolved></element></reference>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>add_task_r</value><doc><code>add_task_r seq</code> creates a sleeping thread, adds its wakener to
the right of <code>seq</code> and returns its waiter. When the thread is
canceled, it is removed from <code>seq</code>.</doc><arrow><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt_sequence/index.xml"><cmti name="Lwt_sequence" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_sequence.cmti" digest="ce3592bc901ce0c829f4f282ef54d80a"/></xml></base>Lwt_sequence</root></identifier>t</type></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>u</type></identifier></resolved><var>a</var></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>add_task_l</value><doc><code>add_task_l seq</code> creates a sleeping thread, adds its wakener to
the left of <code>seq</code> and returns its waiter. When the thread is
canceled, it is removed from <code>seq</code>.</doc><arrow><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt_sequence/index.xml"><cmti name="Lwt_sequence" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt_sequence.cmti" digest="ce3592bc901ce0c829f4f282ef54d80a"/></xml></base>Lwt_sequence</root></identifier>t</type></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>u</type></identifier></resolved><var>a</var></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>cancel</value><doc><code>cancel t</code> cancels the threads <code>t</code>. This means that the deepest
sleeping thread created with <code>task</code> and connected to <code>t</code> is
woken up with the exception <reference><element><resolved><identifier><exception><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>Canceled</exception></identifier></resolved></element></reference>.<newline/>For example, in the following code:<newline/><precode>        let waiter, wakener = task () in
        cancel (waiter &gt;&gt; printl &quot;plop&quot;)</precode><newline/><code>waiter</code> will be woken up with <reference><element><resolved><identifier><exception><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>Canceled</exception></identifier></resolved></element></reference>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>pick</value><doc><code>pick l</code> is the same as <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>choose</value></identifier></resolved></element></reference>, except that it cancels all
sleeping threads when one terminates.<newline/>Note: <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>pick</value></identifier></resolved></element></reference> leaves the local values of the current thread
unchanged.</doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>npick</value><doc><code>npick l</code> is the same as <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>nchoose</value></identifier></resolved></element></reference>, except that it cancels all
sleeping threads when one terminates.<newline/>Note: <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>npick</value></identifier></resolved></element></reference> leaves the local values of the current thread
unchanged.</doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>protected</value><doc><code>protected thread</code> creates a new cancelable thread which behave
as <code>thread</code> except that cancelling it does not cancel
<code>thread</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>no_cancel</value><doc><code>no_cancel thread</code> creates a thread which behave as <code>thread</code>
except that it cannot be canceled.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow></value><comment><title level="2">Pause</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>pause</value><doc><code>pause ()</code> is a sleeping thread which is wake up on the next
call to <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wakeup_paused</value></identifier></resolved></element></reference>. A thread created with <code>pause</code> can be
canceled.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wakeup_paused</value><doc><code>wakeup_paused ()</code> wakes up all threads which suspended
themselves with <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>pause</value></identifier></resolved></element></reference>.<newline/>This function is called by the scheduler, before entering the
main loop. You usually do not have to call it directly, except
if you are writing a custom scheduler.<newline/>Note that if a paused thread resumes and pauses again, it will not
be woken up at this point.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>paused_count</value><doc><code>paused_count ()</code> returns the number of currently paused
threads.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>register_pause_notifier</value><doc><code>register_pause_notifier f</code> register a function <code>f</code> that will be
called each time pause is called. The parameter passed to <code>f</code> is
the new number of threads paused. It is usefull to be able to
call <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>wakeup_paused</value></identifier></resolved></element></reference> when there is no scheduler</doc><arrow><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><comment><title level="2">Misc</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>on_success</value><doc><code>on_success t f</code> executes <code>f</code> when <code>t</code> terminates without
failing. If <code>f</code> raises an exception it is given to
<reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>async_exception_hook</value></identifier></resolved></element></reference>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><arrow><arrow><var>a</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>on_failure</value><doc><code>on_failure t f</code> executes <code>f</code> when <code>t</code> terminates and fails. If
<code>f</code> raises an exception it is given to
<reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>async_exception_hook</value></identifier></resolved></element></reference>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><arrow><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>on_termination</value><doc><code>on_termination t f</code> executes <code>f</code> when <code>t</code> terminates. If <code>f</code>
raises an exception it is given to <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>async_exception_hook</value></identifier></resolved></element></reference>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>on_any</value><doc><code>on_any t f g</code> executes <code>f</code> or <code>g</code> when <code>t</code> terminates. If <code>f</code>
or <code>g</code> raises an exception it is given to
<reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>async_exception_hook</value></identifier></resolved></element></reference>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><arrow><arrow><var>a</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></value><stop/><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>poll</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>apply</value><arrow><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>backtrace_bind</value><arrow><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type>exn</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path><arrow><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>backtrace_catch</value><arrow><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type>exn</type></identifier></resolved></path></arrow><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow><arrow><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>backtrace_try_bind</value><arrow><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type>exn</type></identifier></resolved></path></arrow><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow><arrow><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow><arrow><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>b</var></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>backtrace_finalize</value><arrow><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type>exn</type></identifier></resolved></path></arrow><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root>t</type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></value></unit>