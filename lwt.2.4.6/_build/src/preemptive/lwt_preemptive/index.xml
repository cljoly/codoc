<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Lwt_preemptive" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/preemptive/lwt_preemptive.cmti" digest="3623b384019f489d7d2057f2d8e0f919"/></xml></html></base>Lwt_preemptive</root><digest>3623b384019f489d7d2057f2d8e0f919</digest><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Lwt<digest>3ec18d03611d8f4576b577b743482a48</digest></import><import>Lwt_sequence<digest>ce3592bc901ce0c829f4f282ef54d80a</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><source><file>src/preemptive/lwt_preemptive.mli</file><dir>/home/dsheets/.opam/doc/build/lwt.2.4.6/_build</dir><digest>0c4e741b7a0d53ae25f11d39c565f7a5</digest></source><doc>This module allows to mix preemptive threads with <code>Lwt</code>
cooperative threads. It maintains an extensible pool of preemptive
threads to which you can detach computations.</doc><value><value><root><base><xml src="index.xml"><cmti name="Lwt_preemptive" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/preemptive/lwt_preemptive.cmti" digest="3623b384019f489d7d2057f2d8e0f919"/></xml></base>Lwt_preemptive</root>detach</value><doc>detaches a computation to a preemptive thread.</doc><arrow><arrow><var>a</var><var>b</var></arrow><arrow><var>a</var><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><var>b</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_preemptive" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/preemptive/lwt_preemptive.cmti" digest="3623b384019f489d7d2057f2d8e0f919"/></xml></base>Lwt_preemptive</root>run_in_main</value><doc><code>run_in_main f</code> executes <code>f</code> in the main thread, i.e. the one
executing <reference><element><resolved><value><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/unix/lwt_main/index.xml"><cmti name="Lwt_main" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/unix/lwt_main.cmti" digest="1e751b4878942cfcd2271c5399de7ebc"/></xml></base>Lwt_main</root></identifier>run</value></resolved></element></reference> and returns its result.</doc><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><type><identifier><root><base><xml src="../../../../../lwt.2.4.6/_build/src/core/lwt/index.xml"><cmti name="Lwt" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/core/lwt.cmti" digest="3ec18d03611d8f4576b577b743482a48"/></xml></base>Lwt</root></identifier>t</type></resolved><var>a</var></path></arrow><var>a</var></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_preemptive" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/preemptive/lwt_preemptive.cmti" digest="3623b384019f489d7d2057f2d8e0f919"/></xml></base>Lwt_preemptive</root>init</value><doc><code>init min max log</code> initialises this module. i.e. it launches the
minimum number of preemptive threads and starts the <bold>dispatcher</bold>.<param><name>min</name>is the minimum number of threads</param><param><name>max</name>is the maximum number of threads</param><param><name>log</name>is used to log error messages<newline/>If <reference><element><root>Lwt_preemptive</root></element></reference> has already been initialised, this call
only modify bounds and the log function, and return the
dispatcher thread.</param></doc><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_preemptive" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/preemptive/lwt_preemptive.cmti" digest="3623b384019f489d7d2057f2d8e0f919"/></xml></base>Lwt_preemptive</root>simple_init</value><doc><code>simple_init ()</code> does a <italic>simple initialization</italic>. i.e. with
default parameters if the library is not yet initialised.<newline/>Note: this function is automatically called <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt_preemptive" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/preemptive/lwt_preemptive.cmti" digest="3623b384019f489d7d2057f2d8e0f919"/></xml></base>Lwt_preemptive</root>detach</value></identifier></resolved></element></reference>.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_preemptive" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/preemptive/lwt_preemptive.cmti" digest="3623b384019f489d7d2057f2d8e0f919"/></xml></base>Lwt_preemptive</root>get_bounds</value><doc><code>get_bounds ()</code> returns the minimum and the maximum number of
preemptive threads.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><tuple><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></tuple></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_preemptive" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/preemptive/lwt_preemptive.cmti" digest="3623b384019f489d7d2057f2d8e0f919"/></xml></base>Lwt_preemptive</root>set_bounds</value><doc><code>set_bounds (min, max)</code> set the minimum and the maximum number
of preemptive threads.</doc><arrow><tuple><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></tuple><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_preemptive" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/preemptive/lwt_preemptive.cmti" digest="3623b384019f489d7d2057f2d8e0f919"/></xml></base>Lwt_preemptive</root>set_max_number_of_threads_queued</value><doc>Sets the size of the waiting queue, if no more preemptive
threads are available. When the queue is full, <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Lwt_preemptive" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/preemptive/lwt_preemptive.cmti" digest="3623b384019f489d7d2057f2d8e0f919"/></xml></base>Lwt_preemptive</root>detach</value></identifier></resolved></element></reference> will
sleep until a thread is available.</doc><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_preemptive" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/preemptive/lwt_preemptive.cmti" digest="3623b384019f489d7d2057f2d8e0f919"/></xml></base>Lwt_preemptive</root>get_max_number_of_threads_queued</value><doc>Returns the size of the waiting queue, if no more threads are
available</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><stop/><value><value><root><base><xml src="index.xml"><cmti name="Lwt_preemptive" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/preemptive/lwt_preemptive.cmti" digest="3623b384019f489d7d2057f2d8e0f919"/></xml></base>Lwt_preemptive</root>nbthreads</value><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_preemptive" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/preemptive/lwt_preemptive.cmti" digest="3623b384019f489d7d2057f2d8e0f919"/></xml></base>Lwt_preemptive</root>nbthreadsbusy</value><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Lwt_preemptive" src="/home/dsheets/.opam/doc/build/lwt.2.4.6/_build/src/preemptive/lwt_preemptive.cmti" digest="3623b384019f489d7d2057f2d8e0f919"/></xml></base>Lwt_preemptive</root>nbthreadsqueued</value><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value></unit>