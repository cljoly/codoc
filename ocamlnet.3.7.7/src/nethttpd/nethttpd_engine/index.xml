<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></html></base>Nethttpd_engine</root><digest>9f418add71d5ea12973a7210fbcca551</digest><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>CamlinternalOO<digest>3d0b4eb4525ba4274c8885d7124f7bbc</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Equeue<digest>207ed21b384dd4f4ad91bce8a449f64c</digest></import><import>Format<digest>61d4350242b30078d3ad96c904c9f7a1</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>Mimestring<digest>ac31fcb123c04dfee879b3fcd4ac6465</digest></import><import>Netbuffer<digest>5f4225f2baeef1584e246c6ce1d32119</digest></import><import>Netcgi<digest>1120fba47169cd3f18580a7b399ae697</digest></import><import>Netcgi_common<digest>0bfc71ace03fbc647409d1f01e5f3867</digest></import><import>Netchannels<digest>4e22bd1ba0cae4bd9bd1b6e69fc16ade</digest></import><import>Netexn<digest>845c6110cc81d957d9fc21c9e149d5fb</digest></import><import>Nethttp<digest>737c0d14116a929a59f2fbe36cc0b7cc</digest></import><import>Nethttpd_kernel<digest>cb3eaecd0d22fe226726c29db05c6aa8</digest></import><import>Nethttpd_reactor<digest>037fd7692b24505ca09a49549341e8c6</digest></import><import>Nethttpd_types<digest>55ae14cadf1eaf504d8f0551c06535b1</digest></import><import>Netlog<digest>2441459e41ceb77fc72d5714e0508958</digest></import><import>Netmime<digest>0b76a3020124c30d13396d877ed0ad15</digest></import><import>Netsockaddr<digest>514bc9294568dc3facaf49b96623c337</digest></import><import>Netstream<digest>0cb48bc6daf6d8a3d088ce0dfb4dcbbe</digest></import><import>Netsys<digest>4a0ae4cc74f10e8667e3b629e6907079</digest></import><import>Netsys_mem<digest>f19ef786301a8cbcfbf1a4fffee992f8</digest></import><import>Netsys_posix<digest>f5b674538a41e016bb4f0e731d114657</digest></import><import>Netsys_signal<digest>703311022efc5162433d614b9bef35af</digest></import><import>Netsys_types<digest>67b26630eaf4decaa483864d4d00a3a2</digest></import><import>Netsys_win32<digest>02161f9169b76f686b05a51ed2d9357c</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Oo<digest>0977563fa9c23f2df2952b302bdba835</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>Stream<digest>55948988e71c3ee1749feb21ccec9fc9</digest></import><import>Sys<digest>0ce699458ce4430954d7e6a78874647c</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><import>Unixqueue<digest>5ec5f57d46c5b3e908696c79a59232d4</digest></import><import>Unixqueue_util<digest>f013da7473123405a6e2f9edc5dde5e1</digest></import><import>Uq_engines<digest>7eabb27fa86d9290a1fe2ef78547b48a</digest></import><source><file>nethttpd_engine.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd</dir><digest>6b9a4275aa6f2addb085f69b44e9b0b9</digest></source><doc><title level="1">The event-based encapsulation of the HTTP daemon</title><newline/>This is a user-friendlier encapsulation of the HTTP daemon. It uses
the engine module defined in <code>Uq_engines</code>.</doc><type><type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>engine_req_state</type><poly_variant><fixed/><constructor>Received_header<constant/></constructor><constructor>Receiving_body<constant/></constructor><constructor>Received_request<constant/></constructor><constructor>Finishing<constant/></constructor></poly_variant></type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_engine_config</class_type><signature><inherit><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/nethttpd/nethttpd_reactor/index.xml"><cmti name="Nethttpd_reactor" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_reactor.cmti" digest="037fd7692b24505ca09a49549341e8c6"/></xml></base>Nethttpd_reactor</root></identifier>http_processor_config</class_type></resolved></path></inherit><method><method><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_engine_config</class_type>config_input_flow_control</method><doc>If <code>true</code>, the engine stops reading input tokens from the HTTP kernel when
there is data in the input channel of the engine not yet read. If <code>false</code>,
all available input tokens are fetched from the kernel and buffered up
in the input channel.<newline/>In general, this <bold>should</bold> be set to <code>true</code>. However, this is only possible
when the user of the engine is prepared for flow control. In particular,
all data contained in the input channel must be immediately read, or else
the engine blocks. By calling <code>input_ch_async # request_notification</code>, the
user can be notified when there is data to read.<newline/>When set to <code>false</code>, the engine never blocks, but the price is that the
input channel may become as large as needed to store the whole request.<newline/>The option <code>config_limit_pipeline_size</code> does not have any effect for engines.</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_engine_config</class_type>config_output_flow_control</method><doc>If <code>true</code>, the engine signals the user when there is already enough data
to output, and no more output should be generated. The user can query
this state by calling <code>output_ch_async # can_output</code>, and react
accordingly. The user can also ignore this signal, and the output channel
buffers all data.<newline/>If <code>false</code>, the mentioned method <code>can_output</code> returns always <code>true</code>. This
turns off flow control in the case it is implemented by the user of the
engine, but actually not wanted.<newline/>The internal processing of data is not affected by this configuration option.
In doubt, set it to <code>true</code>.</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method></signature></class_type><value><value><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>default_http_engine_config</value><doc>The default config:<list><item><code>config_input_flow_control=false</code></item><item><code>config_output_flow_control=true</code></item></list></doc><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_engine_config</class_type></identifier></resolved></path></value><class><class><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>modify_http_engine_config</class><doc>Modifies the passed config object as specified by the optional
arguments.<newline/><code>modify_http_protocol_config</code> and <code>modify_http_processor_config</code>:
These functions can be used to modify the
parts of the config object that are inherited from <code>http_protocol_config</code>
and <code>http_processor_config</code>, respectively:
For example:<newline/><precode>        let new_cfg =
          new modify_http_engine_config
            ~modify_http_protocol_config:
               (new Nethttpd_kernel.modify_http_protocol_config
                  ~config_suppress_broken_pipe:true)
            ~modify_http_processor_config:
               (new Nethttpd_reactor.modify_http_processor_config
                  ~config_timeout:15.0)
            old_cfg</precode></doc><arrow><optional>modify_http_protocol_config</optional><path><resolved><identifier><type>option</type></identifier></resolved><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/nethttpd/nethttpd_kernel/index.xml"><cmti name="Nethttpd_kernel" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_kernel.cmti" digest="cb3eaecd0d22fe226726c29db05c6aa8"/></xml></base>Nethttpd_kernel</root></identifier>http_protocol_config</class_type></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/nethttpd/nethttpd_kernel/index.xml"><cmti name="Nethttpd_kernel" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_kernel.cmti" digest="cb3eaecd0d22fe226726c29db05c6aa8"/></xml></base>Nethttpd_kernel</root></identifier>http_protocol_config</class_type></resolved></path></arrow></path><arrow><optional>modify_http_processor_config</optional><path><resolved><identifier><type>option</type></identifier></resolved><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/nethttpd/nethttpd_reactor/index.xml"><cmti name="Nethttpd_reactor" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_reactor.cmti" digest="037fd7692b24505ca09a49549341e8c6"/></xml></base>Nethttpd_reactor</root></identifier>http_processor_config</class_type></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/nethttpd/nethttpd_reactor/index.xml"><cmti name="Nethttpd_reactor" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_reactor.cmti" digest="037fd7692b24505ca09a49549341e8c6"/></xml></base>Nethttpd_reactor</root></identifier>http_processor_config</class_type></resolved></path></arrow></path><arrow><optional>config_input_flow_control</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><optional>config_output_flow_control</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_engine_config</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_engine_config</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></class><class_type><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>extended_async_environment</class_type><signature><inherit><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/nethttpd/nethttpd_types/index.xml"><cmti name="Nethttpd_types" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_types.cmti" digest="55ae14cadf1eaf504d8f0551c06535b1"/></xml></base>Nethttpd_types</root></identifier>extended_environment</class_type></resolved></path></inherit><comment>Environment also providing asynchronous views to I/O</comment><method><method><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>extended_async_environment</class_type>input_ch_async</method><doc>This is the <code>input_ch</code> channel taken as asynchonous channel. This type of
channel indicates when data is available to read, and also sends notifications.
Note that this is only an alternate interface of the <code>input_ch</code> object.<newline/>The method <code>can_input</code> returns true when there is at least one byte of
the body to read, or the EOF has been seen. The channel buffers any arriving
data (which can be limited in amount by <code>config_pipeline_size</code>).<newline/>The behaviour of this channel is influenced by the configuration option
<code>config_input_flow_control</code>.</doc><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>async_in_channel</class_type></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>extended_async_environment</class_type>output_ch_async</method><doc>This is the <code>output_ch</code> channel taken as asynchronous channel. This type of
channel indicates when space is available for further output, and also sends
notifications.
Note that this is only an alternate interface of the <code>output_ch</code> object.<newline/>The method <code>can_output</code> returns <code>true</code> only when the internal buffer is empty,
i.e. all data have been transmitted to the client. Independent of this, the
channel buffers all data written to it.<newline/>The behaviour of this channel is influenced by the configuration option
<code>config_output_flow_control</code>.</doc><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>async_out_channel</class_type></resolved></path></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_request_header_notification</class_type><signature><comment>Notification that a new request header has arrived<newline/>This object notifies the user that a new request header has arrived.
The header is accessible by the <code>environment</code> object. The channels
also contained in this object are locked at this moment. The user must
now either call <code>schedule_accept_body</code> or <code>schedule_reject_body</code>. The
user will get a second notification (a <code>http_request_notification</code>, below)
when the request body has completely arrived (in case of acceptance), or
immediately (in case of rejection). One can also call <code>schedule_finish</code>
at any time to drop the current request.</comment><method><method><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_request_header_notification</class_type>req_state</method><doc>Returns the request processing state which is <code>`Received_header</code> at the
moment when this notification is delivered.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>engine_req_state</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_request_header_notification</class_type>environment</method><doc>The request environment. Depending on the request processing state, parts
of the environment are already set up or still unaccessible (&quot;locked&quot;).
In the state <code>`Received_header</code> only the request header and the
derived fields are accessible, and the input and output channels are
locked. In the state <code>`Receiving_body</code> the input channel is unlocked,
but it is not yet filled (reading from it may cause the exception
<code>Buffer_underrun</code>). The output channel remains locked.
In the state <code>`Received_request</code>, the input channel is unlocked and filled
with data, and the output channel is unlocked, too.<newline/>This environment is not fully CGI-compatible. In particular, the following
differences exist:<list><item>There is no <code>cgi_path_info</code> and no <code>cgi_path_translated</code>.</item><item>The user is always unauthenticated.</item><item>The <code>Status</code> response header works as in CGI. The <code>Location</code> header, however,
must be a full URL when set (only browser redirects)</item><item>When the request body is transmitted by chunked encoding, the header
<code>Content-Length</code> is not set. In CGI this is interpreted as missing body.
It is unlikely that clients send requests with chunked encoding, as this
may cause interoperability problems anyway.</item></list></doc><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>extended_async_environment</class_type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_request_header_notification</class_type>schedule_accept_body</method><doc>Schedules that the request body is accepted. In terms of HTTP, this sends the
&quot;100 Continue&quot; response when necessary. One can reply with a positive or
negative message.<newline/>This method returns immediately, and sets callbacks for certain events.
When the body has completely arrived (or is empty), the function
<code>on_request</code> is called back. The argument is the full request notification
(see below).<newline/>When the request is dropped for some reason, <code>on_error</code> is called back instead.
This can be used to free resources, for example.<newline/>Neither of the callbacks must raise exceptions.</doc><arrow><label>on_request</label><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_request_notification</class_type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><optional>on_error</optional><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_request_header_notification</class_type>schedule_reject_body</method><doc>Schedules that the request body is rejected. In terms of HTTP, this prevents
sending the &quot;100 Continue&quot; response. Any arriving request body is silently
discarded. One should immediately reply with an error mesage.
negative message.<newline/>This method returns immediately, and sets callbacks for certain events.
When the body has completely arrived (or is empty), the function
<code>on_request</code> is called back. The argument is the full request notification
(see below).<newline/>When the request is dropped for some reason, <code>on_error</code> is called back instead.
This can be used to free resources, for example.<newline/>Neither of the callbacks must raise exceptions.</doc><arrow><label>on_request</label><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_request_notification</class_type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><optional>on_error</optional><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_request_header_notification</class_type>schedule_finish</method><doc>Schedules that the request is finished. This method should be called after
the regular processing of the request to ensure that the HTTP protocol
is fulfilled. If the request body has not been
fully read, this is now done, and its data are dropped. If the response
is incomplete, it is completed. If the error is not recoverable, a &quot;Server
Error&quot; is generated.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_request_notification</class_type><signature><comment>Notification that the whole request has arrived<newline/>This object notifies the user that the request has fully arrived (including
the body if accepted), and can now be responded. The <code>environment</code> is the
same as in the request header notification, but the channels are now
unlocked.</comment><method><method><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_request_notification</class_type>req_state</method><doc>Returns the request processing state which is <code>`Received_request</code> at the
moment when this notification is delivered.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>engine_req_state</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_request_notification</class_type>environment</method><doc>The request environment. See above.</doc><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>extended_async_environment</class_type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_request_notification</class_type>schedule_finish</method><doc>Schedules that the request is finished. See above.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method></signature></class_type><class><class><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_engine</class><doc>This engine processes the requests arriving on the file descriptor using
the Unix event system. Whenever a new request header arrives, the function
<code>on_request_header</code> is called back, and must handle the request.<newline/>Unless aborted using the <code>abort</code> method, this engine is always successful.
Errors are logged, but not returned as result.<newline/>The file descriptor is closed after processing all HTTP requests and
responses. It is also closed on error and when the engine is aborted.<newline/>An aborted engine does not try to clean up resources external to the
engine, e.g. by calling the <code>on_error</code> functions. This is up to the user.</doc><arrow><label>on_request_header</label><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_request_header_notification</class_type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_engine_config</class_type></identifier></resolved></class><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><path><resolved><class><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>unix_event_system</class></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></arrow></arrow></arrow></class><class_type><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_engine_processing_config</class_type><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_engine_processing_config</class_type>config_synch_input</method><doc>The &quot;input synchronizer&quot;: It is called as <code>obj # config_synch_input f ch</code>
to create a synchronous input channel from an asynchronous one, <code>ch</code>.
The function <code>f</code> must be called back by the synchronizer when synchronisation
is established, and with the synchronous channel <code>ch'</code> as argument.
In particular, the task of the synchronizer is to turn blocking reads of
<code>ch'</code> into non-blocking reads of <code>ch</code>. In general there are two ways of
implementation:<list><item>Buffer all input from <code>ch</code> until the end of the channel is reached,
then call <code>f</code> with a wrapper channel <code>ch'</code> that just reads from the
buffer.</item><item>Run <code>f</code> in a different thread that blocks whenever there is nothing to
read from <code>ch</code>.</item></list>Both implementations are allowed, i.e. <bold>it is allowed that <code>f</code> runs in
a different thread</bold>.<newline/>CHECK: How to handle exceptions raised from <code>f</code>? Idea: <code>f</code> is obliged to
close <code>ch'</code> in this case, even if <code>ch</code> is not yet at the end. The rest of
exception handling is up to the user. - The complementary must also be true:
When there is an error in the engine, <code>ch</code> must be closed to signal the
other thread that we have a problem.</doc><arrow><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>in_obj_channel</class_type></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>async_in_channel</class_type></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_engine_processing_config</class_type>config_synch_output</method><doc>The &quot;output synchronizer&quot;: It is called as <code>obj # config_synch_output f ch</code>
to create a synchronous output channel from an asynchronous one, <code>ch</code>.
The function <code>f</code> must be called back by the synchronizer when synchronisation
is established, and with the synchronous channel <code>ch'</code> as argument.
In particular, the task of the synchronizer is to turn blocking writes to
<code>ch'</code> into non-blocking writes to <code>ch</code>. In general there are two ways of
implementation:<list><item>Call <code>f</code>, then buffer all output to <code>ch'</code> until the end of the channel is
reached, and finally output the contents of the buffer in an asynchronous
way.</item><item>Run <code>f</code> in a different thread that blocks whenever there is no space to
write to <code>ch</code>.</item></list>Both implementations are allowed, i.e. <bold>it is allowed that <code>f</code> runs in
a different thread</bold>.<newline/>CHECK: Exceptions.</doc><arrow><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>out_obj_channel</class_type></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>async_out_channel</class_type></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></method></signature></class_type><class><class><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>buffering_engine_processing_config</class><doc>Implements the synchronisation by buffering</doc><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_engine_processing_config</class_type></identifier></resolved></path></class><class_type><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_engine_processing_context</class_type><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_engine_processing_context</class_type>engine</method><doc>The engine doing HTTP</doc><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></method></signature></class_type><value><value><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>process_connection</value><doc>Sets up an engine that processes all requests using the service description.
This function returns immediately, one needs to <code>Unixqueue.run</code> the event
system to start the engine.<newline/>The passed <code>http_engine_processing_config</code> is crucial for good performance.
XXX</doc><arrow><class><dot><resolved><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/nethttpd/nethttpd_reactor/index.xml"><cmti name="Nethttpd_reactor" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_reactor.cmti" digest="037fd7692b24505ca09a49549341e8c6"/></xml></base>Nethttpd_reactor</root></identifier></resolved>#http_processor_config</dot></class><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_engine_processing_config</class_type></identifier></resolved></class><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><path><resolved><class><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>unix_event_system</class></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/nethttpd/nethttpd_types/index.xml"><cmti name="Nethttpd_types" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_types.cmti" digest="55ae14cadf1eaf504d8f0551c06535b1"/></xml></base>Nethttpd_types</root></identifier>http_service</class_type></resolved><var>a</var></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>http_engine_processing_context</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></value><comment><title level="1">Debugging</title></comment><module><module><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>Debug</module><type><signature><value><value><module><root><base><xml src="index.xml"><cmti name="Nethttpd_engine" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/nethttpd/nethttpd_engine.cmti" digest="9f418add71d5ea12973a7210fbcca551"/></xml></base>Nethttpd_engine</root>Debug</module>enable</value><doc>Enables <reference><element><root>Netlog</root></element></reference>-style debugging of this module</doc><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>ref</type></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></value></signature></type></module></unit>