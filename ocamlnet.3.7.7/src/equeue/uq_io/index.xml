<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></html></base>Uq_io</root><digest>984e3954a7772469921ddd3d31a1c224</digest><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>CamlinternalOO<digest>3d0b4eb4525ba4274c8885d7124f7bbc</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Equeue<digest>207ed21b384dd4f4ad91bce8a449f64c</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>Netbuffer<digest>5f4225f2baeef1584e246c6ce1d32119</digest></import><import>Netchannels<digest>4e22bd1ba0cae4bd9bd1b6e69fc16ade</digest></import><import>Netexn<digest>845c6110cc81d957d9fc21c9e149d5fb</digest></import><import>Netlog<digest>2441459e41ceb77fc72d5714e0508958</digest></import><import>Netsockaddr<digest>514bc9294568dc3facaf49b96623c337</digest></import><import>Netsys<digest>4a0ae4cc74f10e8667e3b629e6907079</digest></import><import>Netsys_mem<digest>f19ef786301a8cbcfbf1a4fffee992f8</digest></import><import>Netsys_posix<digest>f5b674538a41e016bb4f0e731d114657</digest></import><import>Netsys_signal<digest>703311022efc5162433d614b9bef35af</digest></import><import>Netsys_types<digest>67b26630eaf4decaa483864d4d00a3a2</digest></import><import>Netsys_win32<digest>02161f9169b76f686b05a51ed2d9357c</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Oo<digest>0977563fa9c23f2df2952b302bdba835</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>Stream<digest>55948988e71c3ee1749feb21ccec9fc9</digest></import><import>Sys<digest>0ce699458ce4430954d7e6a78874647c</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><import>Unixqueue<digest>5ec5f57d46c5b3e908696c79a59232d4</digest></import><import>Unixqueue_util<digest>f013da7473123405a6e2f9edc5dde5e1</digest></import><import>Uq_engines<digest>7eabb27fa86d9290a1fe2ef78547b48a</digest></import><source><file>uq_io.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue</dir><digest>0f375b593e79526f7d32120d965dfec5</digest></source><doc>Unified engines for stream I/O</doc><type><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_buffer</type></type><type><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_buffer</type><doc>Buffers that can be attached to a <code>device</code> to get buffered I/O</doc></type><type><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_device</type><doc>Currently supported devices for input:<list><item><code>`Polldescr(st,fd,esys)</code>: The <code>poll</code> system call is used with file
descriptor <code>fd</code> to wait for incoming data. The
event system <code>esys</code> is the underlying event queue. This works
well for pipes, sockets etc. but not for normal files. The
style <code>st</code> can be obtained from <code>fd</code> via
<reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netsys/netsys/index.xml"><cmti name="Netsys" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys.cmti" digest="4a0ae4cc74f10e8667e3b629e6907079"/></xml></base>Netsys</root></identifier>get_fd_style</value></resolved></element></reference>.</item><item><code>`Multiplex mplex</code>: The multiplex controller <code>mplex</code> is
used as device.</item><item><code>`Buffer buf</code>: Data comes from the buffer <code>buf</code> (which in turn
is connected with a second device)</item><item><code>`Count_in(f,d)</code>: Data is read from <code>d</code>, and every time a few
bytes <code>n</code> are read the function <code>f n</code> is called (which may raise
an exception)</item></list>Generally, it is not well supported to read in parallel several times
from the same device.</doc><poly_variant><fixed/><constructor>Polldescr<tuple><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netsys/netsys/index.xml"><cmti name="Netsys" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys.cmti" digest="4a0ae4cc74f10e8667e3b629e6907079"/></xml></base>Netsys</root></identifier>fd_style</type></resolved></path><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path></tuple></constructor><constructor>Multiplex<path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>multiplex_controller</class_type></resolved></path></constructor><constructor>Async_in<tuple><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>async_in_channel</class_type></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path></tuple></constructor><constructor>Buffer_in<path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_buffer</type></identifier></resolved></path></constructor><constructor>Count_in<tuple><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_device</type></identifier></resolved></path></tuple></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_device</type><doc>Currently supported devices for output:<list><item><code>`Polldescr(fd,esys)</code>: The <code>poll</code> system call is used with file
descriptor <code>fd</code> to wait until data can be output. The
event system <code>esys</code> is the underlying event queue. This works
well for pipes, sockets etc. but not for normal files.</item><item><code>`Multiplex mplex</code>: The multiplex controller <code>mplex</code> is
used as device.</item><item><code>`Buffer buf</code>: Data is written to the buffer <code>buf</code> (which in turn
is connected with a second device)</item><item><code>`Count_out(f,d)</code>: Data is written to <code>d</code>, and every time a few
bytes <code>n</code> are written the function <code>f n</code> is called (which may raise
an exception)</item></list>Generally, it is not well supported to write in parallel several times
to the same device.</doc><poly_variant><fixed/><constructor>Polldescr<tuple><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netsys/netsys/index.xml"><cmti name="Netsys" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys.cmti" digest="4a0ae4cc74f10e8667e3b629e6907079"/></xml></base>Netsys</root></identifier>fd_style</type></resolved></path><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path></tuple></constructor><constructor>Multiplex<path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>multiplex_controller</class_type></resolved></path></constructor><constructor>Async_out<tuple><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>async_out_channel</class_type></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path></tuple></constructor><constructor>Buffer_out<path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_buffer</type></identifier></resolved></path></constructor><constructor>Count_out<tuple><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_device</type></identifier></resolved></path></tuple></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_bdevice</type><doc>Devices with look-ahead</doc><poly_variant><fixed/><constructor>Buffer_in<path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_buffer</type></identifier></resolved></path></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>string_like</type><doc>The user can pass data buffers that base either on strings or on
bigarrays of char (memory). Note that <code>`Memory</code> is not supported
for all devices or device configurations.</doc><poly_variant><fixed/><constructor>String<path><resolved><identifier><type>string</type></identifier></resolved></path></constructor><constructor>Memory<path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netsys/netsys_mem/index.xml"><cmti name="Netsys_mem" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_mem.cmti" digest="f19ef786301a8cbcfbf1a4fffee992f8"/></xml></base>Netsys_mem</root></identifier>memory</type></resolved></path></constructor></poly_variant></type><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>device_supports_memory</value><doc>Returns whether <code>`Memory</code> buffers are supported</doc><arrow><poly_variant><fixed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_device</type></identifier></resolved></path></type><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_device</type></identifier></resolved></path></type></poly_variant><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></value><exception><exception><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>Line_too_long</exception><doc>May be raised by <reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_io/index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root></identifier>input_line_e</value></resolved></element></reference></doc></exception><comment><title level="2">Input</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>input_e</value><doc><code>let e = input_e d s pos len</code>: Reads data from <code>d</code> and puts it into
the string <code>s</code> starting at <code>pos</code> and with maximum length <code>len</code>.
When data is available, the engine <code>e</code> transitions to <code>`Done n</code>
where <code>n</code> is the number of actually read bytes.<newline/>If <code>len&gt;0</code> and no bytes can be read because the end is reached, the engine
transitions to <code>`Error End_of_file</code>.</doc><arrow><poly_variant><closed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_device</type></identifier></resolved></path></type></poly_variant><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>string_like</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>really_input_e</value><doc><code>let e = input_e d s pos len</code>: Reads data from <code>d</code> and puts it into
the string <code>s</code> starting at <code>pos</code> and with length <code>len</code>.
Exactly <code>len</code> bytes are read, and when done,
the engine <code>e</code> transitions to <code>`Done ()</code>.<newline/>If the end of the file is reached before <code>len</code> bytes are read,
the engine transitions to <code>`Error End_of_file</code>.</doc><arrow><poly_variant><closed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_device</type></identifier></resolved></path></type></poly_variant><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>string_like</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>input_line_e</value><doc><code>let e = input_line_e d</code>: Reads the next line from <code>d</code> and transitions
to <code>`Done line</code> when done. Note that this is only supported for a
buffered device!<newline/>If the end of the file is already reached when this function is
called, the engine transitions to <code>`Error End_of_file</code>.<newline/>If <code>max_len</code> is set, this is the maximum length of the line
(including LF). If exceeded, the engine transitions to
<code>`Error Line_too_long</code>.</doc><arrow><optional>max_len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_bdevice</type></identifier></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>input_lines_e</value><doc><code>let e = input_lines_e d</code>: Reads as many lines from <code>d</code> as can be
found in the buffer of <code>d</code>, and transitions to <code>`Done lines</code>. If
no complete line is in the buffer, the function extends the buffer and
waits until at least one line is added to the buffer (if necessary,
this process is repeated).<newline/>If the end of the file is already reached when this function is
called, the engine transitions to <code>`Error End_of_file</code>.
The function never returns an empty list of lines.<newline/><code>input_lines_e</code> is just an optimized version of <code>input_line_e</code> that
requires fewer and cheaper blitting operations.<newline/>If <code>max_len</code> is set, this is the maximum length of the line
(including LF). If exceeded, the engine transitions to
<code>`Error Line_too_long</code>.</doc><arrow><optional>max_len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_bdevice</type></identifier></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>eof_as_none</value><doc>Represents EOF as <code>None</code>. Useful in the combination
<precode>input_e d s p l &gt;&gt; eof_as_none</precode>
and
<precode>input_line_e d &gt;&gt; eof_as_none</precode>
where <code>&gt;&gt;</code> is from <reference><element><resolved><module><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>Operators</module></resolved></element></reference></doc><arrow><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>final_state</type></resolved><var>a</var></path><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>final_state</type></resolved><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path></path></arrow></value><comment><title level="2">Output</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>output_e</value><doc><code>let e = output_e d s pos len</code>: Outputs data to <code>d</code> and takes it
from the string <code>s</code> starting at <code>pos</code> and with maximum length
<code>len</code>. When data is written, the engine <code>e</code> transitions to <code>`Done n</code>
where <code>n</code> is the number of actually written bytes.</doc><arrow><poly_variant><closed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_device</type></identifier></resolved></path></type></poly_variant><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>string_like</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>really_output_e</value><doc><code>let e = really_output_e d s pos len</code>: Outputs data to <code>d</code> and takes it
from the string <code>s</code> starting at <code>pos</code> and with length
<code>len</code>. When all data is written, the engine <code>e</code> transitions to
<code>`Done ()</code>.</doc><arrow><poly_variant><closed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_device</type></identifier></resolved></path></type></poly_variant><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>string_like</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>output_string_e</value><doc><code>let e = output_string_e d s</code>: Outputs the string <code>s</code> to <code>d</code>,
and transitions to <code>`Done()</code> when done.</doc><arrow><poly_variant><closed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_device</type></identifier></resolved></path></type></poly_variant><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>output_memory_e</value><doc><code>let e = output_string_e d m</code>: Outputs the bigarray <code>m</code> to <code>d</code>,
and transitions to <code>`Done()</code> when done.</doc><arrow><poly_variant><closed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_device</type></identifier></resolved></path></type></poly_variant><arrow><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netsys/netsys_mem/index.xml"><cmti name="Netsys_mem" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_mem.cmti" digest="f19ef786301a8cbcfbf1a4fffee992f8"/></xml></base>Netsys_mem</root></identifier>memory</type></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>output_netbuffer_e</value><doc><code>let e = output_string_e d b</code>: Outputs the contents of <code>b</code> to <code>d</code>,
and transitions to <code>`Done()</code> when done.</doc><arrow><poly_variant><closed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_device</type></identifier></resolved></path></type></poly_variant><arrow><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netbuffer/index.xml"><cmti name="Netbuffer" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netbuffer.cmti" digest="5f4225f2baeef1584e246c6ce1d32119"/></xml></base>Netbuffer</root></identifier>t</type></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>write_eof_e</value><doc><code>let e = write_eof_e d</code>: For devices supporting half-open connections,
this engine writes the EOF marker and transitions to
<code>`Done true</code>. For other devices nothing happens, and the engine
transitions to <code>`Done false</code>. (In the latter case, the only way to
signal EOF is to shut down the device, see below.)<newline/>Note that the effect of <code>write_eof_e</code> cannot be buffered. Because
of this, the <code>io_buffer</code> flushes all data first (i.e. <code>write_eof_e</code>
implies the effect of <code>flush_e</code>).</doc><arrow><poly_variant><closed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_device</type></identifier></resolved></path></type></poly_variant><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>copy_e</value><doc><code>let e = copy_e d_in d_out</code>: Copies data from <code>d_in</code> to <code>d_out</code>,
and transitions to <code>`Done n</code> when all data is copied (where
<code>n</code> are the number of copied bytes).
By default, <code>d_in</code> is read until end of file. If <code>len</code> is passed,
at most this number of bytes are copied. The length can also be given
as <code>int64</code> in <code>len64</code>.<newline/>By setting <code>small_buffer</code>, the copy buffer consists only of a
single page. Normally, a bigger buffer is allocated.</doc><arrow><optional>small_buffer</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>len64</optional><path><resolved><identifier><type>int64</type></identifier></resolved></path><arrow><poly_variant><closed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_device</type></identifier></resolved></path></type></poly_variant><arrow><poly_variant><closed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_device</type></identifier></resolved></path></type></poly_variant><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><path><resolved><identifier><type>int64</type></identifier></resolved></path></path></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>flush_e</value><doc><code>let e = flush_e d</code>: If <code>d</code> has an internal buffer, all data is
written out to <code>d</code>. If there is no such buffer, this is a no-op.
When done, the engine transitions to <code>`Done()</code>.</doc><arrow><poly_variant><closed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_device</type></identifier></resolved></path></type></poly_variant><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></value><comment><title level="2">Shutdown</title></comment><comment>The shutdown is the last part of the protocol. Although it is
often done autonomously by the kernel, this interface supports
user-implemented shutdowns (e.g. for SSL).<newline/>The shutdown can be skipped, and the device can be inactivated
immediately. For some devices, the other side of the I/O stream
will then see an error, though.<newline/>The shutdown is always for both the input and the output circuit
of the device.</comment><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>shutdown_e</value><doc>Performs a regular shutdown of the device. The <code>linger</code> argument
may be used to configure a non-default linger timeout.
The engine transitions to <code>`Done()</code> when done.<newline/>The shutdown also releases the OS resources (closes the descriptor
etc.), but only if successful.<newline/>Note that the effect of <code>shutdown_e</code> cannot be buffered. Because
of this, the <code>io_buffer</code> flushes all data first (i.e. <code>shutdown_e</code>
implies the effect of <code>flush_e</code>). Input data available in the
buffer can still be read after the shutdown.</doc><arrow><optional>linger</optional><path><resolved><identifier><type>float</type></identifier></resolved></path><arrow><poly_variant><closed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_device</type></identifier></resolved></path></type><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_device</type></identifier></resolved></path></type></poly_variant><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>inactivate</value><doc>Releases the OS resources immediately. This is the right thing to do
when aborting the communication, or for cleanup after an I/O error.
It is wrong to inactivate after a successful shutdown, because the
shutdown already includes the inactivation.</doc><arrow><poly_variant><closed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_device</type></identifier></resolved></path></type><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_device</type></identifier></resolved></path></type></poly_variant><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><comment><title level="2">Buffers</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>create_in_buffer</value><doc>Provides a buffered version of the <code>in_device</code>.<newline/>By setting <code>small_buffer</code>, the initial input buffer consists only of a
single page. Normally, a bigger buffer is allocated.</doc><arrow><optional>small_buffer</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><poly_variant><closed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_device</type></identifier></resolved></path></type></poly_variant><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_buffer</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_buffer_length</value><doc>The length</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_buffer</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_buffer_blit</value><doc>Blit to a string or memory buffer</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_buffer</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>string_like</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_buffer_fill_e</value><doc>Requests that the buffer is filled more than currently, and
transitions to <code>`Done eof</code> when there is more data, or the
EOF is reached (eof=true).</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>in_buffer</type></identifier></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>create_out_buffer</value><doc>Provides a buffered version of the <code>out_device</code>. The argument
<code>max</code> is the maximum number of bytes to buffer. This can also be
set to <code>None</code> meaning no limit.<newline/>By setting <code>small_buffer</code>, the initial output buffer consists only of a
single page. Normally, a bigger buffer is allocated.</doc><arrow><optional>small_buffer</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><label>max</label><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><poly_variant><closed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_device</type></identifier></resolved></path></type></poly_variant><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_buffer</type></identifier></resolved></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>filter_out_buffer</value><doc><code>filter_out_buffer ~max p d</code>: The data written to this device is
redirected via pipe <code>p</code> and finally written to <code>d</code>.</doc><arrow><label>max</label><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>io_obj_channel</class_type></resolved></path><arrow><poly_variant><closed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_device</type></identifier></resolved></path></type></poly_variant><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root>out_buffer</type></identifier></resolved></path></arrow></arrow></arrow></value></unit>