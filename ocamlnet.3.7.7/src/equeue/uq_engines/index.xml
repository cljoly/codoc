<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></html></base>Uq_engines</root><digest>7eabb27fa86d9290a1fe2ef78547b48a</digest><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>CamlinternalOO<digest>3d0b4eb4525ba4274c8885d7124f7bbc</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Equeue<digest>207ed21b384dd4f4ad91bce8a449f64c</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>Netbuffer<digest>5f4225f2baeef1584e246c6ce1d32119</digest></import><import>Netchannels<digest>4e22bd1ba0cae4bd9bd1b6e69fc16ade</digest></import><import>Netexn<digest>845c6110cc81d957d9fc21c9e149d5fb</digest></import><import>Netlog<digest>2441459e41ceb77fc72d5714e0508958</digest></import><import>Netsockaddr<digest>514bc9294568dc3facaf49b96623c337</digest></import><import>Netsys<digest>4a0ae4cc74f10e8667e3b629e6907079</digest></import><import>Netsys_mem<digest>f19ef786301a8cbcfbf1a4fffee992f8</digest></import><import>Netsys_posix<digest>f5b674538a41e016bb4f0e731d114657</digest></import><import>Netsys_signal<digest>703311022efc5162433d614b9bef35af</digest></import><import>Netsys_types<digest>67b26630eaf4decaa483864d4d00a3a2</digest></import><import>Netsys_win32<digest>02161f9169b76f686b05a51ed2d9357c</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Oo<digest>0977563fa9c23f2df2952b302bdba835</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>Stream<digest>55948988e71c3ee1749feb21ccec9fc9</digest></import><import>Sys<digest>0ce699458ce4430954d7e6a78874647c</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><import>Unixqueue<digest>5ec5f57d46c5b3e908696c79a59232d4</digest></import><import>Unixqueue_util<digest>f013da7473123405a6e2f9edc5dde5e1</digest></import><source><file>uq_engines.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue</dir><digest>efb702a48ffdec74fb3fec018cb1a7d3</digest></source><doc>An <bold>engine</bold> performs a certain task in an autonomous way. Engines
are attached to a <reference><element><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></element></reference>, and do their task by
generating events for resources of the operating system, and
by handling such events. Engines are in one of four states: They
may be still <bold>working</bold>, they may be <bold>done</bold>, they may be
<bold>aborted</bold>, or they may be in an <bold>error</bold> state. The three latter
states a called <bold>final states</bold>, because they indicate that the
engine has stopped operation.<newline/>It is possible to ask an engine to notify another object when it
changes its state. For simplicity, notification is done by invoking
a callback function, and not by issuing notification events.<newline/>Effectively, engines provide a calculus for cooperative microthreading.
This calculus includes combinators for sequential execution and
synchronization. Moreover, it is easy to connect it with callback-style
microthreading - one can arrange callbacks when an engine is done, and
one can catch callbacks and turn them into engines.</doc><comment><title level="1">Exceptions</title></comment><exception><exception><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>Closed_channel</exception><doc>Raised when a method of a closed channel object is called (only channel
methods count).<newline/>This exception should be regarded as equivalent to
<code>Netchannels.Closed_channel</code>, but need not be the same exception.</doc></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>Broken_communication</exception><doc>Some engines indicate this error when they cannot continue because the
other endpoint of communication signals an error.<newline/>This exception is not raised, but used as argument of the <code>`Error</code>
state.</doc></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>Watchdog_timeout</exception><doc>Used by the watchdog engine to indicate a timeout.<newline/>This exception is not raised, but used as argument of the <code>`Error</code>
state.</doc></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>Timeout</exception><doc>Used by <code>input_engine</code> and <code>output_engine</code> to indicate timeouts</doc></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>Addressing_method_not_supported</exception><doc>Raised by <code>client_socket_connector</code> and <code>server_socket_acceptor</code> to
indicate that the passed address is not supported by the class.</doc></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>Cancelled</exception><doc>The callback function of a <code>multiplex_controller</code> is invoked with this
exception if the operation is cancelled.</doc></exception><comment><title level="1">Engine definition</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type><doc>The type of states with result values of type <code>'t</code>:<list><item><code>`Working n</code>: The engine is working. The number <code>n</code> counts the number
of events that have been processed.</item><item><code>`Done arg</code>: The engine has completed its task without errors.
The argument <code>arg</code> is the result value of the engine</item><item><code>`Error exn</code>: The engine has aborted because of an error. The
argument <code>exn</code> describes the error as an exception.</item><item><code>`Aborted</code>: The engine has aborted because the <code>abort</code> method
was called</item></list></doc><param>t</param><poly_variant><fixed/><constructor>Working<path><resolved><identifier><type>int</type></identifier></resolved></path></constructor><constructor>Done<var>t</var></constructor><constructor>Error<path><resolved><identifier><type>exn</type></identifier></resolved></path></constructor><constructor>Aborted<constant/></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>final_state</type><doc>Same as <code>engine_state</code> without <code>`Working</code>. These are only the final
states.</doc><param>t</param><poly_variant><fixed/><constructor>Done<var>t</var></constructor><constructor>Error<path><resolved><identifier><type>exn</type></identifier></resolved></path></constructor><constructor>Aborted<constant/></constructor></poly_variant></type><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>string_of_state</value><doc>For debug purposes: Returns a string describing the state</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type><doc>This class type defines the interface an engine must support. The
class parameter <code>'t</code> is the type of the result values (when the
engine goes to state <code>`Done</code>).</doc><param>t</param><signature><comment>Requirements for engines</comment><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type>state</method><doc>Returns the state of the engine</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type></identifier></resolved><var>t</var></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type>abort</method><doc>Forces that the engine aborts operation. If the state is already
<code>`Done</code>, <code>`Aborted</code>, or <code>`Error</code>, this method must do nothing (you
cannot abort an already finished engine).</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type>request_notification</method><doc>Requests notification about state changes.<newline/>After the notification has been requested, the passed function must
be called whenever <code>state</code> changes its value (or might change
its value; it is allowed to call the notification function more
frequently than necessary). The function returns <code>true</code> if there
is still interest in notification, and <code>false</code> if notification must
be disabled; the function must not be called any longer in this
case.<newline/>There can be any number of parallel active notifications. It is
allowed that a notification callback function requests further
notifications.<newline/>If the callback raises an exception, this exception is
propagated to the caller of <reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>run</value></resolved></element></reference>.</doc><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type>event_system</method><doc>Returns the event system the engine is attached to</doc><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path></method></signature></class_type><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>delegate_engine</class><doc>Turns an engine value into a class</doc><param>t</param><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>t</var></class><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>t</var></path></arrow></class><comment><title level="1">Engines and callbacks</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>when_state</value><doc>Watches the state of the argument engine, and arranges that one of
the functions is called when the corresponding state change is done.
Once a final state is reached, the engine is no longer watched.
Note that <code>when_state</code> only observes future state changes.<newline/>If one of the functions raises an exception, this exception is
propagated to the caller of <reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>run</value></resolved></element></reference>.<param><name>is_done</name>The state transitions to <code>`Done</code>. The argument of
<code>is_done</code> is the argument of the <code>`Done</code> state.</param><param><name>is_error</name>The state transitions to <code>`Error</code>. The argument of
<code>is_error</code> is the argument of the <code>`Error</code> state.</param><param><name>is_aborted</name>The state transitions to <code>`Aborted</code>.</param><param><name>is_progressing</name>This function is called when the <code>`Working</code>
state changes. The int argument is the new <code>`Working</code> arg.</param></doc><arrow><optional>is_done</optional><arrow><var>a</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><optional>is_error</optional><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><optional>is_aborted</optional><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><optional>is_progressing</optional><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>signal_engine</class><doc><code>let se = new signal_engine esys</code>: The engine <code>se</code> remains in
<code>`Working 0</code> until the method <code>se # signal x</code> is called. At this point
<code>e</code> transitions to <code>x</code>. Any further call of <code>signal</code> does not
have any effect.<newline/>Also, if <code>se</code> is aborted, <code>signal</code> does not have any effect.<newline/>The function <code>signal</code> may be called from a different thread.
The signalling event is forwarded to the thread running the
event system.</doc><param>a</param><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path></inherit><method><method><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>signal_engine</class>signal</method><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>final_state</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method></signature></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>signal_engine</value><doc><code>let (se, signal) = signal_engine esys</code>: Same as function</doc><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><tuple><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>final_state</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></tuple></arrow></value><comment><title level="1">Combinators</title></comment><comment>The following combinators serve as the control structures to connect
primitive engines with each other.</comment><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>map_engine</class><doc>The <code>map_engine</code> observes the argument engine, and when the
state changes to <code>`Done</code>, <code>`Error</code>, or <code>`Aborted</code>, the corresponding
mapping function is called, and the resulting state becomes the state
of the mapped engine. If the engine is already in one of the
mentioned states, the map functions are also called (unlike
<code>when_state</code>).<newline/>After the state change to <code>`Done</code>, <code>`Error</code>, or <code>`Aborted</code> has been
observed, the map engine detaches from the argument engine,
and no further state changes are recognized.<newline/>The state <code>`Working</code> cannot be mapped to another state. It is an
error to map final states to <code>`Working</code>.
The result type of the <code>map_*</code> functions is <code>engine_state</code>
and not <code>final_state</code> because of historic reasons.<newline/>If the mapped engine is aborted, this request will be forwarded
to the argument engine.<newline/>If one of the mapping functions raises an exception, this causes
a transiton to <code>`Error</code>.<param><name>map_done</name>Maps the <code>`Done</code> state of the argument engine to
another state. The argument of <code>map_done</code> is the argument of the
<code>`Done</code> state. Note that <code>map_done</code> is non-optional only because
of typing. If it were optional, the type checker would infer <code>'a = 'b</code>.</param><param><name>map_error</name>Maps the <code>`Error</code> state of the argument engine to
another state. The argument of <code>map_error</code> is the argument of the
<code>`Error</code> state.</param><param><name>map_aborted</name>Maps the <code>`Aborted</code> state of the argument engine to
another state.</param><param><name>propagate_working</name>Specifies whether changes of the <code>`Working</code>
state in the argument engine are propagated. Defaults to <code>true</code>.
If set to <code>false</code>, the mapped engine remains in <code>`Working 0</code> until
it transitions to a final state.</param></doc><param>a</param><param>b</param><arrow><label>map_done</label><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type></identifier></resolved><var>b</var></path></arrow><arrow><optional>map_error</optional><path><resolved><identifier><type>option</type></identifier></resolved><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type></identifier></resolved><var>b</var></path></arrow></path><arrow><optional>map_aborted</optional><path><resolved><identifier><type>option</type></identifier></resolved><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type></identifier></resolved><var>b</var></path></arrow></path><arrow><optional>propagate_working</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></path></arrow></arrow></arrow></arrow></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>map_engine</value><doc>Same as function</doc><arrow><label>map_done</label><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type></identifier></resolved><var>b</var></path></arrow><arrow><optional>map_error</optional><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type></identifier></resolved><var>b</var></path></arrow><arrow><optional>map_aborted</optional><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type></identifier></resolved><var>b</var></path></arrow><arrow><optional>propagate_working</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></path></arrow></arrow></arrow></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>fmap_engine</class><doc>Similar to <code>map_engine</code> but different calling conventions: The
mapping function is called when the argument engine reaches a
final state, and this state can be mapped to another final state.</doc><param>a</param><param>b</param><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>final_state</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>final_state</type></identifier></resolved><var>b</var></path></arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></path></arrow></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>fmap_engine</value><doc>Same as function<newline/>After opening <reference><element><resolved><module><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>Operators</module></resolved></element></reference>, this is also available
as operator <code>&gt;&gt;</code>, e.g.<newline/><precode>         e &gt;&gt;
           (function
             | `Done r -&gt; ...
             | `Error error -&gt; ...
             | `Aborted -&gt; ...
           )</precode></doc><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>final_state</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>final_state</type></identifier></resolved><var>b</var></path></arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></path></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>meta_engine</class><doc>maps the final state <code>s</code> to <code>`Done s</code></doc><param>a</param><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>final_state</type></identifier></resolved><var>a</var></path></path></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>meta_engine</value><doc>Same as function</doc><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>final_state</type></identifier></resolved><var>a</var></path></path></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>epsilon_engine</class><doc>This engine transitions from its initial state <code>`Working 0</code> in one
step (&quot;epsilon time&quot;) to the passed constant state. During this time
event processing will continue, so concurrently running engines can
make progress. For performance reasons, however, external resources
like file descriptors are not watched for new events.<newline/>In previous versions of this library the class was called <code>const_engine</code>.
However, this is not a constant thing. In particular, it is possible
that this engine is aborted, so the passed state is not reached.
To avoid programming errors because of the misnomer, this class has been
renamed.</doc><param>t</param><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type></identifier></resolved><var>t</var></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>t</var></path></arrow></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>epsilon_engine</value><doc>Same as function</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type></identifier></resolved><var>t</var></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>t</var></path></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>seq_engine</class><doc>This engine runs two engines in sequential order. It is called<newline/><precode>let eng_s = new seq_engine eng_a f</precode><newline/>When <code>eng_a</code> goes to the state <code>`Done arg</code>, the function <code>f</code> is called to
obtain<newline/><precode>let eng_b = f arg</precode><newline/><code>eng_b</code> runs until it is also in state <code>`Done</code>.<newline/>If <code>eng_a</code> or <code>eng_b</code> go to states <code>`Aborted</code> or <code>`Error</code>, the
sequential engine <code>eng_s</code> does so, too. If <code>eng_s</code> is aborted,
this request will be forwarded to the currently active engine,
<code>eng_a</code> or <code>eng_b</code>.<newline/>If calling <code>f</code> results in an exception, this is handled as if <code>eng_a</code>
signaled an exception.</doc><param>a</param><param>b</param><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><arrow><arrow><var>a</var><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></class></arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></path></arrow></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>seq_engine</value><doc>Same as function.<newline/>After opening <reference><element><resolved><module><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>Operators</module></resolved></element></reference>, this is also available
as operator <code>++</code>, e.g.
<precode>e1 ++ (fun r1 -&gt; e2)</precode>
(when <code>e1</code> and <code>e2</code> are engines, and <code>r1</code> is the result of <code>e1</code>).</doc><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><arrow><arrow><var>a</var><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></class></arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></path></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>qseq_engine</class><param>a</param><param>b</param><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><arrow><arrow><var>a</var><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></class></arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></path></arrow></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>qseq_engine</value><doc>Almost the same as <code>seq_engine</code>, but this version does not
propagate working state (i.e. no progress reporting).<newline/><code>qseq_engine</code> should be preferred for recursive chains of engines.</doc><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><arrow><arrow><var>a</var><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></class></arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></path></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>stream_seq_engine</class><doc><code>let se = new stream_seq_engine x0 s esys</code>: The constructed engine <code>se</code>
fetches functions <code>f : 'a -&gt; 'a #engine</code> from the stream <code>s</code>, and
runs the engines obtained by calling these functions <code>e = f x</code> one
after the other. Each function call gets the result of the previous
engine as argument. The first call gets <code>x0</code> as argument.<newline/>If one of the engines <code>e</code> transitions into an error or aborted state,
<code>se</code> will also do that. If <code>se</code> is aborted, this is passed down to
the currently running engine <code>e</code>.</doc><param>a</param><arrow><var>a</var><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/stream/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/stream/index.xml"><cmti name="Stream" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/stream.cmti" digest="55948988e71c3ee1749feb21ccec9fc9"/></xml></html></base>Stream</root></identifier>t</type></resolved><arrow><var>a</var><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class></arrow></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>stream_seq_engine</value><doc>Same as function</doc><arrow><var>a</var><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/stream/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/stream/index.xml"><cmti name="Stream" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/stream.cmti" digest="55948988e71c3ee1749feb21ccec9fc9"/></xml></html></base>Stream</root></identifier>t</type></resolved><arrow><var>a</var><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class></arrow></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>sync_engine</class><doc>This engine runs two engines in parallel, and waits until both
are <code>`Done</code> (synchronization). The product of the two <code>`Done</code> arguments
is taken as the combined result.<newline/>If one of the engines goes to the states <code>`Aborted</code> or <code>`Error</code>,
the combined engine will follow this transition. The other,
non-aborted and non-errorneous engine is aborted in this case.
<code>`Error</code> has higher precedence than <code>`Aborted</code>.<newline/>If the combined engine is aborted, this request is forwarded
to both member engines.</doc><param>a</param><param>b</param><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></class><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><tuple><var>a</var><var>b</var></tuple></path></arrow></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>sync_engine</value><doc>Same as function</doc><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></class><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><tuple><var>a</var><var>b</var></tuple></path></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>msync_engine</class><doc>Multiple synchronization:
<code>let me = new msync_engine el f x0 esys</code> - Runs the engines in <code>el</code> in
parallel, and waits until all are <code>`Done</code>. The result of <code>me</code> is
then computed by folding the results of the part engines using
<code>f</code>, with an initial accumulator <code>x0</code>.<newline/>If one of the engines goes to the states <code>`Aborted</code> or <code>`Error</code>,
the combined engine will follow this transition. The other,
non-aborted and non-errorneous engines are aborted in this case.
<code>`Error</code> has higher precedence than <code>`Aborted</code>.<newline/>If calling <code>f</code> results in an exception, this is handled as if
the part engine signals an error.<newline/>If the combined engine is aborted, this request is forwarded
to all member engines.</doc><param>a</param><param>b</param><arrow><path><resolved><identifier><type>list</type></identifier></resolved><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class></path><arrow><arrow><var>a</var><arrow><var>b</var><var>b</var></arrow></arrow><arrow><var>b</var><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></path></arrow></arrow></arrow></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>msync_engine</value><doc>Same as function</doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class></path><arrow><arrow><var>a</var><arrow><var>b</var><var>b</var></arrow></arrow><arrow><var>b</var><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></path></arrow></arrow></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>delay_engine</class><doc><code>let de = delay_engine d f esys</code>: The engine <code>e = f()</code> is created
after <code>d</code> seconds, and the result of <code>e</code> becomes the result of <code>de</code>.</doc><param>a</param><arrow><path><resolved><identifier><type>float</type></identifier></resolved></path><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class></arrow><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>delay_engine</value><doc>Same as function</doc><arrow><path><resolved><identifier><type>float</type></identifier></resolved></path><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class></arrow><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>timeout_engine</class><doc><code>timeout_engine d x e</code>: If the engine <code>e</code> finishes within <code>d</code>
seconds, the result remains unchanged. If the engine takes longer,
though, it is aborted, and the state transitions to
<code>`Error x</code></doc><param>a</param><arrow><path><resolved><identifier><type>float</type></identifier></resolved></path><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>timeout_engine</value><doc>Same as function</doc><arrow><path><resolved><identifier><type>float</type></identifier></resolved></path><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>watchdog</class><doc>A watchdog engine checks whether the argument engine makes
progress, and if there is no progress for the passed number of
seconds, the engine is aborted, and the watchdog state changes
to <code>`Error Watchdog_timeout</code>.<newline/>The current implementation is not very exact, and it may take
a little longer than the passed period of inactivity until the
watchdog recognizes inactivity.<newline/>If the argument engine terminates, the watchdog changes its state to
<code>`Done ()</code><newline/>Important note: The watchdog assumes that the <code>`Working</code> state
of the target engine really counts events that indicate progress.
This does not work for:<list><item><code>poll_process_engine</code>: there is no way to check whether a subprocess
makes progress</item><item><code>connector</code>: It is usually not possible to reflect the progress
on packet level</item><item><code>listener</code>: It is usually not possible to reflect the progress
on packet level</item></list></doc><arrow><path><resolved><identifier><type>float</type></identifier></resolved></path><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>watchdog</value><doc>Same as function</doc><arrow><path><resolved><identifier><type>float</type></identifier></resolved></path><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></value><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>serializer_t</class_type><doc>A serializer queues up engines, and starts the next engine when the
previous one finishes.</doc><param>a</param><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>serializer_t</class_type>serialized</method><doc><code>let se = serialized f</code>: Waits until all the previous engines reach
a final state, and then runs <code>e = f esys</code>.<newline/><code>se</code> enters a final state when <code>e</code> does.</doc><arrow><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path></arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path></arrow></method></signature></class_type><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>serializer</class><doc>Creates a serializer</doc><param>a</param><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>serializer_t</class_type></identifier></resolved><var>a</var></path></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>serializer</value><doc>Same as function</doc><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>serializer_t</class_type></identifier></resolved><var>a</var></path></arrow></value><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>prioritizer_t</class_type><doc>A prioritizer allows to prioritize the execution of engines: At any
time, only engines of a certain priority <code>p</code> can be executed. If an
engine with a higher priority <code>ph</code> wants to start, it prevents further
engines with priority level <code>p</code> from being started until the higher
prioritized engines with level <code>ph</code> are done. On the same priority level,
there is no limit for the number of executed engines.<newline/>Here, higher priorities have lower numbers.</doc><param>a</param><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>prioritizer_t</class_type>prioritized</method><doc><code>let pe = prioritized f p</code>: Queues up <code>f</code> on priority level <code>p</code>.
The engine <code>e = f esys</code> can start when there is no waiting
engine on a higher priority level (i.e. with a number less than
<code>p</code>), and all running engines on lower priority levels are done.<newline/><code>pe</code> enters a final state when <code>e</code> does.</doc><arrow><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path></arrow><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path></arrow></arrow></method></signature></class_type><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>prioritizer</class><doc>Creates a prioritizer</doc><param>a</param><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>prioritizer_t</class_type></identifier></resolved><var>a</var></path></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>prioritizer</value><doc>Same as function</doc><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>prioritizer_t</class_type></identifier></resolved><var>a</var></path></arrow></value><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>cache_t</class_type><doc>A cache contains a mutable value that is obtained by running an
engine.</doc><param>a</param><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>cache_t</class_type>get_engine</method><doc>Requests the value. If it is not already in the cache,
the engine for getting the value is started, and it is waited
until the value is available.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>cache_t</class_type>get_opt</method><doc>Returns the cached value if available</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>cache_t</class_type>put</method><doc>Puts a value immediately into the cache. It replaces an existing
value. If it is currently tried to obtain a new value by running
an engine, this engine is kept running, and <code>get_engine</code> will
return its result. Only future calls of <code>get_engine</code> will return
the value just put into the cache.</doc><arrow><var>a</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>cache_t</class_type>invalidate</method><doc>Invalidates the cache - if a value exists in the cache, it is removed.
If in the future the cache value is requested via <code>get_engine</code>
the engine will be started anew to get the value.<newline/>Note that (as for <code>put</code>) any already running <code>get_engine</code> is not
interrupted.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>cache_t</class_type>abort</method><doc>Any engine running to get the cache value is aborted, and the contents
of the cache are invalidated. Note that also the engines returned
by <code>get_engine</code> are aborted.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method></signature></class_type><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>cache</class><doc><code>new cache f esys</code>: A cache that runs <code>f esys</code> to obtain values</doc><param>a</param><arrow><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path></arrow><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>cache_t</class_type></identifier></resolved><var>a</var></path></arrow></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>cache</value><doc>Same as function</doc><arrow><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path></arrow><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>cache_t</class_type></identifier></resolved><var>a</var></path></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_mixin</class><doc>A useful class fragment that implements <code>state</code> and
<code>request_notification</code>.</doc><param>t</param><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type></identifier></resolved><var>t</var></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><signature><method><method><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_mixin</class>state</method><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type></identifier></resolved><var>t</var></path></method><method><method><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_mixin</class>set_state</method><private/><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type></identifier></resolved><var>t</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_mixin</class>request_notification</method><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_mixin</class>notify</method><private/><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_mixin</class>event_system</method><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path></method></signature></arrow></arrow></class><module><module><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>Operators</module><doc>Handy operators: <code>++</code>, <code>&gt;&gt;</code>, and <code>eps_e</code></doc><type><signature><comment>The most important operators. This module should be opened.</comment><value><value><module><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>Operators</module>(++)</value><doc>Another name for <code>qseq_engine</code>. Use this operator to run engines in
sequence:<newline/><precode>	    e1 ++ (fun r1 -&gt; e2) ++ (fun r2 -&gt; e3) ++ ...</precode><newline/>Here <code>rK</code> is the result of engine <code>eK</code>.<newline/>Change in OCamlnet-3.6.4: <code>++</code> is now <code>qseq_engine</code>, and no longer
<code>seq_engine</code>, and hence it does not support progress reporting anymore.
Redefine <code>++</code> as <code>seq_engine</code> in your own code if you need the old
behavior.</doc><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><arrow><arrow><var>a</var><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></class></arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>Operators</module>(&gt;&gt;)</value><doc>Another name for <code>fmap_engine</code>. Use this operator to map the
final value of an engine:<newline/><precode>	    e &gt;&gt; (function `Done x -&gt; ... | `Error e -&gt; ... | `Aborted -&gt; ...)</precode></doc><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></class><arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>final_state</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>final_state</type></identifier></resolved><var>b</var></path></arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>b</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>Operators</module>eps_e</value><doc>Same as <code>epsilon_engine</code></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type></identifier></resolved><var>t</var></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>t</var></path></arrow></arrow></value></signature></type></module><comment><title level="1">Basic I/O engines</title></comment><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>poll_engine</class><doc>This engine waits until one of the passed operations can be
carried out, or until one of the operations times out.
In these cases, the state of the engine changes to <code>`Done ev</code>, where
<code>ev</code> is the corresponding event.<newline/>The argument list enumerates the operations to watch for. For every
operation there may be a positive timeout value, or a negative number
to indicate that no timeout is specified.<newline/>After one event has been caught, the engine terminates operation.
The method <code>restart</code> can be called to activate it again (with the
same event condition, and the same notification list). See the
description of <code>restart</code> for possible problems.<param><name>extra_match</name>This function is called when an <code>Extra</code> event is
found. If the function returns <code>true</code> for the argument exception
of <code>Extra</code>, the event is caught; otherwise it is rejected.</param></doc><arrow><optional>extra_match</optional><path><resolved><identifier><type>option</type></identifier></resolved><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>operation</type></resolved></path><path><resolved><identifier><type>float</type></identifier></resolved></path></tuple></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event</type></resolved></path></path></inherit><comment><title level="1">Additional methods</title></comment><method><method><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>poll_engine</class>restart</method><doc>Activate the engine again when it is already in a final state.
This method violates the engine protocol, and should be used
with care; it is not allowed to leave a final state.<newline/>The notification lists are kept, but note that observers often
detach when final states are reached. This may cause problems.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>poll_engine</class>group</method><doc>Returns the group the engine is member of</doc><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>group</type></resolved></path></method></signature></arrow></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>input_engine</class><doc>Generic input engine for reading from a file descriptor:
<code>let e = new input_engine f fd tmo</code> - Waits until the file descriptor
becomes readable, and calls then <code>let x = f fd</code> to read from the
descriptor. The result <code>x</code> is the result of the engine.<newline/>If the file descriptor does not become readable within <code>tmo</code> seconds,
the resulting engine transitions to <code>`Error Timeout</code>.<newline/>Use this class to construct engines reading via <code>Unix.read</code> or
comparable I/O functions:<newline/><precode>      let read_engine fd tmo esys =
        new input_engine (fun fd -&gt;
                            let buf = String.create 4096 in
                            let n = Unix.read fd buf 0 (String.length buf) in
                            String.sub buf 0 n
                         )
                         fd tmo esys</precode><newline/>This engine returns the read data as string.<newline/>See also <reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_io/index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root></identifier>input_e</value></resolved></element></reference> for a more generic way of reading with
engines.</doc><param>a</param><arrow><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><var>a</var></arrow><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><path><resolved><identifier><type>float</type></identifier></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>output_engine</class><doc>Generic output engine for writing to a file descriptor:
<code>let e = new output_engine f fd tmo</code> - Waits until the file descriptor
becomes writable, and calls then <code>let x = f fd</code> to write to the
descriptor. The result <code>x</code> is the result of the engine.<newline/>If the file descriptor does not become writable within <code>tmo</code> seconds,
the resulting engine transitions to <code>`Error Timeout</code>.<newline/>Use this class to construct engines writing via <code>Unix.single_write</code> or
comparable I/O functions:<newline/><precode>      let write_engine fd s tmo esys =
        new output_engine (fun fd -&gt;
                             Unix.single_write fd s 0 (String.length s)
                          )
                          fd tmo esys</precode><newline/>This engine returns the number of written bytes.<newline/>See also <reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_io/index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root></identifier>output_e</value></resolved></element></reference> for a more generic way of writing with
engines.</doc><param>a</param><arrow><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><var>a</var></arrow><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><path><resolved><identifier><type>float</type></identifier></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>poll_process_engine</class><doc><bold>This class is deprecated!</bold> Use the classes in <reference><element><root>Shell_uq</root></element></reference> instead.<newline/>This engine waits until the process with the ID <code>pid</code> terminates.
When this happens, the state of the engine changes to
<code>`Done</code>, and the argument of <code>`Done</code> is the process status.<newline/>The engine does not catch stopped processes.<newline/>The engine checks the process status every <code>period</code> seconds, and
whenever there is a <code>Signal</code> event on the queue. The idea of the
latter is that the user of this engine can increase the responsiveness
by defining a signal handler for SIGCHLD signals (the handler need
not to perform any special action, it must just be defined). When
the sub process terminates, a SIGCHLD signal is sent to the current
process. If the event loop happens to wait for new conditions (which
is usually very likely), a <code>Signal</code> event will be generated, and
the engine will check the process status very soon. Note that it is
not guaranteed that a terminating process triggers a <code>Signal</code> event,
although it is very likely.<newline/>You can define an empty SIGCHLD handler with:<newline/><precode>Sys.set_signal Sys.sigchld (Sys.Signal_handle (fun _ -&gt; ()))</precode><param><name>period</name>Every <code>period</code> seconds the process status is checked.
Defaults to 0.1 seconds.</param></doc><arrow><optional>period</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>float</type></identifier></resolved></path></path><arrow><label>pid</label><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>process_status</type></resolved></path></path></arrow></arrow></arrow></class><comment><title level="2">More I/O</title><newline/>The module <reference><element><root>Uq_io</root></element></reference> provides a bunch of functions to read and write
data via various &quot;devices&quot;. All these functions return engines, and
are easy to use. Devices can be file descriptors, but also other
data structures. In particular, there is also support for buffered I/O
and for reading line-by-line from an input device.</comment><comment><title level="1">Transfer engines</title></comment><comment>Transfer engines copy data between file descriptors. This kind
of engine is likely to be declared as deprecated in
the future. If possible, one should use multiplex controllers
(see below), and for copying streams the generic copier
<reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_io/index.xml"><cmti name="Uq_io" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_io.cmti" digest="984e3954a7772469921ddd3d31a1c224"/></xml></base>Uq_io</root></identifier>copy_e</value></resolved></element></reference> is a better choice.<newline/>The pure types <code>async_in_channel</code> and <code>async_out_channel</code> have been
proven to be useful for bridging with <reference><element><root>Netchannels</root></element></reference>.</comment><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_out_channel</class_type><doc>An asynchrounous output channel provides methods to output data to
a stream descriptor. It is based on <code>raw_out_channel</code>, which is
defined by the Ocamlnet module <code>Netchannels</code> (see there for an
introduction into the idea of using objects as I/O channels).
An asynchronous channel can indicate that there is no space in the
output buffer. Furthermore, one can request notification in the case
that there is no space or again space in the output buffer.</doc><signature><comment><title level="1">Methods from <code>raw_out_channel</code></title></comment><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_out_channel</class_type>output</method><doc><code>output s k n</code>: Writes the substring of <code>s</code> beginning at index
<code>k</code> with length <code>n</code> into the channel. The channel is free to
accept only a portion of the string (or even nothing), and
returns the number of bytes it accepts.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_out_channel</class_type>close_out</method><doc>Closes the channel</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_out_channel</class_type>pos_out</method><doc>Returns the number of characters output into the channel</doc><path><resolved><identifier><type>int</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_out_channel</class_type>flush</method><doc>Flushes the channel. Asynchronous channels usually ignore
flush requests. A potential meaning of flushing could be that
no more data are accepted until the current buffer is completely
processed. Implementing this is optional.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><comment><title level="1">Additional control methods</title></comment><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_out_channel</class_type>can_output</method><doc>Whether output is possible, i.e. the output method accepts at least
one byte</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_out_channel</class_type>request_notification</method><doc>After the notification has been requested, the passed function is
be called whenever <code>can_output</code> changes its value (or might change
its value). The function returns <code>true</code> if there is still interest
in notification, and <code>false</code> if notification must be disabled.<newline/>There can be any number of parallel active notifications. It is
allowed that a notification callback requests further notifications.</doc><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_in_channel</class_type><doc>An asynchrounous input channel provides methods to input data from
a stream descriptor. It is based on <code>raw_in_channel</code>, which is
defined by the Ocamlnet module <code>Netchannels</code> (see there for an
introduction into the idea of using objects as I/O channels).
An asynchronous channel can indicate that there is no data in the
input buffer. Furthermore, one can request notification in the case
that there is no data or again data in the input buffer.</doc><signature><comment><title level="1">Methods from <code>raw_in_channel</code></title></comment><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_in_channel</class_type>input</method><doc><code>input s k n</code>: Reads channel data into the substring of <code>s</code>
beginning at index <code>k</code> with length <code>n</code>. The channel is free to
fill only a portion of the string (or even nothing). The method
returns the number of bytes actually read.<newline/>The exception <code>End_of_file</code> indicates that the end of the channel
is reached. The return value <code>0</code>, however, means that no data
could be read.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_in_channel</class_type>close_in</method><doc>Closes the channel</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_in_channel</class_type>pos_in</method><doc>Returns the number of characters read from the channel</doc><path><resolved><identifier><type>int</type></identifier></resolved></path></method><comment><title level="1">Additional control methods</title></comment><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_in_channel</class_type>can_input</method><doc>Whether input is possible, i.e. the input method gets at least
one byte, or can signal <code>End_of_file</code>.</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_in_channel</class_type>request_notification</method><doc>After the notification has been requested, the passed function is
be called whenever <code>can_input</code> changes its value (or might change
its value). The function returns <code>true</code> if there is still interest
in notification, and <code>false</code> if notification must be disabled.<newline/>There can be any number of parallel active notifications. It is
allowed that a notification callback requests further notifications.</doc><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method></signature></class_type><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>pseudo_async_out_channel</class><doc>Takes a <reference><element><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>raw_out_channel</class_type></resolved></element></reference> as an asynchronous channel.
It is always possible to output to this channel.</doc><arrow><class><dot><resolved><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier></resolved>#raw_out_channel</dot></class><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_out_channel</class_type></identifier></resolved></path></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>pseudo_async_in_channel</class><doc>Takes a <reference><element><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>raw_in_channel</class_type></resolved></element></reference> as an asynchronous channel.
It is always possible to input from this channel.</doc><arrow><class><dot><resolved><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier></resolved>#raw_in_channel</dot></class><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_in_channel</class_type></identifier></resolved></path></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>receiver</class><doc>This engine copies all data from the <code>src</code> file descriptor to the
<code>dst</code> output channel. The engine attaches immediately to the
event system, and detaches automatically.<newline/>By default, both the file descriptor and the output channel
are closed when the engine stops operation, either successfully
or because of an error.<newline/>The semantics of the engine is undefined if <code>src</code> is not a
stream-oriented descriptor.<newline/>The engine goes to <code>`Error</code> state when either reading from <code>src</code>
or writing to <code>dst</code> raises an unexpected exception.<newline/>For every file descriptor event, the state is advanced from
<code>`Working n</code> to <code>`Working (n+1)</code>.<newline/>TODO: This class cannot yet cope with Win32 named pipes.<param><name>close_src</name>Whether to close <code>src</code> when the engine stops
(default: <code>true</code>)</param><param><name>close_dst</name>Whether to close <code>dst</code> when the engine stops
(default: <code>true</code>)</param></doc><arrow><label>src</label><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><label>dst</label><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_out_channel</class_type></identifier></resolved></class><arrow><optional>close_src</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><optional>close_dst</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></arrow></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>sender</class><doc>This engine copies all data from the <code>src</code> input channel to the
<code>dst</code> file descriptor. The engine attaches immediately to the
event system, and detaches automatically.<newline/>By default, both the file descriptor and the output channel
are closed when the engine stops operation, either successfully
or because of an error.<newline/>The semantics of the engine is undefined if <code>dst</code> is not a
stream-oriented descriptor.<newline/>The engine goes to <code>`Error</code> state when either reading from <code>src</code>
or writing to <code>dst</code> raises an unexpected exception.<newline/>For every file descriptor event, the state is advanced from
<code>`Working n</code> to <code>`Working (n+1)</code>.<newline/>TODO: This class cannot yet cope with Win32 named pipes.<param><name>close_src</name>Whether to close <code>src</code> when the engine stops
(default: <code>true</code>)</param><param><name>close_dst</name>Whether to close <code>dst</code> when the engine stops
(default: <code>true</code>)</param></doc><arrow><label>src</label><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_in_channel</class_type></identifier></resolved></class><arrow><label>dst</label><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><optional>close_src</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><optional>close_dst</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></arrow></arrow></arrow></class><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_out_channel_engine</class_type><doc>Combination of engine + async_out_channel</doc><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></inherit><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_out_channel</class_type></identifier></resolved></path></inherit></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_in_channel_engine</class_type><doc>Combination of engine + async_in_channel</doc><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></inherit><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_in_channel</class_type></identifier></resolved></path></inherit></signature></class_type><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>output_async_descr</class><doc>This engine implements an <code>async_out_channel</code> for the output
descriptor <code>dst</code>. The engine provides an internal buffer to
reduce the number of blocked output operations; by default there
is even no limit for the growth of the buffer, and because of this
the channel never blocks (<code>can_output</code> is always <code>true</code>).<newline/>The engine attaches immediately to the event system, and detaches
automatically. By default, the file descriptor is closed when the
engine stops operation, either successfully or because of an
error.<newline/>If the buffer is full, the class accepts no more data until
there is again free space in the buffer. This means that writers
must be prepared that <code>can_output</code> returns <code>false</code>, and that
the <code>output</code> method returns 0. The buffer can only get &quot;full&quot;
if the <code>buffer_size</code> argument is passed.<newline/>The notification mechanism is shared by the &quot;engine nature&quot; and
by the &quot;channel nature&quot; of this class: If either the <code>state</code> or
<code>can_output</code> change their values, the notification callbacks
are invoked.<newline/>The semantics of the engine is undefined if <code>dst</code> is not a
stream-oriented descriptor.<newline/>TODO: This class cannot yet cope with Win32 named piped.<param><name>buffer_size</name>Limits the size of the buffer</param><param><name>close_dst</name>Whether to close <code>dst</code> when the engine stops
(default: <code>true</code>)</param></doc><arrow><label>dst</label><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><optional>buffer_size</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><optional>close_dst</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_out_channel_engine</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>input_async_descr</class><doc>The corresponding class for asynchronous input channels.<newline/>TODO: This class cannot yet cope with Win32 named piped.</doc><arrow><label>src</label><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><optional>buffer_size</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><optional>close_src</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_in_channel_engine</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></class><type><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>copy_task</type><doc>Specifies the task the <code>copier</code> class has to do:<newline/><list><item><code>`Unidirectional(src,dst)</code>: Data from <code>src</code> are copied to <code>dst</code>.
EOF of <code>src</code> causes that both descriptors are closed.</item><item><code>`Uni_socket(src,dst)</code>: Data from <code>src</code> are copied to <code>dst</code>.
EOF of <code>src</code> causes that <code>dst</code> is shut down for sending; all descriptors
remain open. It is required that <code>dst</code> is a socket.</item><item><code>`Bidirectional(bi1,bi2)</code>: Data from <code>bi1</code> are copied to <code>bi2</code>,
and data from <code>bi2</code> are copied to <code>bi1</code>. EOF of one descriptor
causes that the other descriptor is shut down for sending.
When both descriptors are at EOF, both are closed.
It is required that <code>bi1</code> and <code>bi2</code> are sockets.</item><item><code>`Tridirectional(bi,dst,src)</code>: Data from <code>bi</code> are copied to <code>dst</code>,
and data from <code>src</code> are copied to <code>bi</code> (i.e. a bidirectional
descriptor is split up into two unidirectional descriptors).
EOF of <code>bi</code> causes that <code>dst</code> is closed. EOF of <code>src</code> causes
that <code>bi</code> is shut down for sending. EOF in both directions
causes that all descriptors are closed. It is required that
<code>bi</code> is a socket.</item></list></doc><poly_variant><fixed/><constructor>Unidirectional<tuple><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path></tuple></constructor><constructor>Uni_socket<tuple><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path></tuple></constructor><constructor>Bidirectional<tuple><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path></tuple></constructor><constructor>Tridirectional<tuple><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path></tuple></constructor></poly_variant></type><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>copier</class><doc>This engine copies data between file descriptors as specified by
the <code>copy_task</code> argument.<newline/>The task is done when all input descriptors are at EOF. See
the description of <code>copy_task</code> for details, especially whether
the descriptors are closed or not.<newline/>On error or abort, the descriptors are only closed if they
had been closed on regular EOF.<newline/>The semantics of the engine is undefined if one of the descriptors
is not stream-oriented.<newline/>TODO: This class cannot yet cope with Win32 named piped.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>copy_task</type></identifier></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></class><comment><title level="1">Socket engines</title></comment><comment>Note that Win32 named pipes are also supported by the following
API's, although they are not sockets. These pipes have a feature
set comparable to Unix domain sockets.</comment><type><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>inetspec</type><poly_variant><fixed/><constructor>Sock_inet<tuple><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>socket_type</type></resolved></path><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>inet_addr</type></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></tuple></constructor><constructor>Sock_inet_byname<tuple><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>socket_type</type></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></tuple></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>sockspec</type><doc>Extended names for socket addresses. Currently, these naming schemes
are supported:<list><item><code>`Sock_unix(stype,path)</code>: Names the Unix domain socket at <code>path</code>.
The socket type <code>stype</code> is an auxiliary piece of information, but
not a distinguishing part of the name. <code>path = &quot;&quot;</code> refers to
anonymous sockets. Otherwise, the <code>path</code> must be an absolute path name.</item><item><code>`Sock_inet(stype,addr,port)</code>: Names the Internet socket of type
<code>stype</code> bound to the IP address <code>addr</code> and the <code>port</code>.
If <code>stype = Unix.SOCK_STREAM</code>, a TCP socket is meant, and if
<code>stype = Unix.SOCK_DGRAM</code>, a UDP socket is meant. It is allowed
that <code>addr = Unix.inet_addr_any</code>. If <code>port = 0</code>, the name is to
be considered as incomplete.</item><item><code>`Sock_inet_byname(stype,name,port)</code>: Names the Internet socket of
type <code>stype</code> bound to the IP address corresponding to the
<code>name</code>, and bound to the <code>port</code>. It is unspecified which naming
service is used to resolve <code>name</code> to an IP address, and how it is
used. If the <code>name</code> cannot be resolved, no socket is meant; this
is usually an error. <code>stype</code> is interpreted as for <code>`Sock_inet</code>.
If <code>port = 0</code>, the name is to be considered as incomplete.</item></list>It is currently not possible to name IP sockets that are bound to
several IP addresses but not all IP addresses of the host.</doc><poly_variant><fixed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>inetspec</type></identifier></resolved></path></type><constructor>Sock_unix<tuple><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>socket_type</type></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></tuple></constructor></poly_variant></type><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>sockspec_of_sockaddr</value><doc>Converts a normal socket address to the extended form</doc><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>socket_type</type></resolved></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>sockaddr</type></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>sockspec</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>sockspec_of_socksymbol</value><doc>Converts a <reference><element><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netsockaddr/index.xml"><cmti name="Netsockaddr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netsockaddr.cmti" digest="514bc9294568dc3facaf49b96623c337"/></xml></base>Netsockaddr</root></identifier>socksymbol</type></resolved></element></reference> to this form</doc><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>socket_type</type></resolved></path><arrow><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netsockaddr/index.xml"><cmti name="Netsockaddr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netsockaddr.cmti" digest="514bc9294568dc3facaf49b96623c337"/></xml></base>Netsockaddr</root></identifier>socksymbol</type></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>sockspec</type></identifier></resolved></path></arrow></arrow></value><comment><title level="2">Client sockets</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>connect_address</type><doc>Specifies the service to connect to:<newline/><list><item><code>`Socket(addr,opts)</code>: Connect to the passed socket address</item><item><code>`Command(cmd,handler)</code>: The <code>cmd</code> is started with the shell,
and <code>stdin</code> and <code>stdout</code> are used to transfer data to the
process and from the process, respectively. Only <code>SOCK_STREAM</code>
type is supported. Note that the passed file descriptors are
normal pipes, not sockets (so the descriptors can be individually
closed).<newline/>There is not any kind of error detection, so the command should
be failsafe. <code>stderr</code> of the command is connected with <code>stderr</code> of
the caller process.<newline/>No provisions are taken to wait for the process; this is the
task of the caller. After the process has been started, the
<code>handler</code> is invoked with the process ID and the event system
to give the caller a chance to arrange that the process will be
waited for.</item><item><code>`W32_pipe(mode,name)</code>: A Win32 named pipe</item></list></doc><poly_variant><fixed/><constructor>Socket<tuple><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>sockspec</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>connect_options</type></identifier></resolved></path></tuple></constructor><constructor>Command<tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></tuple></constructor><constructor>W32_pipe<tuple><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netsys/netsys_win32/index.xml"><cmti name="Netsys_win32" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_win32.cmti" digest="02161f9169b76f686b05a51ed2d9357c"/></xml></base>Netsys_win32</root></identifier>pipe_mode</type></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></tuple></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>connect_options</type><record><field><field><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>connect_options</type>conn_bind</field><doc>Bind the connecting socket to this address (same family as the
connected socket required). <code>None</code>: Use an anonymous port.</doc><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>sockspec</type></identifier></resolved></path></path></field></record></type><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>default_connect_options</value><doc>Returns the default options</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>connect_options</type></identifier></resolved></path></value><type><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>connect_status</type><doc>This type corresponds with <reference><element><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>connect_address</type></resolved></element></reference>: An engine
connecting with an address `X will return a status of `X.<newline/><list><item><code>`Socket(fd,addr)</code>: <code>fd</code> is the client socket connected with the
service. <code>addr</code> is the socket address of the client that must be
used by the server to reach the client.</item><item><code>`Command(fd, pid)</code>: <code>fd</code> is the Unix domain socket connected with
the running command. <code>pid</code> is the process ID.</item><item><code>`W32_pipe fd</code>: <code>fd</code> is the proxy descriptor of the connected
Win32 named pipe endpoint. See <reference><element><root>Netsys_win32</root></element></reference> how to get the
<code>w32_pipe</code> object to access the pipe. The proxy descriptor <bold>cannot</bold>
be used for I/O.</item></list></doc><poly_variant><fixed/><constructor>Socket<tuple><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>sockspec</type></identifier></resolved></path></tuple></constructor><constructor>Command<tuple><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></tuple></constructor><constructor>W32_pipe<path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path></constructor></poly_variant></type><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>client_endpoint</value><doc>Returns the client endpoint contained in the <code>connect_status</code></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>connect_status</type></identifier></resolved></path><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>client_socket</value><doc>For backward compatibility. <bold>Deprecated name</bold> for <code>client_endpoint</code></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>connect_status</type></identifier></resolved></path><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path></arrow></value><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>client_endpoint_connector</class_type><doc>This class type provides engines to connect to a service. In order
to get and activate such an engine, call <code>connect</code>.</doc><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>client_endpoint_connector</class_type>connect</method><doc>Instantiates an engine that connects to the endpoint given by the
<code>connect_address</code> argument. If successful, the state of the engine
changes to <code>`Done(status)</code> where <code>status</code> contains the socket
details. The connection is established in the background.<newline/>The type of status will correspond to the type of connect address
(e.g. a <code>`Socket</code> address will return a <code>`Socket</code> status).<newline/>The close-on-exec flag of the created socket descriptor is always set.
The socket descriptor is always in non-blocking mode.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>connect_address</type></identifier></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>connect_status</type></identifier></resolved></path></path></arrow></arrow></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>client_socket_connector</class_type><doc>For backward compatibility. <bold>Deprecated name</bold> for
<code>client_endpoint_connector</code></doc><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>client_endpoint_connector</class_type></identifier></resolved></path></class_type><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>connector</value><doc>This engine connects to a socket as specified by the <code>connect_address</code>,
optionally using the <code>proxy</code>, and changes to the state
<code>`Done(status)</code> when the connection is established.<newline/>If the <code>proxy</code> does not support the <code>connect_address</code>, the class
will raise <code>Addressing_method_not_supported</code>.<newline/>The descriptor <code>fd</code> (part of the <code>connect_status</code>) is in non-blocking mode,
and the close-on-exec flag is set.
It is the task of the caller to close this descriptor.<newline/>The engine attaches automatically to the event system, and detaches
when it is possible to do so. This depends on the type of the
connection method. For direct socket connections, the engine can
often detach immediately when the conection is established. For proxy
connections it is required that the engine
copies data to and from the file descriptor. In this case, the
engine detaches when the file descriptor is closed.<newline/>It is possible that name service queries block execution.<newline/>If name resolution fails, the engine will enter
<code>`Error(Uq_resolver.Host_not_found name)</code>. This is <bold>new since
Ocamlnet-3.3</bold> - before this version, the exception was simply
<code>Not_found</code>.</doc><arrow><optional>proxy</optional><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>client_socket_connector</class_type></identifier></resolved></class><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>connect_address</type></identifier></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>connect_status</type></identifier></resolved></path></path></arrow></arrow></arrow></value><comment><bold>Example</bold> of using <code>connector</code>: This engine <code>e</code> connects to the
&quot;echo&quot; service as provided by inetd, sends a line of data to it,
and awaits the response.<newline/><precode>	let e =
	  Uq_engines.connector
	    (`Socket(`Sock_inet_byname(Unix.SOCK_STREAM, &quot;localhost&quot;, 7),
		     Uq_engines.default_connect_options))
	    esys
	  ++ (fun cs -&gt;
		match cs with
		  | `Socket(fd,_) -&gt;
		      let mplex =
			Uq_engines.create_multiplex_controller_for_connected_socket
			  ~supports_half_open_connection:true
			  fd esys in
		      let d_unbuf = `Multiplex mplex in
		      let d = `Buffer_in(Uq_io.create_in_buffer d_unbuf) in
		      Uq_io.output_string_e d_unbuf &quot;This is line1\n&quot;
		      ++ (fun () -&gt;
			    Uq_io.input_line_e d 
			    ++ (fun s -&gt;
				  print_endline s;
				  eps_e (`Done()) esys
			       )
			 )
		  | _ -&gt; assert false
	     )</precode></comment><comment><title level="2">Server sockets</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>listen_address</type><doc>Specifies the resource to listen on:<newline/><list><item><code>`Socket(addr,opts)</code>: It is listened on a socket with address <code>addr</code></item><item><code>`W32_pipe(mode,name,opts)</code>: It is listened on a pipe server with
<code>name</code> which accepts pipe connections in <code>mode</code>.</item></list></doc><poly_variant><fixed/><constructor>Socket<tuple><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>sockspec</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>listen_options</type></identifier></resolved></path></tuple></constructor><constructor>W32_pipe<tuple><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netsys/netsys_win32/index.xml"><cmti name="Netsys_win32" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_win32.cmti" digest="02161f9169b76f686b05a51ed2d9357c"/></xml></base>Netsys_win32</root></identifier>pipe_mode</type></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>listen_options</type></identifier></resolved></path></tuple></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>listen_options</type><record><field><field><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>listen_options</type>lstn_backlog</field><doc>The length of the queue of not yet accepted
connections.</doc><path><resolved><identifier><type>int</type></identifier></resolved></path></field><field><field><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>listen_options</type>lstn_reuseaddr</field><doc>Whether to allow that the address can be
immediately reused after the previous listener
has its socket shut down. (Only for Internet
sockets.)</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></field></record></type><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>default_listen_options</value><doc>Returns the default options</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>listen_options</type></identifier></resolved></path></value><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>server_endpoint_acceptor</class_type><doc>This class type is for service providers that listen for connections.
By calling <code>accept</code>, one gets an engine that waits for the next
connection, and establishes it.<newline/>There are services that can only accept one connection for a
certain contact address. In this case <code>accept</code> must only be called
once. Normally, services can accept any number of connections
(multiplexing), and it is allowed to call <code>accept</code> again after
the previous accept engine was successful.</doc><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>server_endpoint_acceptor</class_type>server_address</method><doc>The contact address under which the clients can establish new
connections with this server.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>connect_address</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>server_endpoint_acceptor</class_type>multiple_connections</method><doc>Whether it is possible to accept multiple connections</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>server_endpoint_acceptor</class_type>accept</method><doc>Instantiates an engine that accepts connections on the listening
endpoint.<newline/>If the connection is successfully established, the state of the engine
changes to <code>`Done(fd,addr)</code> where <code>fd</code> is the connected file descriptor,
and where <code>addr</code> (if not-<code>None</code>) is the endpoint address of the
connecting client (from the server's perspective). Such addresses are
only supported for Internet endpoints. If a proxy is used to accept
the connections, the returned address is that from the proxy's
view, and usually different from what <code>Unix.getpeername</code> returns.<newline/>The close-on-exec flag of the created endpoint descriptor is always set.
The endpoint descriptor is always in non-blocking mode.<newline/>It is allowed to shut down <code>fd</code> for sending, and it is required to
close <code>fd</code> after all data transfers have been performed.<newline/>A call of <code>accept</code> allows it only to establish one connection at a time.
However, it is allowed to call <code>accept</code> several times to accept several
connections, provided the acceptor supports this (returned by
<code>multiple_connections</code>). It is only allowed to call <code>accept</code> again
when the previous engine was successful.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><tuple><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>inetspec</type></identifier></resolved></path></path></tuple></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>server_endpoint_acceptor</class_type>shut_down</method><doc>The server endpoint is shut down such that no further connections
are possible. It is required to call this method even for acceptors
that do not support multiple connections. It is also required to
call this method when an <code>accept</code> was not successful.<newline/>If there is a engine waiting for connections, it is aborted.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>server_socket_acceptor</class_type><doc>For backward compatibility. <bold>Deprecated name</bold> for
<code>server_endpoint_acceptor</code></doc><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>server_endpoint_acceptor</class_type></identifier></resolved></path></class_type><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>direct_acceptor</class><doc>An implementation of <code>server_endpoint_acceptor</code> for sockets and Win32
named pipes. For sockets, the passed descriptor must be the master
socket. For Win32 named pipes, the passed descriptor must be the
proxy descriptor of the pipe server..</doc><arrow><optional>close_on_shutdown</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><optional>preclose</optional><path><resolved><identifier><type>option</type></identifier></resolved><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>server_endpoint_acceptor</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>direct_socket_acceptor</class><doc>For backward compatibility. <bold>Deprecated name</bold> for <code>direct_acceptor</code></doc><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>server_endpoint_acceptor</class_type></identifier></resolved></path></arrow></arrow></class><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>server_endpoint_listener</class_type><doc>This class type represents factories for service providers</doc><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>server_endpoint_listener</class_type>listen</method><doc>Instantiates an engine that listens for connections on the socket given
by the <code>listen_address</code> argument. If successful, the state of the engine
changes to <code>`Done(acc)</code> where <code>acc</code> is the acceptor object guiding
you through further operation of the socket (see above).</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>listen_address</type></identifier></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>server_endpoint_acceptor</class_type></identifier></resolved></path></path></arrow></arrow></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>server_socket_listener</class_type><doc>For backward compatibility. <bold>Deprecated name</bold> for
<code>server_endpoint_listener</code></doc><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>server_endpoint_listener</class_type></identifier></resolved></path></class_type><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>listener</value><doc>This engine creates a server socket listening on the <code>listen_address</code>.
If passed, the <code>proxy</code> is used to create the server socket.<newline/>On success, the engine goes to state <code>`Done acc</code>, where <code>acc</code> is
the acceptor object (see above). The acceptor object can be used
to accept incoming connections.</doc><arrow><optional>proxy</optional><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>server_socket_listener</class_type></identifier></resolved></class><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>listen_address</type></identifier></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>server_socket_acceptor</class_type></identifier></resolved></path></path></arrow></arrow></arrow></value><comment><title level="2">Datagrams</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>datagram_type</type><doc>- <code>`Unix_dgram</code>: Datagrams over Unix domain sockets<list><item><code>`Inet_udp</code>: Internet v4 UDP protocol</item><item><code>`Inet6_udp</code>: Internet v6 UDP protocol</item></list></doc><poly_variant><fixed/><constructor>Unix_dgram<constant/></constructor><constructor>Inet_udp<constant/></constructor><constructor>Inet6_udp<constant/></constructor></poly_variant></type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>wrapped_datagram_socket</class_type><doc>A <code>wrapped_datagram_socket</code> allows datagrams to be sent via proxies.
It provides versions of the <code>sendto</code> and <code>recvfrom</code> functions that
use extended socket names (which are proxy-friendly).</doc><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>wrapped_datagram_socket</class_type>descriptor</method><doc>The underlying file descriptor. This descriptor must not be used
to transfer data (<code>Unix.send(to)</code>, <code>Unix.recv(from)</code>, etc.), because the
descriptor may be connected with a proxy, and the socket addresses
may be wrong that are used by the low-level socket functions.
The right way is to use the methods below to transfer data. It is
allowed, however, to pass the descriptor to <code>Unix.select</code>, and to check
whether transfers are possible. It is also allowed to set or clear
non-blocking mode, and the close-on-exec flag, and to modify the
socket options.</doc><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>wrapped_datagram_socket</class_type>sendto</method><doc>Send data over the (unconnected) socket</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>msg_flag</type></resolved></path></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>sockspec</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>wrapped_datagram_socket</class_type>recvfrom</method><doc>Receive data from the (unconnected) socket. The method will
raise EAGAIN if the message cannot be processed for some reason,
even if the socket is in blocking mode. In this case, the received
message is discarded.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>msg_flag</type></resolved></path></path><tuple><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>sockspec</type></identifier></resolved></path></tuple></arrow></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>wrapped_datagram_socket</class_type>shut_down</method><doc>Close the descriptor, shuts down any further needed resources</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>wrapped_datagram_socket</class_type>datagram_type</method><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>datagram_type</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>wrapped_datagram_socket</class_type>socket_domain</method><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>socket_domain</type></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>wrapped_datagram_socket</class_type>socket_type</method><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>socket_type</type></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>wrapped_datagram_socket</class_type>socket_protocol</method><path><resolved><identifier><type>int</type></identifier></resolved></path></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>datagram_socket_provider</class_type><doc>This is a factory for <code>wrapped_datagram_socket</code> objects.</doc><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>datagram_socket_provider</class_type>create_datagram_socket</method><doc>Creates an engine that creates a <code>wrapped_datagram_socket</code> object
and that sets up any further resources the objects needs.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>datagram_type</type></identifier></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>wrapped_datagram_socket</class_type></identifier></resolved></path></path></arrow></arrow></method></signature></class_type><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>datagram_provider</value><doc>This engine creates a datagram socket as demanded by the <code>datagram_type</code>,
optionally using <code>proxy</code> for sending and receiving datagrams.<newline/>The socket is unconnected.<newline/>The socket is in non-blocking mode, and the close-on-exec flag is
set.</doc><arrow><optional>proxy</optional><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>datagram_socket_provider</class_type></identifier></resolved></class><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>datagram_type</type></identifier></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine</class_type></identifier></resolved><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>wrapped_datagram_socket</class_type></identifier></resolved></path></path></arrow></arrow></arrow></value><comment><title level="1">Multiplex Controllers</title></comment><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type><doc>A <code>multiplex_controller</code> is a quite low-level device to abstract
bidirectional socket connections. It is independent of any real
device.<newline/>There can be a reader, a writer (or both), or alternatively,
the shutdown process may be in progress. One cannot have more than
one reader and more than more writer.</doc><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>alive</method><doc>If the controller is alive, the socket is not yet completely down.</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>mem_supported</method><doc>Whether <code>start_mem_reading</code> and <code>start_mem_writing</code> are possible</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>event_system</method><doc>Returns the event system</doc><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>reading</method><doc>True iff there is a reader</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>start_reading</method><doc>Start reading from the connection. When data is available, the
<code>when_done</code> callback is invoked. The int is the number of read
bytes. It is 0 if an error occurred which is indicated by the
exception. The exception <code>End_of_file</code> is used when the end of the
data stream is reached. The exception <code>Cancelled</code> indicates that
reading has been cancelled in the meantime.<newline/>This starts one-time read job only, i.e. it is not restarted
after <code>when_done</code> has been invoked.<newline/>It is an error to start reading several times.<newline/>The function <code>peek</code> is called immediately before data is read in
from the underlying communication channel.<newline/>For getting an engine-based version of <code>start_reading</code>, use
a <code>signal_engine</code>:
<precode>           let (e, signal) = signal_engine esys in
           mplex # start_reading ~when_done:(fun xo n -&gt; signal (xo,n)) ...</precode>
Now <code>e</code> will transition to <code>`Done(x0,n)</code> when the read is done.</doc><arrow><optional>peek</optional><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><label>when_done</label><arrow><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>exn</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>start_mem_reading</method><doc>Same as <code>start_reading</code>, but puts the data into a <code>memory</code> buffer.
There is an optimization for the case that the descriptor is a
connected socket, or supports <code>Unix.read</code>. If this is not possible
the method raises <code>Mem_not_supported</code>.</doc><arrow><optional>peek</optional><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><label>when_done</label><arrow><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>exn</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow><arrow><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netsys/netsys_mem/index.xml"><cmti name="Netsys_mem" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_mem.cmti" digest="f19ef786301a8cbcfbf1a4fffee992f8"/></xml></base>Netsys_mem</root></identifier>memory</type></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>cancel_reading</method><doc>Cancels the read job. The <code>when_done</code> callback is invoked with the
number of bytes read so far (which may be 0) and the exception
<code>Cancelled</code>.<newline/>It is no error if there is no reader.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>writing</method><doc>True iff there is a writer</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>start_writing</method><doc>Start writing to the connection. When data is written, the
<code>when_done</code> callback is invoked. The int is the number of written
bytes. It is 0 if an error occurred which is indicated by the
exception. The exception <code>Cancelled</code> indicates that
writing has been cancelled in the meantime.<newline/>This starts one-time write job only, i.e. it is not restarted
after <code>when_done</code> has been invoked.<newline/>It is an error to start writing several times.<newline/>See the comment for <code>start_reading</code> for how to get an engine-based
version of this method.</doc><arrow><label>when_done</label><arrow><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>exn</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>start_mem_writing</method><doc>Same as <code>start_writing</code>, but takes the data from a <code>memory</code> buffer.
There is an optimization for the case that the descriptor is a
connected socket, or supports <code>Unix.write</code>. If this is not possible
the method raises <code>Mem_not_supported</code>.</doc><arrow><label>when_done</label><arrow><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>exn</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow><arrow><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netsys/netsys_mem/index.xml"><cmti name="Netsys_mem" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_mem.cmti" digest="f19ef786301a8cbcfbf1a4fffee992f8"/></xml></base>Netsys_mem</root></identifier>memory</type></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>supports_half_open_connection</method><doc>Whether the underlying transport mechanism can close the write side
of the connection only (half-open connection).</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>start_writing_eof</method><doc>Start writing the EOF marker to the connection. When it is written,
the <code>when_done</code> callback is invoked. The exception <code>Cancelled</code> indicates
that writing has been cancelled in the meantime.<newline/>This starts one-time write job only, i.e. it is not restarted
after <code>when_done</code> has been invoked.<newline/>It is an error to start writing several times. It is an error to
write EOF when the socket does not support half-open connections.<newline/>See the comment for <code>start_reading</code> for how to get an engine-based
version of this method.</doc><arrow><label>when_done</label><arrow><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>exn</type></identifier></resolved></path></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>cancel_writing</method><doc>Cancels the write job. The <code>when_done</code> callback is invoked with the
number of bytes read so far (which may be 0) and the exception
<code>Canelled</code>.<newline/>It is no error if there is no writer.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>read_eof</method><doc>Whether the EOF marker has been read</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>wrote_eof</method><doc>Whether the EOF marker has been written</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>shutting_down</method><doc>True iff the shutdown is in progress</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>start_shutting_down</method><doc>Start shutting down the connection. After going through the shutdown
procedure, the <code>when_done</code> callback is invoked. The exception
indicates whether an error happened. <code>Cancelled</code> means that the
shutdown operation has been cancelled in the meantime.<newline/>The underlying file descriptor (if any) is not closed. A shutdown
is only a protocol handshake. After a shutdown, both <code>read_eof</code>
and <code>wrote_eof</code> are true. Call <code>inactivate</code> to close the descriptor.<newline/>Optionally, one can <code>linger</code> for a certain period of time.
It is only lingered when the EOF was written before the EOF
is seen on input.
Defaults to <code>linger 60.0</code>. Set to 0 to turn off.<newline/>See the comment for <code>start_reading</code> for how to get an engine-based
version of this method.</doc><arrow><optional>linger</optional><path><resolved><identifier><type>float</type></identifier></resolved></path><arrow><label>when_done</label><arrow><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>exn</type></identifier></resolved></path></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>cancel_shutting_down</method><doc>Cancels the shutdown procedure. After that, the state of the
connection is undefined. The <code>when_done</code> callback is invoked with
the exception <code>Cancelled</code>.<newline/>It is no error if no shutdown is in progress.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type>inactivate</method><doc>Inactivates the connection immediately, and releases any resources
the controller is responsible for (e.g. closes file descriptors).
Note that this is more than
cancelling all pending operations and shutting the connection down.
However, the details of this method are implementation-defined.
Callbacks are not invoked.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method></signature></class_type><exception><exception><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>Mem_not_supported</exception><doc>May be raised by multiplex controller methods <code>start_mem_reading</code> and
<code>start_mem_writing</code> if these methods are not supported for the kind
of file descriptor</doc></exception><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>create_multiplex_controller_for_connected_socket</value><doc>Creates a multiplex controller for a bidirectional socket (e.g.
a TCP socket). It is essential that the socket is in connected state.
This function also supports Win32 named pipes.<newline/>Note that the file descriptor is not closed when the attached engines
are terminated. One can call <code>inactivate</code> manually to do that.<newline/><code>close_inactive_descr</code>: Whether <code>inactivate</code> closes the descriptor.
True by default.<newline/><code>preclose</code>: This function is called just before the descriptor is
closed.<newline/><code>supports_half_open_connection</code>: This implementation does not know
how to find out whether the socket supports half-open connections.
You can simply set this boolean because of this. Defaults to <code>false</code>.
You can set it to <code>true</code> for TCP connections and for Unix-domain
connections with stream semantics.<newline/><code>timeout</code>: If set to <code>(t, x)</code>, a general timeout of <code>t</code> is set.
When an operation has been started, and there is no I/O activity within
<code>t</code> seconds, neither by the started operation nor by another operation,
the connection times out. In this case, the operation returns the
exception <code>x</code>.</doc><arrow><optional>close_inactive_descr</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>preclose</optional><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><optional>supports_half_open_connection</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>timeout</optional><tuple><path><resolved><identifier><type>float</type></identifier></resolved></path><path><resolved><identifier><type>exn</type></identifier></resolved></path></tuple><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><path><resolved><class><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>unix_event_system</class></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></arrow></value><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>datagram_multiplex_controller</class_type><doc>Additional methods for unconnected datagram handling</doc><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type></identifier></resolved></path></inherit><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>datagram_multiplex_controller</class_type>received_from</method><doc>Returns the socket address of the last received datagram. This
value is updated just before the <code>when_done</code> callback of the
reader is invoked.</doc><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>sockaddr</type></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>datagram_multiplex_controller</class_type>send_to</method><doc>Sets the socket address of the next datagram to send.</doc><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>sockaddr</type></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method></signature></class_type><value><value><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>create_multiplex_controller_for_datagram_socket</value><doc>Creates a multiplex controller for datagram sockets (e.g. UDP socket).<newline/>Note that the file descriptor is not closed when the attached engines
are terminated. One can call <code>inactivate</code> manually to do that.<newline/><code>close_inactive_descr</code>: Whether <code>inactivate</code> closes the descriptor.
True by default.<newline/><code>preclose</code>: This function is called just before the descriptor is
closed.<newline/><code>timeout</code>: If set to <code>(t, x)</code>, a general timeout of <code>t</code> is set.
When an operation has been started, and there is no I/O activity within
<code>t</code> seconds, neither by the started operation nor by another operation,
the connection times out. In this case, the operation returns the
exception <code>x</code>.</doc><arrow><optional>close_inactive_descr</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>preclose</optional><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><optional>timeout</optional><tuple><path><resolved><identifier><type>float</type></identifier></resolved></path><path><resolved><identifier><type>exn</type></identifier></resolved></path></tuple><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><path><resolved><class><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>unix_event_system</class></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>datagram_multiplex_controller</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></value><type><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>onshutdown_out_spec</type><doc>See class <code>output_async_mplex</code> for explanations</doc><poly_variant><fixed/><constructor>Ignore<constant/></constructor><constructor>Initiate_shutdown<constant/></constructor><constructor>Action<arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_out_channel_engine</class_type></identifier></resolved></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>onshutdown_in_spec</type><doc>See class <code>input_async_mplex</code> for explanations</doc><poly_variant><fixed/><constructor>Ignore<constant/></constructor><constructor>Initiate_shutdown<constant/></constructor><constructor>Action<arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_in_channel_engine</class_type></identifier></resolved></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>engine_state</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></constructor></poly_variant></type><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>output_async_mplex</class><doc>Creates an asynchronous output channel writing to the multiplex
controller (see also <code>output_async_descr</code> for the corresponding
class writing to a single descriptor).<newline/><code>onclose</code>: What to do when the <code>close_out</code> method is invoked.
Defaults to <code>`Ignore</code>. <code>`Write_eof</code> means to write the EOF marker.
Anyway, after doing the close action, the multiplex controller
is shutdown.<newline/><code>onshutdown</code>: What to do when all data (and optionally, the EOF marker)
have been written. It is also invoked in case of I/O errors.
The default is <code>`Ignore</code>. The value <code>`Initiate_shutdown</code> means that
it is started to shutdown the socket. The success of this action
is not waited upon, however. One can also pass <code>`Action f</code> in which
case the function <code>f</code> is called with this object, the
multiplex controller, and the proposed next state as arguments.
By checking the proposed next state the function can see why the
shutdown function was called.<newline/><code>buffer_size</code>: The size of the internal buffer. By default unlimited.<newline/>Note that the engine is done when the output channel is closed.
The socket is not shut down, and the underlying file descriptor
is not closed! You can define the <code>shutdown</code> callback to do something
in this case.</doc><arrow><optional>onclose</optional><path><resolved><identifier><type>option</type></identifier></resolved><poly_variant><fixed/><constructor>Write_eof<constant/></constructor><constructor>Ignore<constant/></constructor></poly_variant></path><arrow><optional>onshutdown</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>onshutdown_out_spec</type></identifier></resolved></path></path><arrow><optional>buffer_size</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_out_channel_engine</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>input_async_mplex</class><doc>Creates an asynchronous input channel reading from the multiplex
controller.<newline/><code>onshutdown</code>: See <code>output_async_mplex</code>.<newline/><code>buffer_size</code>: The size of the internal buffer. By default unlimited.<newline/>Note that the engine is done when the input channel is closed.
The socket is not shut down, and the underlying file descriptor
is not closed! You can define the <code>shutdown</code> callback to do something
in this case.</doc><arrow><optional>onshutdown</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>onshutdown_in_spec</type></identifier></resolved></path></path><arrow><optional>buffer_size</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>multiplex_controller</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>async_in_channel_engine</class_type></identifier></resolved></path></arrow></arrow></arrow></class><comment><title level="1">Recursion</title></comment><comment>When programming with engines, it is normal to use recursion for any
kind of loops. For example, to read the lines from a file:<newline/><precode>      open Uq_engines.Operators  (* for &quot;&gt;&gt;&quot; and &quot;++&quot; *)

      let fd = 
        Unix.openfile filename [Unix.O_RDONLY] 0 in
      let d = 
        `Buffer_in(Uq_io.create_in_buffer(`Polldescr(`Read_write,fd,esys))) in

      let rec read_lines acc =
        Uq_io.input_line_e d &gt;&gt;
          (function                       (* catch exception End_of_file *)
            | `Done line -&gt; `Done(Some line)
            | `Error End_of_file -&gt; `Done None
            | `Error error -&gt; `Error error
            | `Aborted -&gt; `Aborted
          ) ++
          (function
            | Some line -&gt;
                read_lines (line :: acc)
            | None -&gt;
                eps_e (`Done (List.rev acc)) esys
          ) in

      let e = read_lines []</precode><newline/>There is generally the question whether this style leads to stack
overflows. This depends on the mechanisms that come into play:<newline/><list><item>The engine mechanism passing control from one engine to the next is
not tail-recursive, and thus the stack can overflow when the
recursion becomes too deep</item><item>The event queue mechanism, however, does not have this problem.
Control falls automatically back to the event queue whenever I/O
needs to be done.</item></list>In this example, this means that only the engine mechanism is used
as long as the data is read from the buffer. When the buffer needs
to be refilled, however, control is passed back to the event queue
(so the stack is cleaned), and the continuation of the execution
is only managed via closures (which only allocate memory on the
heap, not on the stack). Usually, this is a good compromise: The
engine mechnism is a lot faster, but I/O is an indicator for using
the better but slower technique.<newline/>Also note another difference: The event queue mechanism allows that
other asynchronous code attached to the same event queue may run
(control maybe yielded to unrelated execution contexts). The
pure engine mechanism does not allow that. This may be handy when
exclusive access to variables is needed. (But be careful here -
this is very sensitive to minimal changes of the implementation.)<newline/>Certain engines enforce using the event queue mechanisms although they
are unrelated to I/O. Especially <reference><element><resolved><class><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>delay_engine</class></resolved></element></reference> is
useful here: A &quot;delay&quot; of 0 seconds is already sufficient to
go back to the event queue. If recursions sometimes lead to
stack overflows the solution is to include such a zero delay
before doing the self call.</comment><comment><title level="1">More Engines</title></comment><comment>Pointers to other modules related to engines:<newline/><list><item>RPC clients: The function <reference><element><resolved><value><module><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/rpc/rpc_proxy/index.xml"><cmti name="Rpc_proxy" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_proxy.cmti" digest="c87d86d11399a261cd5030247bac0bd5"/></xml></base>Rpc_proxy</root></identifier>ManagedClient</module>rpc_engine</value></resolved></element></reference> allows
to call an RPC via an engine. When the call is done, the engine transitions
to <code>`Done r</code>, and <code>r</code> is the result of the remote call.</item><item>Subprograms: The class <reference><element><resolved><class><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/shell/shell_uq/index.xml"><cmti name="Shell_uq" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell_uq.cmti" digest="0ec6f55804417a1cc2d6a3f64d150b8d"/></xml></base>Shell_uq</root></identifier>call_engine</class></resolved></element></reference> allows to start an
external program, and to monitor it via an engine.</item></list></comment><comment><title level="1">Debugging</title></comment><module><module><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>Debug</module><type><signature><value><value><module><root><base><xml src="index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root>Debug</module>enable</value><doc>Enables <reference><element><root>Netlog</root></element></reference>-style debugging</doc><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>ref</type></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></value></signature></type></module></unit>