<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Uq_lwt" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_lwt.cmti" digest="f4d207252b6b11572aff6629abc5144b"/></xml></html></base>Uq_lwt</root><digest>f4d207252b6b11572aff6629abc5144b</digest><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>CamlinternalOO<digest>3d0b4eb4525ba4274c8885d7124f7bbc</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Equeue<digest>207ed21b384dd4f4ad91bce8a449f64c</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Lazy<digest>7dba0bf02f60e5ff44e9e4057263f28d</digest></import><import>Netexn<digest>845c6110cc81d957d9fc21c9e149d5fb</digest></import><import>Netlog<digest>2441459e41ceb77fc72d5714e0508958</digest></import><import>Netsys<digest>4a0ae4cc74f10e8667e3b629e6907079</digest></import><import>Netsys_posix<digest>f5b674538a41e016bb4f0e731d114657</digest></import><import>Netsys_signal<digest>703311022efc5162433d614b9bef35af</digest></import><import>Netsys_types<digest>67b26630eaf4decaa483864d4d00a3a2</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Oo<digest>0977563fa9c23f2df2952b302bdba835</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>Sys<digest>0ce699458ce4430954d7e6a78874647c</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><import>Unixqueue<digest>5ec5f57d46c5b3e908696c79a59232d4</digest></import><import>Unixqueue_util<digest>f013da7473123405a6e2f9edc5dde5e1</digest></import><source><file>uq_lwt.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue</dir><digest>eadb35d9eea2b9ce4c5ea6c604ebd042</digest></source><doc>Compatibility with <code>Lwt</code></doc><comment>Lwt is another library for event-driven programming. Here are some
helpers for running Lwt code on top of Ocamlnet event queues.<newline/>This is for Lwt-2.3 or better.<newline/>See also the comments in <reference><element><dot><root>Equeue_howto</root>lwt</dot></element></reference>.</comment><class><class><root><base><xml src="index.xml"><cmti name="Uq_lwt" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_lwt.cmti" digest="f4d207252b6b11572aff6629abc5144b"/></xml></base>Uq_lwt</root>lwt_backend</class><doc>Adapter for turning an Ocamlnet <code>event_system</code> into an Lwt <code>Lwt_engine.t</code>.<newline/>Use it like:<newline/><precode>       class lwt_engine esys =
       object
         inherit Lwt_engine.abstract
         inherit Uq_lwt.lwt_backend esys
       end</precode><newline/>(We've intentionally left out <bold>this</bold> definition to avoid any
build dependency on Lwt. Also note that <code>Lwt_engine</code> is in the
package <code>lwt.unix</code>.)<newline/>Now, activate this Lwt engine (event loop):<newline/><precode>      Lwt_engine.set (new lwt_engine esys)</precode><newline/>Note that Lwt can only deal with one event loop at a time, and the
new event loop will be used for all Lwt code.<newline/>It is, unfortunately, necessary that you use the Lwt main loop
(<code>Lwt_main.run</code> or <code>Lwt_unix.run</code>), because otherwise some hook
functions are never executed (and execution will hang).<newline/>For an example, see <code>tests/equeue/manual/relay.ml</code> in the distribution
tarball.<newline/>Netplex users: If you want to use <code>lwt_engine</code> for driving the
event loop of the container, you can do so by overriding the
processor hooks <code>container_event_system</code> and <code>container_run</code>, e.g.<newline/><precode>    method container_event_system () =
      let esys = Unixqueue.create_unix_event_system() in
      Lwt_engine.set (new lwt_engine esys);
      esys

    method container_run esys =
      Lwt_main.run &lt;something&gt;</precode><newline/>The Lwt thread <code>&lt;something&gt;</code> must at least run until the container is
shut down. You can catch this moment by also defining the <code>shutdown</code>
method.</doc><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><signature><method><method><class><root><base><xml src="index.xml"><cmti name="Uq_lwt" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_lwt.cmti" digest="f4d207252b6b11572aff6629abc5144b"/></xml></base>Uq_lwt</root>lwt_backend</class>iter</method><arrow><path><resolved><identifier><type>bool</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class><root><base><xml src="index.xml"><cmti name="Uq_lwt" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_lwt.cmti" digest="f4d207252b6b11572aff6629abc5144b"/></xml></base>Uq_lwt</root>lwt_backend</class>cleanup</method><private/><path><resolved><identifier><type>unit</type></identifier></resolved></path></method><method><method><class><root><base><xml src="index.xml"><cmti name="Uq_lwt" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_lwt.cmti" digest="f4d207252b6b11572aff6629abc5144b"/></xml></base>Uq_lwt</root>lwt_backend</class>register_readable</method><private/><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/lazy/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/lazy/index.xml"><cmti name="Lazy" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/lazy.cmti" digest="7dba0bf02f60e5ff44e9e4057263f28d"/></xml></html></base>Lazy</root></identifier>t</type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></method><method><method><class><root><base><xml src="index.xml"><cmti name="Uq_lwt" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_lwt.cmti" digest="f4d207252b6b11572aff6629abc5144b"/></xml></base>Uq_lwt</root>lwt_backend</class>register_writable</method><private/><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/lazy/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/lazy/index.xml"><cmti name="Lazy" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/lazy.cmti" digest="7dba0bf02f60e5ff44e9e4057263f28d"/></xml></html></base>Lazy</root></identifier>t</type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></method><method><method><class><root><base><xml src="index.xml"><cmti name="Uq_lwt" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_lwt.cmti" digest="f4d207252b6b11572aff6629abc5144b"/></xml></base>Uq_lwt</root>lwt_backend</class>register_timer</method><private/><arrow><path><resolved><identifier><type>float</type></identifier></resolved></path><arrow><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/lazy/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/lazy/index.xml"><cmti name="Lazy" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/lazy.cmti" digest="7dba0bf02f60e5ff44e9e4057263f28d"/></xml></html></base>Lazy</root></identifier>t</type></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></arrow></arrow></method></signature></arrow></class></unit>