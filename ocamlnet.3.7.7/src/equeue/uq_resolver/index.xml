<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></html></base>Uq_resolver</root><digest>2f7ec6d31af7dab778cb2db440a404ac</digest><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>CamlinternalOO<digest>3d0b4eb4525ba4274c8885d7124f7bbc</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Equeue<digest>207ed21b384dd4f4ad91bce8a449f64c</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Netexn<digest>845c6110cc81d957d9fc21c9e149d5fb</digest></import><import>Netlog<digest>2441459e41ceb77fc72d5714e0508958</digest></import><import>Netsockaddr<digest>514bc9294568dc3facaf49b96623c337</digest></import><import>Netsys<digest>4a0ae4cc74f10e8667e3b629e6907079</digest></import><import>Netsys_posix<digest>f5b674538a41e016bb4f0e731d114657</digest></import><import>Netsys_signal<digest>703311022efc5162433d614b9bef35af</digest></import><import>Netsys_types<digest>67b26630eaf4decaa483864d4d00a3a2</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Oo<digest>0977563fa9c23f2df2952b302bdba835</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>Sys<digest>0ce699458ce4430954d7e6a78874647c</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><import>Unixqueue<digest>5ec5f57d46c5b3e908696c79a59232d4</digest></import><import>Unixqueue_util<digest>f013da7473123405a6e2f9edc5dde5e1</digest></import><source><file>uq_resolver.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue</dir><digest>f89166da66066e538db48300a68ebb2f</digest></source><doc>Support for pluggable resolvers</doc><comment>A resolver maps several kinds of names to addresses, or vice versa.
Currently, only DNS host lookups are supported (but this can be extended
if needed).<newline/>The plugin mechanism allows one to change the name resovler Ocamlnet
uses. Resolvers can be both synchronous or asynchronous. Note however,
that the default resolver is synchronous and simply bases on
<code>Unix.gethostbyname</code>.<newline/>Requirements of the resolver:<list><item>IP addresses may be enclosed in square brackets, but also given without
such brackets. If such an IP address is passed to the resolver, the
string address is just converted to a <code>Unix.inet_addr</code>.</item></list></comment><comment><title level="1">Asynchronous Interface</title></comment><comment>The following types are the same as in <reference><element><root>Uq_engines</root></element></reference>, here only
redefined for systematic reasons</comment><type><type><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>engine_state</type><param>t</param><poly_variant><fixed/><constructor>Working<path><resolved><identifier><type>int</type></identifier></resolved></path></constructor><constructor>Done<var>t</var></constructor><constructor>Error<path><resolved><identifier><type>exn</type></identifier></resolved></path></constructor><constructor>Aborted<constant/></constructor></poly_variant></type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>engine</class_type><param>t</param><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>engine</class_type>state</method><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>engine_state</type></identifier></resolved><var>t</var></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>engine</class_type>abort</method><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>engine</class_type>request_notification</method><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>engine</class_type>event_system</method><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path></method></signature></class_type><comment>Exceptions</comment><exception><exception><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>Host_not_found</exception><doc>This host cannot be resolved</doc><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></exception><comment>The type of resolvers:</comment><class_type><class_type><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>resolver</class_type><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>resolver</class_type>host_by_name</method><doc>Look up the passed host name up. The implementation can be synchronous
or asynchronous. In the first case, an engine is returned that is
already in one of the states <code>`Done he</code> or <code>`Error e</code> where <code>he</code> is
the host entry, or <code>e</code> is an exception like <code>Host_not_found</code>. In this
case the passed event system is ignored. If the implementation is
asynchronous, the caller must run the event system until the
state of the engine transitions to <code>`Done he</code> or <code>`Error e</code>.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>engine</class_type></identifier></resolved><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>host_entry</type></resolved></path></path></arrow></arrow></method></signature></class_type><comment><title level="1">Synchronous Interface</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>get_host_by_name</value><doc>Look up the host, and return the host entry
or raise the exception <code>Host_not_found</code>.<newline/>If a <code>resolver</code> is passed, this resolver is used, otherwise the
pluggable resolver is used.</doc><arrow><optional>resolver</optional><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>resolver</class_type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>host_entry</type></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>sockaddr_of_socksymbol</value><doc>Use the resolver to look up names in <reference><element><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netsockaddr/index.xml"><cmti name="Netsockaddr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netsockaddr.cmti" digest="514bc9294568dc3facaf49b96623c337"/></xml></base>Netsockaddr</root></identifier>socksymbol</type></resolved></element></reference>,
and convert the symbol to a <code>Unix.sockaddr</code> only containing IP
addresses.<newline/>If a <code>resolver</code> is passed, this resolver is used, otherwise the
pluggable resolver is used.</doc><arrow><optional>resolver</optional><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>resolver</class_type></identifier></resolved></path><arrow><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netsockaddr/index.xml"><cmti name="Netsockaddr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netsockaddr.cmti" digest="514bc9294568dc3facaf49b96623c337"/></xml></base>Netsockaddr</root></identifier>socksymbol</type></resolved></path><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>sockaddr</type></resolved></path></arrow></arrow></value><comment><title level="1">Resolvers</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>default_resolver</value><doc>The default resolver uses <code>Unix.gethostbyname</code> to look up names.
Note that this usually means that no IPv6 addresses are returned.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>resolver</class_type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>gai_resolver</value><doc>This resolver uses <code>Unix.getaddrinfo</code>. One can set whether IPv4
or IPv6 addresses may be returned (only one type is returned).
The order of addresses cannot
be set, but there is a global config file <code>/etc/gai.info</code>.<newline/>The <code>h_aliases</code> field of the result is not set.<newline/>By default, both <code>ipv4</code> and <code>ipv6</code> are enabled.</doc><arrow><optional>ipv4</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>ipv6</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>resolver</class_type></identifier></resolved></path></arrow></arrow></arrow></value><comment><title level="1">Plugins</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>current_resolver</value><doc>Returns the pluggable resolver</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>resolver</class_type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>set_current_resolver</value><doc>Set the pluggable resolver</doc><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Uq_resolver" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_resolver.cmti" digest="2f7ec6d31af7dab778cb2db440a404ac"/></xml></base>Uq_resolver</root>resolver</class_type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value></unit>