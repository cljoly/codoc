<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></html></base>Rpc_transport</root><digest>6dccd6c9fbafeb7fe8a94a52c7614424</digest><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>CamlinternalOO<digest>3d0b4eb4525ba4274c8885d7124f7bbc</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Equeue<digest>207ed21b384dd4f4ad91bce8a449f64c</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>Netbuffer<digest>5f4225f2baeef1584e246c6ce1d32119</digest></import><import>Netchannels<digest>4e22bd1ba0cae4bd9bd1b6e69fc16ade</digest></import><import>Netexn<digest>845c6110cc81d957d9fc21c9e149d5fb</digest></import><import>Netlog<digest>2441459e41ceb77fc72d5714e0508958</digest></import><import>Netnumber<digest>dbd89ef42a315eaa84a5eeb21e4b6530</digest></import><import>Netsockaddr<digest>514bc9294568dc3facaf49b96623c337</digest></import><import>Netsys<digest>4a0ae4cc74f10e8667e3b629e6907079</digest></import><import>Netsys_mem<digest>f19ef786301a8cbcfbf1a4fffee992f8</digest></import><import>Netsys_posix<digest>f5b674538a41e016bb4f0e731d114657</digest></import><import>Netsys_signal<digest>703311022efc5162433d614b9bef35af</digest></import><import>Netsys_types<digest>67b26630eaf4decaa483864d4d00a3a2</digest></import><import>Netsys_win32<digest>02161f9169b76f686b05a51ed2d9357c</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Oo<digest>0977563fa9c23f2df2952b302bdba835</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Rpc<digest>823bfd8fbbbc545fe6929685a57393b5</digest></import><import>Rpc_packer<digest>af7dd8ce3ff9294c27a0d09fd8424b4e</digest></import><import>Rpc_program<digest>2c8259e58584b03793c1d5b3eaa20436</digest></import><import>Rtypes<digest>3a2195ceddcae11873afeb1784965176</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>Stream<digest>55948988e71c3ee1749feb21ccec9fc9</digest></import><import>Sys<digest>0ce699458ce4430954d7e6a78874647c</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><import>Unixqueue<digest>5ec5f57d46c5b3e908696c79a59232d4</digest></import><import>Unixqueue_util<digest>f013da7473123405a6e2f9edc5dde5e1</digest></import><import>Uq_engines<digest>7eabb27fa86d9290a1fe2ef78547b48a</digest></import><import>Xdr<digest>d36f2013b5caa2d21a98f895fdddfd16</digest></import><import>Xdr_mstring<digest>2f3d19f64c1f9ca2f05941c7b5ea2c42</digest></import><source><file>rpc_transport.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc</dir><digest>ef3f0cb3c42115275b1799fb3f504b6d</digest></source><doc>Low-level RPC transporters</doc><type><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>result</type><param>t</param><poly_variant><fixed/><constructor>Ok<var>t</var></constructor><constructor>Error<path><resolved><identifier><type>exn</type></identifier></resolved></path></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>result_eof</type><param>t</param><poly_variant><fixed/><type><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>result</type></identifier></resolved><var>t</var></path></type><constructor>End_of_file<constant/></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>sockaddr</type><poly_variant><fixed/><constructor>Implied<constant/></constructor><constructor>Sockaddr<path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>sockaddr</type></resolved></path></constructor></poly_variant></type><value><value><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>string_of_sockaddr</value><doc>Convert to string, for debugging purposes</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>sockaddr</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value><exception><exception><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>Error</exception><doc>Passed back as <code>`Error</code>. Such errors are fatal.</doc><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></exception><comment>Note errors on stream connections: These are normally not recoverable.
One should close the connection and open a new one.</comment><type><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>in_rule</type><poly_variant><fixed/><constructor>Deny<constant/></constructor><constructor>Drop<constant/></constructor><constructor>Reject<constant/></constructor><constructor>Reject_with<path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/rpc/rpc/index.xml"><cmti name="Rpc" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc.cmti" digest="823bfd8fbbbc545fe6929685a57393b5"/></xml></base>Rpc</root></identifier>server_error</type></resolved></path></constructor><constructor>Accept<constant/></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>in_record</type><poly_variant><fixed/><constructor>Deny<constant/></constructor><constructor>Drop<constant/></constructor><constructor>Reject<path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/rpc/rpc_packer/index.xml"><cmti name="Rpc_packer" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_packer.cmti" digest="af7dd8ce3ff9294c27a0d09fd8424b4e"/></xml></base>Rpc_packer</root></identifier>packed_value</type></resolved></path></constructor><constructor>Reject_with<tuple><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/rpc/rpc_packer/index.xml"><cmti name="Rpc_packer" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_packer.cmti" digest="af7dd8ce3ff9294c27a0d09fd8424b4e"/></xml></base>Rpc_packer</root></identifier>packed_value</type></resolved></path><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/rpc/rpc/index.xml"><cmti name="Rpc" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc.cmti" digest="823bfd8fbbbc545fe6929685a57393b5"/></xml></base>Rpc</root></identifier>server_error</type></resolved></path></tuple></constructor><constructor>Accept<path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/rpc/rpc_packer/index.xml"><cmti name="Rpc_packer" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_packer.cmti" digest="af7dd8ce3ff9294c27a0d09fd8424b4e"/></xml></base>Rpc_packer</root></identifier>packed_value</type></resolved></path></constructor></poly_variant></type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>alive</method><doc>If the controller is alive, the socket is not yet completely down.</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>event_system</method><doc>Returns the event system</doc><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>getsockname</method><doc>The address of this socket</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>sockaddr</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>getpeername</method><doc>The address of the peer's socket. Only available if the socket
is connected. (Fails otherwise.)</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>sockaddr</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>protocol</method><doc>The protocol encapsulation</doc><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/rpc/rpc/index.xml"><cmti name="Rpc" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc.cmti" digest="823bfd8fbbbc545fe6929685a57393b5"/></xml></base>Rpc</root></identifier>protocol</type></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>peer_user_name</method><doc>If the transport mechanism provides a way to authenticate the
peer, it can return the name here.</doc><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>file_descr</method><doc>If the transport mechanism is on top of a file descriptor, this
is returned here. This can be useful for getting more information
about the descriptor (e.g. credentials associated with it).</doc><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>reading</method><doc>True iff there is a reader</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>read_eof</method><doc>Whether the EOF marker has been read</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>start_reading</method><doc>Start reading from the connection. When a whole message has been
received, the <code>when_done</code> callback is invoked. The <code>in_record</code>
passed to <code>when_done</code> is usually <code>`Accept m</code> when <code>m</code> is the
undecoded message string. For other types of <code>in_record</code> see
the comments to <code>before_record</code> below.<newline/>This starts one-time read job only, i.e. it is not restarted
after <code>when_done</code> has been invoked.<newline/>It is an error to start reading several times at once.<newline/><code>peek</code>: This function is called immediately before a data chunk is
read from the underlying data connection.<newline/><code>before_record</code>: If passed, this function is called back whenever
a fragment of data is started. The integer is the so-far known
size of the
message in bytes. It is guaranteed that the function is
invoked once for every message fragment as long as the previous
fragments were accepted, and in total at least once
before <code>when_done</code>. The result of the last <code>before_record</code> call
determines what is returned as <code>in_record</code>, e.g. a <code>`Deny</code> rule
causes that a <code>`Deny</code> result is passed to <code>when_done</code>.
Also, for <code>`Deny</code> and <code>`Drop</code> no message buffer is
allocated (i.e. no memory consumption). For <code>`Reject</code>, only
a very small buffer is allocated that only provides space for
the session identifier (xid).
When there is no <code>before_record</code> function, <code>`Accept</code> is passed
to <code>when_done</code>.</doc><arrow><optional>peek</optional><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><optional>before_record</optional><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>sockaddr</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>in_rule</type></identifier></resolved></path></arrow></arrow><arrow><label>when_done</label><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>result_eof</type></identifier></resolved><tuple><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>in_record</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>sockaddr</type></identifier></resolved></path></tuple></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>writing</method><doc>True iff there is a writer</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>start_writing</method><doc>Starts writing the message. Invoked <code>when_done</code> when it is written,
or an error condition is reached.<newline/>This starts one-time write job only, i.e. it is not restarted
after <code>when_done</code> has been invoked.<newline/>It is an error to start writing several times at once.</doc><arrow><label>when_done</label><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>result</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/rpc/rpc_packer/index.xml"><cmti name="Rpc_packer" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_packer.cmti" digest="af7dd8ce3ff9294c27a0d09fd8424b4e"/></xml></base>Rpc_packer</root></identifier>packed_value</type></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>sockaddr</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>cancel_rd_polling</method><doc>Cancels polling for the next input message. This method must not be
called from the <code>before_record</code> callback function. Polling can be
resumed by calling <code>start_reading</code> again.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>abort_rw</method><doc>Aborts the current reader and/or writer forever. Note that there is no
clean way of resuming reading and/or writing. The readers/writers
are not notified about cancellation.<newline/>This method also deallocates buffers, so far possible.<newline/>It is allowed to go on with the shutdown, and to inactivate.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>start_shutting_down</method><doc>Start shutting down the connection. After going through the shutdown
procedure, the <code>when_done</code> callback is invoked reporting the success
or failure.<newline/>The underlying file descriptor (if any) is not closed. A shutdown
is only a protocol handshake. After a shutdown,<code>read_eof</code>
is true. Call <code>inactivate</code> to close the descriptor.<newline/>This method also deallocates buffers, so far possible.</doc><arrow><label>when_done</label><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>result</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>cancel_shutting_down</method><doc>Cancels the shutdown procedure. After that, the state of the
connection is undefined. The <code>when_done</code> callback is invoked with
the <code>`Cancelled</code>.<newline/>It is no error if no shutdown is in progress.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>set_timeout</method><doc>If there is no read or write activity for the passed number of
seconds, the <code>notify</code> callback is invoked.</doc><arrow><label>notify</label><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type>float</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type>inactivate</method><doc>Inactivates the connection immediately, and releases any resources
the controller is responsible for (e.g. closes file descriptors).
Note that this is more than
cancelling all pending operations and shutting the connection down.
However, the details of this method are implementation-defined.
Callbacks are not invoked.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method></signature></class_type><value><value><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>stream_rpc_multiplex_controller</value><doc>The multiplex controller for stream encapsulation<newline/><list><item><code>close_inactive_descr</code>: If true, the descriptor is closed when
inactivated</item><item><code>preclose</code>: This function is called just before the descriptor
is closed.</item></list></doc><arrow><optional>close_inactive_descr</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>preclose</optional><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>datagram_rpc_multiplex_controller</value><doc>The multiplex controller for datagrams</doc><arrow><optional>close_inactive_descr</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>preclose</optional><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>stream_rpc_multiplex_controller</class><doc>The class is exported for the SSL transporter</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>sockaddr</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>sockaddr</type></identifier></resolved></path><arrow><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>multiplex_controller</class_type></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>rpc_multiplex_controller</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></arrow></class><comment><title level="1">Debugging</title></comment><module><module><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>Debug</module><type><signature><value><value><module><root><base><xml src="index.xml"><cmti name="Rpc_transport" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/rpc/rpc_transport.cmti" digest="6dccd6c9fbafeb7fe8a94a52c7614424"/></xml></base>Rpc_transport</root>Debug</module>enable</value><doc>Enables <reference><element><root>Netlog</root></element></reference>-style debugging</doc><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>ref</type></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></value></signature></type></module></unit>