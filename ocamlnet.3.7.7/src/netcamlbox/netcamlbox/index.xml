<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></html></base>Netcamlbox</root><digest>f06488b939ae5dfb3a2afb01586b700b</digest><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><source><file>netcamlbox.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox</dir><digest>7240f0a081bf07b5724f0c8cc891ddd1</digest></source><doc>Camlboxes are a fast IPC mechanism to send Ocaml values from one
process to another. Source and destination processes must run on
the same machine (no network). The Ocaml value is copied to a
shared memory object where it can be directly accessed by the
receiver without unmarshalling step. This means the sender writes
the value into the shared memory in a format that can immediately
interpreted by the receiver.<newline/>A camlbox is owned by the single receiving process. Only this process
(or a fork) can look for new messages and can read them. There can be
any number of sending processes, i.e. we have a n:1 message passing
scenario.<newline/>The receiver process creates the camlbox, and is seen as the owner.
The receiver is accountible for deleting the camlbox when it is no
longer needed.<newline/>The sender(s) can send messages to any existing camlbox. There is
no notification whether the messages are actually read. The sender,
however, blocks when the destination camlbox is full, and will only
proceed when the receiver makes room for new messages. If there is
space in the camlbox the sender does not need to synchronize with the
receiver, i.e. it is possible to put a message into the box when
the receiver is busy with something else (asynchronous send operation).<newline/>Camlboxes have a fixed capacity of messages, and the message slots
have a fixed maximum length. The messages can have any type with only
a few restrictions (e.g. no functions and no custom blocks). There is
no check whether the sender and the receiver assume the same type
of the messages. This is left to the user. Breaking this assumption
will lead to unpredictable effects, including program crashes.
It is strongly advised to only communicate between processes that
run the same executable.<newline/>The user is also responsible for keeping only references to
existing messages. It is possible to get a value pointer
for a certain message via <code>camlbox_get</code> and then to delete the message.
The user must no longer access the value - once the value is deleted
it may be overwritten, and the program may crash. Another danger
is that message values are modified so that pointers to heap
values are put into the message. This may lead to delayed crashes
when the heap value is moved to a different location or is even
deleted by the garbage collector. There is nothing the camlbox
implementation can do about that. If this is a problem, it is
advised to use <code>camlbox_get_copy</code> instead which is not dangerous
in this respect.<newline/>On the system level, camlboxes are stored in POSIX shared memory
objects. These objects have kernel persistence and continue to
live after the process creating the camlbox has terminated without
unlinking the box.<newline/>This module requires Ocaml 3.11 or newer. The system must support
POSIX shared memory and POSIX semaphores. Camlboxes may be used
in multi-threaded programs as long as the values <code>camlbox</code> and
<code>camlbox_sender</code> are not used by several threads at the same time.<newline/><bold>Examples.</bold> There a few examples in the distribution tarball
(examples/camlbox).<newline/><bold>Multi-core:</bold>
Camlboxes can be used to gain speed-ups on multi-cores. See
examples/camlbox/README in the distribution tarball for an example
how to accomplish this.<newline/><bold>Integration into event-based programs:</bold> See the section
below, <reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netcamlbox/netcamlbox/index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root></identifier>events</label></resolved></element></reference>.</doc><comment><bold>Since OCaml-4.01:</bold> This OCaml version changed the semantics of the
built-in primitives <code>caml_modify</code> and <code>caml_initialize</code>. Essentially,
it is no longer possible to modify OCaml values residing outside the
regular OCaml heap. As we do this inside Netcamlbox, this change affects
this library. Fortunately, there is a workaround on systems supporting
weak symbols (all ELF systems and OS X): Here, <code>caml_modify</code> and
<code>caml_initialize</code> are overridden by Netcamlbox so that they are again
compatible. Note that this is a global modification of the runtime
system!<newline/>Future versions of Ocamlnet may solve this problem differently.</comment><type><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_address</type><doc>The address of a camlbox is a string that does not contain
slashes. Addresses are system-global.</doc><path><resolved><identifier><type>string</type></identifier></resolved></path></type><type><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox</type><doc>A <code>camlbox</code> may receive messages of type <code>'a</code></doc><param>a</param></type><type><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_sender</type><doc>An endpoint that may send messages of type <code>'a</code> to a camlbox</doc><param>a</param></type><exception><exception><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>Empty</exception></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>Message_too_big</exception></exception><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>create_camlbox</value><doc><code>create_camlbox addr n size</code>: Creates a new camlbox for up to
<code>n</code> messages of <code>size</code> bytes. The messages are numbered from
0 to <code>n-1</code>. The camlbox is only meaningful for the creating
process, and must not be directly accessed by other processes.
Other processes can only send using a <code>camlbox_sender</code>.<newline/>It is an error if the camlbox already exists.<newline/>It is suggested that the result of <code>create_camlbox</code> is immediately
coerced to the right type <code>t</code>, e.g.
<precode>        let box = (create_camlbox addr n size : t camlbox)</precode>
as this ensures type safety for all following operations.<newline/><bold>Note that camlboxes have kernel persistence! They are not
automatically deleted when the process finishes. Call <code>unlink_camlbox</code>
to delete camlboxes.</bold></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_address</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox</type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>unlink_camlbox</value><doc>Removes the global name of the camlbox. All functions requiring
a <code>camlbox_address</code> as input will not find the box anymore. The
box, however, continues to exist until the receiver and the senders
are done with it.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_address</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>format_camlbox</value><doc><code>format_camlbox addr fd n size</code>: The file <code>fd</code> is mapped into memory,
and formatted as camlbox.<newline/>In Ocamlnet-3.6, the function got the extra <code>camlbox_address</code> argument.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_address</type></identifier></resolved></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox</type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_addr</value><doc>returns the address</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_address</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_saddr</value><doc>returns the address</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_sender</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_address</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_fd</value><doc>Opens a new file descriptor to this address</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_address</type></identifier></resolved></path><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_capacity</value><doc>Returns the maximum number of messages <code>n</code></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_address</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_bcapacity</value><doc>same for an already opened box</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_scapacity</value><doc>same for a box already opened for sending</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_sender</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_msg_size</value><doc>Returns the max size of a message in bytes</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_address</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_bmsg_size</value><doc>same for an already opened box</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_smsg_size</value><doc>same for a box already opened for sending</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_sender</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_messages</value><doc>Returns the number of messages at the moment</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_address</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_bmessages</value><doc>same for an already opened box</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_smessages</value><doc>same for a box already opened for sending</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_sender</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_get</value><doc><code>camlbox_get box k</code>: Returns message number <code>k</code> from <code>box</code>.
The returned value lives in the camlbox, and using it is only
safe as long as the camlbox exists and the message is not
deleted.<newline/>If there is no message at <code>k</code> the exception <code>Empty</code> will be
raised.<newline/>The result value must have the same type as the sent value.
This is not checked, however. Violating this rule is likely
to crash the program.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><var>a</var></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_get_copy</value><doc><code>camlbox_get box k</code>: Returns a deep copy of message number <code>k</code> from <code>box</code>.
This is safer than <code>camlbox_get</code>, because the returned value remains
valid when the message is deleted from the box.<newline/>If there is no message at <code>k</code> the exception <code>Empty</code> will be
raised.<newline/>The result value must have the same type as the sent value.
This is not checked, however. Violating this rule is likely
to crash the program.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><var>a</var></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_delete</value><doc><code>camlbox_delete box k</code>: Deletes the message number <code>k</code> from <code>box</code>.
Any value obtained via <code>camlbox_get</code> for a message or a part
of a message becomes invalid and must not be used anymore.
There is no way to check this - violating this rule is likely
to crash the program. (In doubt use <code>camlbox_get_copy</code> instead
which cannot interfer with <code>camlbox_delete</code>.)<newline/>If there is no message at <code>k</code> the exception <code>Empty</code> will be
raised.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_wait</value><doc>Waits until new messages arrive, and return the message numbers.
A new message is only reported once by <code>camlbox_wait</code>. The
order of the messages is not specified.<newline/>Only one thread at a time must wait for new messages.<newline/>It is allowed that this function returns the empty list.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_cancel_wait</value><doc>Cancels a <code>camlbox_wait</code> operation called by a different thread</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_sender</value><doc>Prepares for sending.<newline/>It is suggested that the result of <code>camlbox_sender</code> is immediately
coerced to the right type <code>t</code>, e.g.
<precode>        let box = (camlbox_sender addr : t camlbox_sender)</precode>
as this ensures type safety for all following operations.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_address</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_sender</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_sender_of_fd</value><doc>Gets a sender for a file descriptor from <code>camlbox_fd</code>.<newline/>Ocamlnet-3.6: new arg <code>camlbox_address</code></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_address</type></identifier></resolved></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_sender</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_send</value><doc>Sends a message to a camlbox. The value must be boxed (neither <code>char</code>,
<code>bool</code>, <code>int</code>, nor a variant type), and a number of restrictions apply:<list><item>The size of the representation must not exceed the maximum
message size of the camlbox, or the exception <code>Message_too_big</code>
is raised.</item><item>Objects, closures, and lazy values are not supported</item><item>Abstract and custom block values are not supported except
bigarrays, <code>int32</code>, <code>int64</code>, and <code>nativeint</code>.</item><item>Atoms (like empty arrays) may cause problems when the message
is extracted by <code>camlbox_get</code> because atoms are duplicated,
and no longer unique. For example, a test <code>if array=[||] then...</code>
is likely not to work. Use <code>if Array.length array = 0 then...</code>,
or use <code>camlbox_get_copy</code> for extraction.</item></list>The value is copied to the receiving camlbox.<newline/>This function blocks until the receiving camlbox has free space.<newline/>Several threads may try to send messages at the same time.<newline/><code>prefer</code>: suggests a slot for sending
<code>slot</code>: the actual slot number is stored here</doc><arrow><optional>prefer</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>slot</optional><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>ref</type></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_sender</type></identifier></resolved><var>a</var></path><arrow><var>a</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_wake</value><doc>Sends an &quot;empty message&quot; - this only means that if the receiving
thread is waiting for new messages it is interrupted and
<code>camlbox_wait</code> will return the empty list.<newline/>This function is non-blocking.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>camlbox_sender</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><comment><title level="2"><label><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>events</label>Integration into event-based programs</title><newline/>The functions <code>camlbox_wait</code> and <code>camlbox_send</code> may both block the
execution of the program when no message has arrived, and no space
is available, respectively. This is a challenge for event-based
programs where all waiting is bound to events on file descriptors.<newline/>Generally, Camlboxes use semaphores for speed. The results are good,
often only 4 microseconds for sending and receiving a short
message. This is only possible because semaphores implement a fast
path where the help of the kernel is not needed, i.e. no context
switch happens. This is basically incompatible with the style of
waiting implemented for file descriptors, because this kind of
waiting for an event must always go through the kernel, and is
thus slower by design.<newline/>But anyway, what to do if Camlboxes need to be integrated into
a program that bases already on file descriptor polling? Of course,
speed will decrease, but maybe not dramatically. We assume here
that the program uses <reference><element><root>Unixqueue</root></element></reference>s as the basic data structure
for organizing polling.<newline/>If the program can use the Netmulticore library, there is a very
simple solution. The condition variables provided by this library
allow the integration into Unixqueues, see <reference><element><root>Netmcore_condition</root></element></reference>.
The condition variable is signalled whenever a new message is put
into the Camlbox, and the receiver waits until this signal arrives.
The function <reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netmulticore/netmcore_condition/index.xml"><cmti name="Netmcore_condition" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netmulticore/netmcore_condition.cmti" digest="e0f15d379a1746aab30c1981e35afacf"/></xml></base>Netmcore_condition</root></identifier>wait_e</value></resolved></element></reference> permits it to integrate
waiting into a Unixqueue.<newline/>Otherwise, if Netmulticore is no option (e.g. because the processes
are unrelated that communicate via Camlboxes), the other workaround
is to use threads. A special thread is set up which waits for new
Camlbox messages. Whenever a message arrives, an engine is notified
via a <reference><element><resolved><class><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>signal_engine</class></resolved></element></reference> (which is thread-safe). This engine
can run in a different thread.</comment><module><module><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>Debug</module><type><signature><value><value><module><root><base><xml src="index.xml"><cmti name="Netcamlbox" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netcamlbox/netcamlbox.cmti" digest="f06488b939ae5dfb3a2afb01586b700b"/></xml></base>Netcamlbox</root>Debug</module>enable</value><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>ref</type></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></value></signature></type></module></unit>