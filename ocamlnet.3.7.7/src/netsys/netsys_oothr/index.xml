<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></html></base>Netsys_oothr</root><digest>648545d77304e38edd70604dfa9df04b</digest><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><source><file>netsys_oothr.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys</dir><digest>701052e541a50b793832f064184eeebd</digest></source><doc>Object-oriented thread API</doc><comment>Makes the most important multi-threading primitives available using
object types. For single-threaded apps, the operations are substituted
by no-ops.</comment><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>mtprovider</class_type><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>mtprovider</class_type>single_threaded</method><doc>Whether this is a single-threaded program. In this case, a number
of methods change their meaning, as described below.</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>mtprovider</class_type>create_thread</method><doc>In a multi-threaded program: Starts a new thread, and calls the
passed function with the passed argument in the new thread
(like <code>Thread.create</code>).
In a single-threaded program: fails.</doc><poly><name>s</name><name>t</name><arrow><arrow><var>s</var><var>t</var></arrow><arrow><var>s</var><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>thread</class_type></identifier></resolved></path></arrow></arrow></poly></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>mtprovider</class_type>self</method><doc>In a multi-threaded program: Returns the currently running thread.
Subsequent calls of <code>self</code> can return different objects for the
same thread, but the <code>id</code> method will always return the same number.
In a single-threaded program: Returns a dummy object (see below).</doc><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>thread</class_type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>mtprovider</class_type>yield</method><doc>In a multi-threaded program: gives a hint that another thread should
better run now.
In a single-threaded program: this is a no-op.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>mtprovider</class_type>create_mutex</method><doc>In a multi-threaded program: Creates a mutex and returns the object.
In a single-threaded program: Returns a dummy mutex object (see below).</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>mutex</class_type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>mtprovider</class_type>create_condition</method><doc>In a multi-threaded program: Creates a condition variable and returns
the object.
In a single-threaded program: Returns a dummy variable (see below).</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>condition</class_type></identifier></resolved></path></arrow></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>thread</class_type><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>thread</class_type>id</method><doc>In a multi-threaded program: Returns the thread ID.
In a single-threaded program: Returns 0.</doc><path><resolved><identifier><type>int</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>thread</class_type>join</method><doc>In a multi-threaded program: Suspends the calling thread until this
thread terminates.
In a single-threaded program: fails</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>thread</class_type>repr</method><doc>May be used internally be the implementation</doc><path><resolved><identifier><type>exn</type></identifier></resolved></path></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>mutex</class_type><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>mutex</class_type>lock</method><doc>In a multi-threaded program: Suspends the calling thread until the
mutex is locked.
In a single-threaded program: This is a no-op</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>mutex</class_type>unlock</method><doc>In a multi-threaded program: Unlocks a mutex.
In a single-threaded program: This is a no-op</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>mutex</class_type>try_lock</method><doc>In a multi-threaded program: Tries to immediately lock the mutex,
and returns whether the lock could be obtained.
In a single-threaded program: returns <code>true</code></doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>mutex</class_type>repr</method><doc>May be used internally be the implementation</doc><path><resolved><identifier><type>exn</type></identifier></resolved></path></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>condition</class_type><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>condition</class_type>wait</method><doc>In a multi-threaded program: Wait for the condition to be true
and use the mutex to protect this situation.
In a single-threaded program: this is a no-op.</doc><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>mutex</class_type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>condition</class_type>signal</method><doc>In a multi-threaded program: Signal one process that the condition
holds.
In a single-threaded program: this is a no-op.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>condition</class_type>broadcast</method><doc>In a multi-threaded program: Signal all waiting processes that the
condition holds.
In a single-threaded program: this is a no-op.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>condition</class_type>repr</method><doc>May be used internally be the implementation</doc><path><resolved><identifier><type>exn</type></identifier></resolved></path></method></signature></class_type><value><value><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>provider</value><doc>Return the multi-threading provider</doc><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>ref</type></resolved><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>mtprovider</class_type></identifier></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>serialize</value><doc><code>serialize m f arg</code>: Locks <code>m</code>, runs <code>f arg</code>, unlocks <code>m</code>, and returns
the result.</doc><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netsys_oothr" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_oothr.cmti" digest="648545d77304e38edd70604dfa9df04b"/></xml></base>Netsys_oothr</root>mutex</class_type></identifier></resolved></path><arrow><arrow><var>a</var><var>b</var></arrow><arrow><var>a</var><var>b</var></arrow></arrow></arrow></value></unit>