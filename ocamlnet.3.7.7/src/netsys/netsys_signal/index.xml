<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></html></base>Netsys_signal</root><digest>703311022efc5162433d614b9bef35af</digest><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><source><file>netsys_signal.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys</dir><digest>e49461b53235084921c893332c2e3d3b</digest></source><doc>Signal handler framework<newline/>This module defines a simple framework for setting signal handlers.
When two modules want to set the handler for the same signal, the framework
decides in which order the handlers are executed.<newline/>The module also defines an empty handler list for <code>Sys.sigpipe</code>, so these
signals are ignored by the program. This empty list can be extended,
however.<newline/>Win32: Only <code>Sys.sigint</code> handlers can effectively be registered.
Registrations for other signal types are accepted but ignored.</doc><value><value><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>register_handler</value><doc>This function registers a handler called <code>name</code> for signal number
<code>signal</code>. The handler function is <code>callback</code>. The int argument of
the callback is the signal number.<newline/>By default, the handler is an application handler. If <code>library</code> is set,
the handler is for this library. The name passed as <code>library</code> is the
findlib name of the library.<newline/>By registering another handler for the same <code>library</code>, <code>name</code>, and
<code>signal</code>, the old handler is overridden.<newline/>When several handlers are defined for the same signal, all handlers
are executed that are defined for the signal (when the signal happens).
The order of execution is given by <code>priority</code>. The handler functions
are executed in ascending priority order. If the priority number is
equal for two handlers, the order is undefined.<newline/>The priority defaults to 0 for library handlers, and to 100 for
application handlers. Libraries should only use values from 0 to 99,
and applications only from 100 to 199.<newline/>If all handlers for a certain signal set <code>keep_default</code>, then there
will be a special action after all signal handlers have been executed.
The special action emulates the default behavior for the signal.
For now, there is only a simple emulation: If the signal terminates
the process, the process is immediately exited with code 126.
If the default behaviour is &quot;no-op&quot;, nothing happens. We don't try
(yet) to do better (emulate core-dumps, emulate the right process
status) because this is difficult in the general case.<newline/>The handler definition takes place immediately.<newline/>Any exceptions occuring during the execution of a handler are caught
and ignored.</doc><arrow><optional>library</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><optional>priority</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>keep_default</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><label>name</label><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><label>signal</label><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><label>callback</label><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>register_exclusive_handler</value><doc>An exclusive handler for a signal is the only handler for the signal.
If it is tried to register another handler when there is already
an exclusive handler, the second registration fails. Also, an
exclusive handler cannot be registered when there is already a normal
handler for the signal. It is, however, possible to replace the
registered exclusive handler by another exclusive handler for the
same signal.<newline/>An exclusive handler is installed by running the <code>install</code> function,
which can e.g. call <code>Sys.set_signal</code> to define the handler. Other
methods (e.g. use some C wrapper) are also possible. It is assumed
that <code>install</code> overrides any existing handler.</doc><arrow><label>name</label><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><label>signal</label><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><label>install</label><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>restore_management</value><doc><code>restore_management signo</code>: Restores signal handling management for
<code>signo</code> as defined by
the handler list for this signal. Calling <code>restore_management</code> makes
sense when
the signal handler has been overridden with <code>Sys.set_signal</code>, but at
some point this module is again responsible for managing the signal
handling for this signal.</doc><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>keep_away_from</value><doc><code>keep_away_from signo</code>: This signal <code>signo</code> is added to the
&quot;keep away list&quot;. This means that this module will never try to
change the signal behavior again for <code>signo</code>. Even <code>restore_management</code>
will not restore the signal handling again. This function should only
by called by applications wishing to do the signal handling all
themselves.<newline/>This function does not have any effect on the already installed
handlers. It is nevertheless useful for applications calling
<code>Sys.set_signal</code> directly to ensure that <code>Netsys_signal</code> will never
again try to override the handler.</doc><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><type><type><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>action</type><doc><code>`Callback</code> is used for normal handlers, and <code>`Install</code> for exclusive
handlers.</doc><poly_variant><fixed/><constructor>Callback<arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></constructor><constructor>Install<arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>entry</type><record><field><field><type><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>entry</type>sig_number</field><path><resolved><identifier><type>int</type></identifier></resolved></path></field><field><field><type><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>entry</type>sig_library</field><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></field><field><field><type><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>entry</type>sig_priority</field><path><resolved><identifier><type>int</type></identifier></resolved></path></field><field><field><type><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>entry</type>sig_keep_default</field><path><resolved><identifier><type>bool</type></identifier></resolved></path></field><field><field><type><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>entry</type>sig_name</field><path><resolved><identifier><type>string</type></identifier></resolved></path></field><field><field><type><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>entry</type>sig_action</field><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>action</type></identifier></resolved></path></field></record></type><value><value><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>list</value><doc>Returns the list of signal handlers</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>entry</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>keep_away_list</value><doc>Returns the &quot;keep away list&quot;.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>init</value><doc>Call this function to ensure that this module is initialized. It is
also possible to call any other function. After initialization the
Sigpipe handler is set.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><comment><title level="1">Debugging</title></comment><module><module><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>Debug</module><type><signature><value><value><module><root><base><xml src="index.xml"><cmti name="Netsys_signal" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netsys_signal.cmti" digest="703311022efc5162433d614b9bef35af"/></xml></base>Netsys_signal</root>Debug</module>enable</value><doc>Enables <reference><element><root>Netlog</root></element></reference>-style debugging of this module</doc><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>ref</type></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></value></signature></type></module></unit>