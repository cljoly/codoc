<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Netexn" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netexn.cmti" digest="845c6110cc81d957d9fc21c9e149d5fb"/></xml></html></base>Netexn</root><digest>845c6110cc81d957d9fc21c9e149d5fb</digest><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><source><file>netexn.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys</dir><digest>ec1eefc557926bd1c3979e9e83f7759e</digest></source><doc>Exception registry<newline/>This module allow the user to register exceptions, and to set a
custom exception printing function. This results in nicer exception
prints when <code>Netexn.to_string</code> is called instead of <code>Printexc.to_string</code>.<newline/>Generally, <code>Printexc.to_string</code> works well if:<list><item>the exception does not have arguments, or</item><item>all arguments are int's or string's.</item></list>In these cases it is not required to register a custom printer. Arguments
that are neither int nor string are printed as &quot;_&quot;, however, so defining
a custom printer helps then.<newline/>The printers registered here are intended for helping debugging, so
the goal is to print all of the exception in an unambiguous way.
The syntax &quot;Exception(arg1, arg2, ...)&quot; is preferred.<newline/><bold>Since OCaml 3.11.2 there is a similar feature in <code>Printexc</code>.</bold>
If Ocamlnet recognizes that <code>Printexc.register_printer</code> is available,
all functions registered in this module are also registered at
the central <code>Printexc</code> registry. For users it does not make a difference
then whether <code>Netexn.to_string</code> or <code>Printexc.to_string</code> is called
to print the exception. We recommend, however, to use <code>Netexn</code> as
primary registry for all code that uses Ocamlnet because this
mechanism also works for older Ocaml versions, and is slightly more
efficient.</doc><value><value><root><base><xml src="index.xml"><cmti name="Netexn" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netexn.cmti" digest="845c6110cc81d957d9fc21c9e149d5fb"/></xml></base>Netexn</root>register_printer</value><doc><code>register e f</code>: Register that the exception type of the sample
exception <code>e</code> is to be printed by <code>f</code>.<newline/>In multi-threaded programs, this function should no longer be called
once threads have been spawned.</doc><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><arrow><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netexn" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netexn.cmti" digest="845c6110cc81d957d9fc21c9e149d5fb"/></xml></base>Netexn</root>to_string</value><doc>Prints the exception as string, using the registered printer functions,
or <code>Printexc.to_string</code> as fallback if there is no better printer</doc><arrow><path><resolved><identifier><type>exn</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value></unit>