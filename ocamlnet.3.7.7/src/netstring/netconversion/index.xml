<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></html></base>Netconversion</root><digest>192a0e1fae2f882e5f06cf84e9f3da38</digest><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>Netbuffer<digest>5f4225f2baeef1584e246c6ce1d32119</digest></import><import>Netchannels<digest>4e22bd1ba0cae4bd9bd1b6e69fc16ade</digest></import><import>Netsys_mem<digest>f19ef786301a8cbcfbf1a4fffee992f8</digest></import><import>Netsys_types<digest>67b26630eaf4decaa483864d4d00a3a2</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><source><file>netconversion.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring</dir><digest>ba8083773b61d2ca80d25589359201e1</digest></source><doc>Conversion between character encodings<newline/><bold>Contents</bold>
<list><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>preliminaries</label></resolved></element></reference>
<list><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>unicode</label></resolved></element></reference></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>subsets</label></resolved></element></reference></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>linking</label></resolved></element></reference></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>domain</label></resolved></element></reference></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>problems</label></resolved></element></reference></item></list></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>interface</label></resolved></element></reference>
<list><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>direct_conv</label></resolved></element></reference></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>cursors</label></resolved></element></reference>
<list><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>bom</label></resolved></element></reference></item></list></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>unicode_functions</label></resolved></element></reference></item></list></item></list></doc><comment><title level="1"><label><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>preliminaries</label>Preliminaries</title><newline/>A <bold>character set</bold> is a set of characters where every character is
identified by a <bold>code point</bold>. An <bold>encoding</bold> is a way of
representing characters from a set in byte strings. For example,
the Unicode character set has more than 96000 characters, and
the code points have values from 0 to 0x10ffff (not all code points
are assigned yet). The UTF-8 encoding represents the code points
by sequences of 1 to 4 bytes. There are also encodings that
represent code points from several sets, e.g EUC-JP covers four
sets.<newline/>Encodings are enumerated by the type <code>encoding</code>, and names follow
the convention <code>`Enc_*</code>, e.g. <code>`Enc_utf8</code>.
Character sets are enumerated by the type
<code>charset</code>, and names follow the convention <code>`Set_*</code>, e.g.
<code>`Set_unicode</code>.<newline/>This module deals mainly with encodings. It is important to know
that the same character set may have several encodings. For example,
the Unicode character set can be encoded as UTF-8 or UTF-16.
For the 8 bit character sets, however, there is usually only one
encoding, e.g <code>`Set_iso88591</code> is always encoded as <code>`Enc_iso88591</code>.<newline/>In a <bold>single-byte encoding</bold> every code point is represented by
one byte. This is what many programmers are accustomed at, and
what the O'Caml language specially supports: A <code>string</code> is
a sequence of <code>char</code>s, where <code>char</code> means an 8 bit quantity
interpreted as character. For example, the following piece of code allocates
a <code>string</code> of four <code>char</code>s, and assigns them individually:<newline/><precode>   let s = String.create 4 in
   s.[0] &lt;- 'G';
   s.[1] &lt;- 'e';
   s.[2] &lt;- 'r';
   s.[3] &lt;- 'd';</precode><newline/>In a <bold>multi-byte encoding</bold> there are code points that are represented
by several bytes. As we still represent such text as <code>string</code>, the
problem arises that a single <code>char</code>, actually a byte, often represents
only a fraction of a full multi-byte character. There are two solutions:<list><item>Give up the principle that text is represented by <code>string</code>.
This is, for example, the approach chosen by <code>Camomile</code>, another O'Caml
library dealing with Unicode. Instead, text is represented as
<code>int array</code>. This way, the algorithms processing the text can
remain the same.</item><item>Give up the principle that individual characters can be directly
accessed in a text. This is the primary way chosen by Ocamlnet.
This means that there is not any longer the possibility to read
or write the <code>n</code>th character of a text. One can, however, still
compose texts by just concatenating the strings representing
individual characters. Furthermore, it is possible to define
a cursor for a text that moves sequentially along the text.
The consequence is that programmers are restricted to sequential
algorithms. Note that the majority of text processing falls into
this class.</item></list>The corresponding piece of code for Ocamlnet's Unicode implementation
is:
<precode>   let b = Buffer.create 80 in
   Buffer.add b (ustring_of_uchar `Enc_utf8 71);  (* 71 = code point of 'G' *)
   Buffer.add b (ustring_of_uchar `Enc_utf8 101); (* 101 = code point of 'e' *)
   Buffer.add b (ustring_of_uchar `Enc_utf8 114); (* 114 = code point of 'r' *)
   Buffer.add b (ustring_of_uchar `Enc_utf8 100); (* 100 = code point of 'd' *)
   let s = Buffer.contents b</precode><newline/>It is important to always remember that a <code>char</code> is no longer
a character but simply a byte. In many of the following explanations,
we strictly distinguish between <bold>byte positions</bold> or <bold>byte counts</bold>,
and <bold>character positions</bold> or <bold>character counts</bold>.<newline/>There a number of special effects that usually only occur in
multi-byte encodings:<newline/><list><item>Bad encodings: Not every byte sequence is legal. When scanning
such text, the functions will raise the exception <code>Malformed_code</code>
when they find illegal bytes.</item><item>Unassigned code points: It may happen that a byte sequence is
a correct representation for a code point, but that the code point
is unassigned in the character set. When scanning, this is also
covered by the exception <code>Malformed_code</code>. When converting from
one encoding to another, it is also possible that the code point
is only unassigned in the target character set. This case is
usually handled by a substitution function <code>subst</code>, and if no such
function is defined, by the exception <code>Cannot_represent</code>.</item><item>Incomplete characters: The trailing bytes of a string may be the
correct beginning of a byte sequence for a character, but not a
complete sequence. Of course, if that string is the end of a
text, this is just illegal, and also a case for <code>Malformed_code</code>.
However, when text is processed chunk by chunk, this phenomenon
may happen legally for all chunks but the last. For this reason,
some of the functions below handle this case specially.</item><item>Byte order marks: Some encodings have both big and little endian
variants. A byte order mark at the beginning of the text declares
which variant is actually used. This byte order mark is a
declaration written like a character, but actually not a
character.</item></list>There is a special class of encodings known as <bold>ASCII-compatible</bold>.
They are important because there are lots of programs and protocols
that only interpret bytes from 0 to 127, and treat the bytes from
128 to 255 as data. These programs can process texts as long as
the bytes from 0 to 127 are used as in ASCII. Fortunately, many
encodings are ASCII-compatible, including UTF-8.<newline/><title level="2"><label><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>unicode</label>Unicode</title><newline/><code>Netconversion</code> is centred around Unicode.
The conversion from one encoding to another works by finding the
Unicode code point of the character
to convert, and by representing the code point in the target encoding,
even if neither encodings have to do with Unicode.
Of course, this approach requires that all character sets handled
by <code>Netconversion</code> are subsets of Unicode.<newline/>The supported range of Unicode code points: 0 to 0xd7ff, 0xe000 to 0xfffd,
0x10000 to 0x10ffff. All these code points can be represented in
UTF-8 and UTF-16. <code>Netconversion</code> does not know which of the code
points are assigned and which not, and because of this, it simply
allows all code points of the mentioned ranges (but for other character
sets, the necessary lookup tables exist).<newline/><bold>UTF-8:</bold> The UTF-8 representation can have one to four bytes. Malformed
byte sequences are always rejected, even those that want to cheat the
reader like &quot;0xc0 0x80&quot; for the code point 0. There is special support
for the Java variant of UTF-8 (<code>`Enc_java</code>). UTF-8 strings must not
have a byte order mark (it would be interpreted as &quot;zero-width space&quot;
character).<newline/><bold>UTF-16:</bold> When reading from a string encoded as <code>`Enc_utf16</code>, a byte
order mark is expected at the beginning. The detected variant
(<code>`Enc_utf16_le</code> or <code>`Enc_utf16_be</code>) is usually returned by the parsing
function. The byte order mark is not included into the output string. -
Some functions of this
module cannot cope with <code>`Enc_utf16</code> (i.e. UTF-16 without endianess
annotation), and will fail.<newline/>Once the endianess is determined, the code point 0xfeff is no longer
interpreted as byte order mark, but as &quot;zero-width non-breakable space&quot;.<newline/>Some code points are represented by pairs of 16 bit values, these
are the so-called &quot;surrogate pairs&quot;. They can only occur in UTF-16.<newline/><title level="2"><label><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>subsets</label>Subsets of Unicode</title><newline/>The non-Unicode character sets are subsets of Unicode. Here, it may
happen that a Unicode code point does not have a corresponding
code point. In this case, certain rules are applied to handle
this (see below). It is, however, ensured that every non-Unicode
code point has a corresponding Unicode code point. (In other words,
character sets cannot be supported for which this property does
not hold.)<newline/>It is even possible to create further subsets artificially. The
encoding <code>`Enc_subset(e,def)</code> means to derive a new encoding from
the existing one <code>e</code>, but to only accept the code points for which
the definition function <code>def</code> yields the value <code>true</code>. For example,
the encoding
<precode>`Enc_subset(`Enc_usascii, 
               fun i -&gt; i &lt;&gt; 34 &amp;&amp; i &lt;&gt; 38 &amp;&amp; i &lt;&gt; 60 &amp;&amp; i &lt;&gt; 62)</precode>
is ASCII without the bracket angles, the quotation mark, and the
ampersand character, i.e. the subset of ASCII that can be included
in HTML text without escaping.<newline/>If a code point is not defined by the encoding but found in a text,
the reader will raise the exception <code>Malformed_code</code>. When text is
output, however, the <code>subst</code> function will be called for undefined code
points (which raises <code>Cannot_represent</code> by default). The <code>subst</code>
function is an optional argument of many conversion functions that
allows it to insert a substitution text for undefined code points.
Note, however, that the substitution text is restricted to at most
50 characters (because unlimited length would lead to difficult
problems we would like to avoid).<newline/><title level="2"><label><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>linking</label>Linking this module</title><newline/>Many encodings require lookup tables. The following encodings
are built-in and always supported:<newline/><list><item>Unicode: <code>`Enc_utf8</code>, <code>`Enc_java</code>, <code>`Enc_utf16</code>, <code>`Enc_utf16_le</code>,
<code>`Enc_utf16_be</code></item><item>Other: <code>`Enc_usascii</code>, <code>`Enc_iso88591</code>, <code>`Enc_empty</code></item></list>The lookup tables for the other encodings are usually loaded at
runtime, but it is also possible to embed them in the generated
binary executable. See the file <code>INSTALL</code> for details. The functions
<code>available_input_encodings</code> and <code>available_output_encodings</code> can
be invoked to find out which encodings can be loaded, or are available
otherwise.<newline/><title level="2"><label><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>domain</label>Supported Encodings, Restrictions</title><newline/>I took the mappings from <code>www.unicode.org</code>, and the standard names of
the character sets from IANA. Obviously, many character sets are missing
that can be supported; especially ISO646 character sets, and many EBCDIC
code pages. Stateful encodings like generic ISO-2022 have been omitted
(stateless subsets of ISO-2022 like EUC can be supported, however;
currently we support EUC-JP and EUC-KR).<newline/>Because of the copyright statement from Unicode, I cannot put the
source tables that describe the mappings into the distribution. They
are publicly available from <code>www.unicode.org</code>.<newline/><title level="2"><label><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>problems</label>Known Problems</title><newline/><list><item>The following charsets do not have a bijective mapping to Unicode:
adobe_standard_encoding, adobe_symbol_encoding,
adobe_zapf_dingbats_encoding, cp1002 (0xFEBE). The current implementation
simply removes one of the conflicting code point pairs - this might
not what you want.</item><item>Japanese encodings:
JIS X 0208: The character 1/32 is mapped to 0xFF3C, and not
to 0x005C.</item></list></comment><comment><title level="1"><label><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>interface</label>Interface</title><newline/><bold>Naming conventions:</bold><newline/>As it is possible to refer to substrings by either giving a byte
offset or by counting whole characters, these naming conventions
are helpful:<newline/><list><item>Labels called <code>range_pos</code> and <code>range_len</code> refer to byte positions of
characters, or substrings</item><item>Labels called <code>count</code> refer to positions given as the number of characters
relative to an origin</item></list>Furthermore:<newline/><list><item>A <code>uchar</code> is a single Unicode code point represented as int</item><item>A <code>ustring</code> is a string of encoded characters</item><item>A <code>uarray</code> is an <code>array of int</code> representing a string</item></list></comment><exception><exception><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>Malformed_code</exception><doc>Raised when an illegal byte sequence is found</doc></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>Cannot_represent</exception><doc>Raised when a certain Unicode code point cannot be represented in
the selected output encoding</doc><arguments><path><resolved><identifier><type>int</type></identifier></resolved></path></arguments></exception><type><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type><poly_variant><fixed/><constructor>Enc_utf8<constant/></constructor><constructor>Enc_java<constant/></constructor><constructor>Enc_utf16<constant/></constructor><constructor>Enc_utf16_le<constant/></constructor><constructor>Enc_utf16_be<constant/></constructor><constructor>Enc_usascii<constant/></constructor><constructor>Enc_iso88591<constant/></constructor><constructor>Enc_iso88592<constant/></constructor><constructor>Enc_iso88593<constant/></constructor><constructor>Enc_iso88594<constant/></constructor><constructor>Enc_iso88595<constant/></constructor><constructor>Enc_iso88596<constant/></constructor><constructor>Enc_iso88597<constant/></constructor><constructor>Enc_iso88598<constant/></constructor><constructor>Enc_iso88599<constant/></constructor><constructor>Enc_iso885910<constant/></constructor><constructor>Enc_iso885911<constant/></constructor><constructor>Enc_iso885913<constant/></constructor><constructor>Enc_iso885914<constant/></constructor><constructor>Enc_iso885915<constant/></constructor><constructor>Enc_iso885916<constant/></constructor><constructor>Enc_koi8r<constant/></constructor><constructor>Enc_jis0201<constant/></constructor><constructor>Enc_eucjp<constant/></constructor><constructor>Enc_euckr<constant/></constructor><constructor>Enc_windows1250<constant/></constructor><constructor>Enc_windows1251<constant/></constructor><constructor>Enc_windows1252<constant/></constructor><constructor>Enc_windows1253<constant/></constructor><constructor>Enc_windows1254<constant/></constructor><constructor>Enc_windows1255<constant/></constructor><constructor>Enc_windows1256<constant/></constructor><constructor>Enc_windows1257<constant/></constructor><constructor>Enc_windows1258<constant/></constructor><constructor>Enc_cp437<constant/></constructor><constructor>Enc_cp737<constant/></constructor><constructor>Enc_cp775<constant/></constructor><constructor>Enc_cp850<constant/></constructor><constructor>Enc_cp852<constant/></constructor><constructor>Enc_cp855<constant/></constructor><constructor>Enc_cp856<constant/></constructor><constructor>Enc_cp857<constant/></constructor><constructor>Enc_cp860<constant/></constructor><constructor>Enc_cp861<constant/></constructor><constructor>Enc_cp862<constant/></constructor><constructor>Enc_cp863<constant/></constructor><constructor>Enc_cp864<constant/></constructor><constructor>Enc_cp865<constant/></constructor><constructor>Enc_cp866<constant/></constructor><constructor>Enc_cp869<constant/></constructor><constructor>Enc_cp874<constant/></constructor><constructor>Enc_cp1006<constant/></constructor><constructor>Enc_cp037<constant/></constructor><constructor>Enc_cp424<constant/></constructor><constructor>Enc_cp500<constant/></constructor><constructor>Enc_cp875<constant/></constructor><constructor>Enc_cp1026<constant/></constructor><constructor>Enc_cp1047<constant/></constructor><constructor>Enc_adobe_standard_encoding<constant/></constructor><constructor>Enc_adobe_symbol_encoding<constant/></constructor><constructor>Enc_adobe_zapf_dingbats_encoding<constant/></constructor><constructor>Enc_macroman<constant/></constructor><constructor>Enc_subset<tuple><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></tuple></constructor><constructor>Enc_empty<constant/></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>charset</type><doc>A <code>charset</code> is simply a set of code points. It does not say how
the code points are encoded as bytes. Every encoding implies a certain
charset (or several charsets) that can be encoded, but the reverse is
not true.</doc><poly_variant><fixed/><constructor>Set_unicode<constant/></constructor><constructor>Set_usascii<constant/></constructor><constructor>Set_iso88591<constant/></constructor><constructor>Set_iso88592<constant/></constructor><constructor>Set_iso88593<constant/></constructor><constructor>Set_iso88594<constant/></constructor><constructor>Set_iso88595<constant/></constructor><constructor>Set_iso88596<constant/></constructor><constructor>Set_iso88597<constant/></constructor><constructor>Set_iso88598<constant/></constructor><constructor>Set_iso88599<constant/></constructor><constructor>Set_iso885910<constant/></constructor><constructor>Set_iso885911<constant/></constructor><constructor>Set_iso885913<constant/></constructor><constructor>Set_iso885914<constant/></constructor><constructor>Set_iso885915<constant/></constructor><constructor>Set_iso885916<constant/></constructor><constructor>Set_koi8r<constant/></constructor><constructor>Set_jis0201<constant/></constructor><constructor>Set_jis0208<constant/></constructor><constructor>Set_jis0212<constant/></constructor><constructor>Set_ks1001<constant/></constructor><constructor>Set_windows1250<constant/></constructor><constructor>Set_windows1251<constant/></constructor><constructor>Set_windows1252<constant/></constructor><constructor>Set_windows1253<constant/></constructor><constructor>Set_windows1254<constant/></constructor><constructor>Set_windows1255<constant/></constructor><constructor>Set_windows1256<constant/></constructor><constructor>Set_windows1257<constant/></constructor><constructor>Set_windows1258<constant/></constructor><constructor>Set_cp437<constant/></constructor><constructor>Set_cp737<constant/></constructor><constructor>Set_cp775<constant/></constructor><constructor>Set_cp850<constant/></constructor><constructor>Set_cp852<constant/></constructor><constructor>Set_cp855<constant/></constructor><constructor>Set_cp856<constant/></constructor><constructor>Set_cp857<constant/></constructor><constructor>Set_cp860<constant/></constructor><constructor>Set_cp861<constant/></constructor><constructor>Set_cp862<constant/></constructor><constructor>Set_cp863<constant/></constructor><constructor>Set_cp864<constant/></constructor><constructor>Set_cp865<constant/></constructor><constructor>Set_cp866<constant/></constructor><constructor>Set_cp869<constant/></constructor><constructor>Set_cp874<constant/></constructor><constructor>Set_cp1006<constant/></constructor><constructor>Set_cp037<constant/></constructor><constructor>Set_cp424<constant/></constructor><constructor>Set_cp500<constant/></constructor><constructor>Set_cp875<constant/></constructor><constructor>Set_cp1026<constant/></constructor><constructor>Set_cp1047<constant/></constructor><constructor>Set_adobe_standard_encoding<constant/></constructor><constructor>Set_adobe_symbol_encoding<constant/></constructor><constructor>Set_adobe_zapf_dingbats_encoding<constant/></constructor><constructor>Set_macroman<constant/></constructor></poly_variant></type><comment><bold>Pre-evaluation of the encoding argument:</bold><newline/>A number of the following functions can be made run faster if they are
called several times for the same encoding. In this case, it is recommended
to apply the function once partially with the encoding argument, and to
call the resulting closure instead. For example, <code>ustring_of_uchar</code> supports
this technique:<newline/><precode>     let my_ustring_of_uchar = ustring_of_uchar my_enc in
     let s1 = my_ustring_of_uchar u1 ...
     let s2 = my_ustring_of_uchar u2 ...</precode><newline/>This is <bold>much</bold> faster than<newline/><precode>     let s1 = ustring_of_uchar my_enc u1 ...
     let s2 = ustring_of_uchar my_enc u2 ...</precode><newline/>The availability of this optimization is indicated by the predicate
PRE_EVAL(<italic>arg</italic>) where <italic>arg</italic> identifies the encoding argument.<newline/><bold>Inlining</bold><newline/>When a function can be inlined across module/library boundaries,
this is indicated by the predicate INLINED. Of course, this works
only for the ocamlopt compiler.</comment><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding_of_string</value><doc>Returns the encoding of the name of the encoding. Fails if the
encoding is unknown.
E.g. <code>encoding_of_string &quot;iso-8859-1&quot; = `Enc_iso88591</code><newline/>Punctuation characters (e.g. &quot;-&quot;) and year suffixes (e.g.
&quot;:1991&quot;) are ignored.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>string_of_encoding</value><doc>Returns the name of the encoding.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>is_ascii_compatible</value><doc>&quot;ASCII compatible&quot; means: The bytes 1 to 127 represent the ASCII
codes 1 to 127, and no other representation of a character contains
the bytes 1 to 127.<newline/>For example, ISO-8859-1 is ASCII-compatible because the byte 1 to
127 mean the same as in ASCII, and all other characters use bytes
greater than 127. UTF-8 is ASCII-compatible for the same reasons,
it does not matter that there are multi-byte characters.
EBCDIC is not ASCII-compatible because the bytes 1 to 127 do not mean
the same as in ASCII. UTF-16 is not ASCII-compatible because the bytes
1 to 127 can occur in multi-byte representations of non-ASCII
characters.<newline/>The byte 0 has been excluded from this definition because the C
language uses it with a special meaning that has nothing to do with
characters, so it is questionable to interpret the byte 0 anyway.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>is_single_byte</value><doc>Returns whether the encoding is a single-byte encoding</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>same_encoding</value><doc>Whether both encodings are the same. <code>`Enc_subset</code> encodings are only
considered as equal when the definition functions are physically the same.<newline/>Warning: Don't use ( = ) to compare encodings because this may
fail.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>byte_order_mark</value><doc>Returns the byte order mark that must occur at the beginning of
files to indicate whether &quot;little endian&quot; or &quot;big endian&quot; is used.
If this does not apply to the encoding, an empty string is returned.<newline/>See also the section about &quot;<reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>bom</label></resolved></element></reference>&quot; below.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>makechar</value><doc><code>makechar enc i:</code>
Creates the string representing the Unicode code point <code>i</code> in encoding
<code>enc</code>. Raises <code>Not_found</code> if the character is legal but cannot be
represented in <code>enc</code>.<newline/>Possible encodings: everything but <code>`Enc_utf16</code>.<newline/>Evaluation hints:<list><item>PRE_EVAL(encoding)</item></list><deprecated>This function is deprecated since ocamlnet-0.96. Use
<code>ustring_of_uchar</code> instead.</deprecated></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>ustring_of_uchar</value><doc><code>ustring_of_uchar enc i</code>:
Creates the string representing the Unicode code point <code>i</code> in encoding
<code>enc</code>. Raises <code>Cannot_represent i</code> if the character is legal but cannot be
represented in <code>enc</code>.<newline/>Possible encodings: everything but <code>`Enc_utf16</code>.<newline/>Evaluation hints:<list><item>PRE_EVAL(encoding)</item></list></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>to_unicode</value><doc>Maps the code point of the charset to the corresponding
Unicode code point, or raises <code>Malformed_code</code>, when the
input number does not correspond to a code point.<newline/>Note <code>`Set_jis0208</code> and <code>`Set_jis0212</code>: Code points are usually
given by a row and column number. The numeric code point returned by
this function is computed by multiplying the row number (1..94) with 96,
and by adding the column number (1..94), i.e. row*96+column.<newline/>Evaluation hints:<list><item>PRE_EVAL(charset)</item></list></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>charset</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>from_unicode</value><doc>Maps the Unicode code point to the corresponding code point of
the charset, or raises <code>Cannot_represent</code> when there is no such
corresponding code point.<newline/>Note <code>`Set_jis0208</code> and <code>`Set_jis0212</code>: Code points are usually
given by a row and column number. The numeric code point returned by
this function is computed by multiplying the row number (1..94) with 96,
and by adding the column number (1..94), i.e. row*96+column.<newline/>Evaluation hints:<list><item>PRE_EVAL(charset)</item></list></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>charset</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>available_input_encodings</value><doc>Returns the list of all available encodings that can be used for
input strings. The list reflects the set of loadable/linked <code>Netmapping</code>
modules.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>available_output_encodings</value><doc>Returns the list of all available encodings that can be used for
output strings. The list reflects the set of loadable/linked <code>Netmapping</code>
modules.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>user_encoding</value><doc>Determines the preferred user encoding:<newline/><list><item>Unix: This is the character set from the current locale</item><item>Win32: This is derived from the current ANSI code page</item></list>If an error occurs while determining the result, the value
<code>None</code> is returned.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>win32_code_pages</value><doc>Mapping between Win32 code page numbers and Ocamlnet encodings.
This is incomplete. The official list:
http://msdn.microsoft.com/en-us/library/dd317756%28v=VS.85%29.aspx</doc><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path></tuple></path></value><comment><title level="2"><label><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>direct_conv</label>Direct Conversion</title></comment><comment>In order to convert a string from one encoding to another, call
<code>convert</code> like in<newline/><precode>let s_utf8 = 
      convert ~in_enc:`Enc_iso88591 ~out_enc:`Enc_utf8 s_latin1</precode><newline/>which converts the ISO-8859-1 string <code>s_latin1</code> to the UTF-8 string
<code>s_utf8</code>.<newline/>It is also possible to convert while reading from or writing to a file.
This use case is effectively handled by the class
<reference><element><resolved><class><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>conversion_pipe</class></resolved></element></reference>.
See the explanations of this class for examples.</comment><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>convert</value><doc>Converts the string from <code>in_enc</code> to <code>out_enc</code>, and returns it.
The string must consist of a whole number of characters. If it
ends with an incomplete multi-byte character, however, this is
detected, and the exception <code>Malformed_code</code> will be raised.
This exception is also raised for other encoding errors in the
input string.<param><name>subst</name>This function is invoked for code points of <code>in_enc</code> that
cannot be represented in <code>out_enc</code>, and the result of the function
invocation is substituted (directly, without any further conversion).
Restriction: The string returned by <code>subst</code> must not be longer than 50
bytes.
If <code>subst</code> is missing, <code>Cannot_represent</code> is raised in this case.</param><param><name>range_pos</name>Selects a substring for conversion. <code>range_pos</code>
is the byte position of the first character of the substring.
(Default: 0)</param><param><name>range_len</name>Selects a substring for conversion. <code>range_len</code>
is the length of the substring in bytes (Default: Length
of the input string minus <code>range_pos</code>)</param></doc><arrow><optional>subst</optional><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow><arrow><label>in_enc</label><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><label>out_enc</label><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><optional>range_pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>range_len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>recode_string</value><doc>Recodes a complete string from <code>in_enc</code> to <code>out_enc</code>, and returns it.
The function <code>subst</code> is invoked for code points of <code>in_enc</code> that cannot
be represented in <code>out_enc</code>, and the result of the function invocation
is substituted.
Restriction: The string returned by <code>subst</code> must not be longer than 50
bytes.
If <code>subst</code> is missing, <code>Not_found</code> is raised in this case.<deprecated>This function is obsolete since ocamlnet-0.96. Use
<code>convert</code> instead.</deprecated></doc><arrow><label>in_enc</label><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><label>out_enc</label><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><optional>subst</optional><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>recode</value><doc>Converts the character sequence contained in the at most <code>in_len</code> bytes
of <code>in_buf</code> starting at byte position <code>in_pos</code>, and writes the result
into at most <code>out_len</code> bytes of <code>out_buf</code> starting at byte position
<code>out_pos</code>. At most <code>max_chars</code> characters are converted from
<code>in_buf</code> to <code>out_buf</code>.<newline/>The characters in <code>in_buf</code> are assumed to be encoded as <code>in_enc</code>, and the
characters in <code>out_buf</code> will be encoded as <code>out_enc</code>. The case
<code>in_enc = out_enc</code> is not handled specially, and is carried out as
fast as any other conversion.<newline/>If there is a code point which cannot be represented in <code>out_enc</code>,
the function <code>subst</code> is called with the code point as argument, and the
resulting string (which must already be encoded as <code>out_enc</code>) is
inserted instead.
It is possible that <code>subst</code> is called several times for the same
character. Restriction: The string returned by subst must not be longer
than 50 bytes.<newline/>It is allowed that the input buffer ends with an incomplete
multi-byte character. This character is not converted, i.e. the
conversion ends just before this character. This special condition
is not indicated to the caller.<return>The triple <code>(in_n, out_n, in_enc')</code> is returned:<list><item><code>in_n</code> is the actual number of bytes that have been converted from
<code>in_buf</code>; <code>in_n</code> may be smaller than <code>in_len</code> because of incomplete
multi-byte characters, or because the output buffer has less space
for characters than the input buffer, or because of a change
of the encoding variant.</item><item><code>out_n</code> is the actual number of bytes written into <code>out_buf</code>.</item><item><code>in_enc'</code> is normally identical to <code>in_enc</code>. However, there are cases
where the encoding can be refined when looking at the byte
sequence; for example whether a little endian or big endian variant
of the encoding is used. <code>in_enc'</code> is the variant of <code>in_enc</code> that was
used for the last converted character.</item></list>If there is at least one complete character in <code>in_buf</code>, and at least
space for one complete character in <code>out_buf</code>, and <code>max_chars &gt;= 1</code>, it is
guaranteed that <code>in_n &gt; 0 &amp;&amp; out_n &gt; 0</code>.</return></doc><arrow><label>in_enc</label><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><label>in_buf</label><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><label>in_pos</label><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><label>in_len</label><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><label>out_enc</label><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><label>out_buf</label><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><label>out_pos</label><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><label>out_len</label><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><label>max_chars</label><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><label>subst</label><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow><tuple><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path></tuple></arrow></arrow></arrow></arrow></arrow></arrow></arrow></arrow></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>conversion_pipe</class><doc>This pipeline class (see <code>Netchannels</code> for more information) can be used
to recode a netchannel while reading or writing. The argument <code>in_enc</code>
is the input encoding, and <code>out_enc</code> is the output encoding.<newline/>The channel must consist of a whole number of characters. If it
ends with an incomplete multi-byte character, however, this is
detected, and the exception <code>Malformed_code</code> will be raised.
This exception is also raised for other encoding errors in the
channel data.<newline/><bold>Example.</bold> Convert ISO-8859-1 to UTF-8 while writing to the file
<code>&quot;output.txt&quot;</code>:<newline/><precode>        let ch = new output_channel (open_out &quot;output.txt&quot;) in
        let encoder = 
          new conversion_pipe ~in_enc:`Enc_iso88591 ~out_enc:`Enc_utf8 () in
        let ch' = new output_filter encoder ch in
        ... (* write to ch' *)
        ch' # close_out();
        ch  # close_out();  (* you must close both channels! *)</precode><newline/>If you write as UTF-16, don't forget to output the byte order
mark yourself, as the channel does not do this.<newline/><bold>Example.</bold> Convert UTF-16 to UTF-8 while reading from the file
<code>&quot;input.txt&quot;</code>:<newline/><precode>        let ch = new input_channel (open_in &quot;input.txt&quot;) in
        let encoder = 
          new conversion_pipe ~in_enc:`Enc_utf16 ~out_enc:`Enc_utf8 () in
        let ch' = new input_filter ch encoder in
        ... (* read from ch' *)
        ch' # close_in();
        ch  # close_in();  (* you must close both channels! *)</precode><param><name>subst</name>This function is invoked for code points of <code>in_enc</code> that
cannot be represented in <code>out_enc</code>, and the result of the function
invocation is substituted (directly, without any further conversion).
Restriction: The string returned by <code>subst</code> must not be longer than 50
bytes.
If <code>subst</code> is missing, <code>Cannot_represent</code> is raised in this case.</param></doc><arrow><optional>subst</optional><path><resolved><identifier><type>option</type></identifier></resolved><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></path><arrow><label>in_enc</label><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><label>out_enc</label><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>io_obj_channel</class_type></resolved></path></arrow></arrow></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>recoding_pipe</class><doc>Recodes a channel like <code>conversion_pipe</code>. The difference is that
<code>subst</code> raises <code>Not_found</code> by default, and not <code>Cannot_represent</code>.<deprecated>This class is deprecated since ocamlnet-0.96. Use
<code>conversion_pipe</code> instead.</deprecated></doc><arrow><optional>subst</optional><path><resolved><identifier><type>option</type></identifier></resolved><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></path><arrow><label>in_enc</label><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><label>out_enc</label><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>io_obj_channel</class_type></resolved></path></arrow></arrow></arrow></arrow></class><comment><title level="2"><label><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursors</label>Reading Text Using Cursors</title><newline/>A cursor is a reference to a character in an encoded string. The
properties of the current character can be obtained, and the cursor
can be moved relative to its current position.<newline/>For example, the following loop outputs the Unicode code points
of all characters of the UTF-8 input string <code>s</code>:<newline/><precode>   let cs = create_cursor `Enc_utf8 s in
   while not (cursor_at_end cs) do
     let n = cursor_char_count cs in
     let ch = uchar_at cs in
     printf &quot;At position %d: %d\n&quot; n ch;
     move cs;
   done</precode><newline/>For a more exact definition, cursors are modeled as follows: The reference
to the encoded string is contained in the cursor. This
can be a complete string, or an arbitrary substring (denoted by a
range of valid byte positions). The cursor
position can be initially set to an arbitrary byte position of the
encoded string.<newline/>Cursor positions can be denoted by<list><item>byte positions <code>p</code> in the encoded string, or by</item><item>character counts <code>n</code> relative to the initial position.</item></list>Valid cursor positions are:<list><item><code>n=0</code>: This is always the initial cursor position</item><item><code>n&gt;0</code>: Positive char counts refer to characters right to the initial
character. The rightmost position is the position <code>n_max</code> past the
rightmost character. The rightmost position does not have a
code point.</item><item><code>n&lt;0</code>: Negative char counts refer to characters left to the initial
character. The leftmost position is the position <code>n_min</code> of the
leftmost character.</item></list>For the empty string we have <code>n_min = n_max = 0</code>, complementing the
above definition.<newline/>Cursors are moved to the left or right of their current position
by a whole number of characters. When it is tried to move them
past the leftmost or rightmost position, the cursor is placed to the
leftmost or rightmost position, respectively, and the exception
<code>Cursor_out_of_range</code> is raised.<newline/>There are two cases of illegal encodings:<list><item>When the last byte sequence of the encoded string is an incomplete
multi-byte character, this is detected, and the special exception
<code>Partial_character</code> is raised when the code point of this character
is read. Note that this can only happen at position <code>n_max-1</code>. It
is allowed to move beyond this character to <code>n_max</code>.</item><item>When an illegal byte sequence occurs in the encoded string (including
an incomplete multi-byte character at the beginning of the string),
it is not possible to move the cursor to this character, or across
this character. When it is tried to do so, the cursor stops just
before the bad sequence, and the exception <code>Malformed_code</code> is
raised.</item></list>It is undefined what happens when the encoded string is modified
while a cursor is in use referring to it.</comment><type><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type><doc>A cursor denotes a character position in an encoded string</doc></type><exception><exception><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>End_of_string</exception><doc>Raised when it is tried to access the character after the end of the
string (at position <code>n_max</code>)</doc></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>Cursor_out_of_range</exception><doc>Raised when it is tried to move the cursor beyond the beginning of the
string or beyond the end of the string. In the latter case, it is
legal to move the cursor to the position following the last character,
but it is not possible to move it further.</doc></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>Partial_character</exception><doc>Raised when the last character of the string is an incomplete
multi-byte character, and it is tried to get the code point
(using <code>uchar_at</code>).</doc></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>Byte_order_mark</exception><doc>Raised when it is tried to get the code point of the BOM at the
beginning of the string</doc></exception><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>create_cursor</value><doc>Creates a new cursor for the passed string and the passed encoding.
By default, the allowed range of the cursor is the whole string,
and the cursor is intially positioned at the beginning of the string.
The <bold>range</bold> is the part of the string the cursor can move within.<newline/><bold>Special behaviour for <code>`Enc_utf16</code>:</bold> UTF-16 with unspecified
endianess is handled specially. First, this encoding is only
accepted when <code>initial_rel_pos=0</code>. Second, the first two bytes
must be a byte order mark (BOM) (if the string has a length of two
bytes or more). The BOM counts as character without code point.
The function <code>uchar_at</code> raises the exception <code>Byte_order_mark</code>
when the BOM is accessed. Third, when the cursor is moved to the
next character, the encoding as returned by <code>cursor_encoding</code> is
changed to either <code>`Enc_utf16_le</code> or <code>`Enc_utf16_be</code> according
to the BOM. The encoding changes back to <code>`Enc_utf16</code> when the
cursor is moved back to the initial position.<param><name>range_pos</name>Restricts the range of the cursor to a substring.
The argument <code>range_pos</code> is the byte position of the beginning
of the range. (Defaults to 0)</param><param><name>range_len</name>Restricts the range of the cursor to a substring.
The argument <code>range_len</code> is the length of the range.
(Default: Length of the input string minus <code>range_pos</code>)</param><param><name>initial_rel_pos</name>The initial position of the cursor, given
as bytes relative to <code>range_pos</code>. The character at this position
is considered as the zeroth character of the string (as reported
by <code>cursor_char_count</code>)</param></doc><arrow><optional>range_pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>range_len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>initial_rel_pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>reinit_cursor</value><doc>Reuses an existing cursor for a new purpose. The arguments are
as in <code>create_cursor</code>.</doc><arrow><optional>range_pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>range_len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>initial_rel_pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>enc</optional><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>copy_cursor</value><doc>Copies the cursor. The copy can be moved independently of the original
cursor, but is applied to the same string. The copy starts at the
byte position of the string where the original cursor is currently
positioned.<param><name>enc</name>Optionally, the assumed
encoding can be changed to a different one by passing <code>enc</code>.</param></doc><arrow><optional>enc</optional><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor_target</value><doc>Returns the string of the cursor<newline/>Evaluation hints:<list><item>INLINED</item></list></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor_range</value><doc>Returns the valid range of the cursor as pair <code>(range_pos, range_len)</code><newline/>Evaluation hints:<list><item>INLINED</item></list></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path><tuple><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></tuple></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor_initial_rel_pos</value><doc>Returns the initial relative byte position of the cursor<newline/>Evaluation hints:<list><item>INLINED</item></list></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor_char_count</value><doc>Returns the character count of the cursor. The initial position
(when <code>create_cursor</code> was called) has the number 0, positions to the
right denote positive numbers, and positions to the left negative numbers.<newline/>Evaluation hints:<list><item>INLINED</item></list></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor_pos</value><doc>Returns the byte position of the cursor, i.e. the byte index of
the string that corresponds to the cursor position. The function
returns the absolute position (i.e. NOT relative to <code>cursor_range</code>).<newline/>Evaluation hints:<list><item>INLINED</item></list></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>uchar_at</value><doc>Returns the Unicode code point of the character at the cursor.
Raises <code>End_of_string</code> if the cursor is positioned past the last
character.
Raises <code>Partial_character</code> if the last character of the analysed
string range is an incomplete multi-byte character.
Raises <code>Byte_order_mark</code> if the first character of the string
is a BOM (when the encoding has BOMs).<newline/>Evaluation hints:<list><item>INLINED</item></list></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor_byte_length</value><doc>Returns the byte length of the representation of the character at the
cursor. This works also for incomplete multi-byte characters and
BOMs.
Raises <code>End_of_string</code> if the cursor is positioned past the last
character.<newline/>Evaluation hints:<list><item>INLINED</item></list></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor_at_end</value><doc>Returns whether the cursor is positioned past the last character.<newline/>Evaluation hints:<list><item>INLINED</item></list></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>move</value><doc>Moves the cursor one character to the right, or if <code>num</code> is passed,
this number of characters to the right. <code>num</code> can be negative in
which case the cursor is moved to the left.<newline/>If the cursor were placed outside the valid range, the cursor
would go into an illegal state, and because of this, this is
handled as follows: the cursor moves to the
leftmost or rightmost position (depending on the direction),
and the exception <code>Cursor_out_of_range</code> is raised.</doc><arrow><optional>num</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor_encoding</value><doc>Returns the encoding of the cursor. For some encodings, the
returned encoding depends on the position of the cursor (see
the note about UTF-8 in <code>create_cursor</code>)<newline/>Evaluation hints:<list><item>INLINED</item></list></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor_blit</value><doc><code>cursor_blit cs ua pos len</code>: Copies at most <code>len</code> characters as code
points from
the cursor position and the following positions to the array <code>ua</code>
at index <code>pos</code>. The number of copied characters is returned.
If the cursor is already at the end of the string when this
function is called, the exception <code>End_of_string</code> will be raised instead,
and no characters are copied. The cursor positions containing byte
order marks and partial characters are never copied; this is ensured
by stopping the copying procedure just before these positions. This
may even make the function return the number 0.<newline/>The function tries to copy as many characters as currently available
in the already decoded part of the string the cursor is attached to.
In the current implementation, this number is not higher than 250.
You can call <code>cursor_blit_maxlen</code> to get an upper limit.<newline/>The function does not move the cursor.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path><arrow><path><resolved><identifier><type>array</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor_blit_maxlen</value><doc>Returns the maximum number of characters <code>cursor_blit</code> can copy
at the current cursor position. This is the number of characters
<code>cursor_blit</code> would copy if the <code>len</code> argument were arbitrarily
large.<newline/>Note that the value depends on the cursor position and on the
contents of the cursor string.<newline/>This function raises <code>End_of_string</code> if the cursor is positioned
at the end of the string.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor_blit_positions</value><doc>Works like <code>cursor_blit</code>, but copies the byte positions of the
characters into <code>ua</code> instead of the code points.<newline/>When called directly after <code>cursor_blit</code> for the same cursor and
with the same value of <code>len</code>, this function copies as many characters
and thus returns the same number:<newline/><precode>let n1 = cursor_blit     cs ua ua_pos len in
     let n2 = cursor_blit_pos cs pa pa_pos len in
     assert (n1 = n2)</precode></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>cursor</type></identifier></resolved></path><arrow><path><resolved><identifier><type>array</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><comment><title level="3"><label><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>bom</label>Byte Order Marks</title><newline/>Because UTF-16 allows both little and big endian, files and other
permanent representations of UTF-16 text are usually prepended by
a byte order mark (BOM). There is confusion about the BOM among
Unicode users, so the following explanations may be helpful.<newline/>Of course, the BOM is only used for external representations like
files, as the endianess is always known for in-memory representations
by the running program. This module has three encoding identifiers:<list><item><code>`Enc_utf16</code>: UTF-16 where the endianess is unknown</item><item><code>`Enc_utf16_le</code>: UTF-16 little endian</item><item><code>`Enc_utf16_be</code>: UTF-16 big endian</item></list>When a file is read, the endianess is unknown at the beginning.
This is expressed by <code>`Enc_utf16</code>. When the BOM is read, the encoding
is refined to either <code>`Enc_utf16_le</code> or <code>`Enc_utf16_be</code>, whatever
the BOM says. This works as follows: The BOM is the representation
of the code point 0xfeff as little or big endian, i.e. as byte sequences
&quot;0xfe 0xff&quot; (big endian) or &quot;0xff 0xfe&quot; (little endian). As the &quot;wrong&quot;
code point 0xfffe is intentionally unused, the reader can determine
the endianess.<newline/>There is one problem, though. Unfortunately, the code point 0xfeff
is also used for the &quot;zero width non-breakable space&quot; character.
When this code point occurs later in the text, it is interpreted as
this character. Of course, this means that one must know whether
there is a BOM at the beginning, and if not, one must know the
endianess. One cannot program in the style &quot;well, let's see what is
coming and guess&quot;.<newline/>Furthermore, the BOM is only used for encodings where one can specify
the endianess. It must not be used for UTF-8, for example, as the
byte order is fixed for this encoding. When a UTF-8 text begins with
the code point 0xfeff, it is always the &quot;zero width non-breakable space&quot;
character.<newline/>The functions of this module can all deal with BOMs when reading
encoded text. In most cases, the BOM is hidden from the caller,
and just handled automatically. Cursors, however, treat BOMs as special
characters outside of the code set (exception <code>Byte_order_mark</code> is
raised). The writing functions of this module do not generate BOMs,
however, as there is no way to tell them that a BOM is needed. The
function <code>byte_order_mark</code> can be used to output the BOM manually.<newline/><title level="3">Examples for Cursors</title><newline/>Create the cursor:<newline/><code>let cs = create_cursor `Enc_utf8 &quot;B\195\164r&quot;;;</code><newline/>The cursor is now positioned at the 'B':<newline/><code>uchar_at cs</code> <italic>returns</italic> <code>66</code> (i.e. B)<newline/>Move the cursor one character to the right. In UTF-8, this is a
two-byte character consisting of the bytes 195 and 164:<newline/><code>move cs ;;</code><newline/><code>uchar_at cs</code> <italic>returns</italic> <code>228</code> (i.e. a-Umlaut)<newline/>One can easily move the cursor to the end of the string:<newline/><code>move ~num:max_int cs ;;</code><newline/>This raises <code>Cursor_out_of_range</code>, but places the cursor at the end.
This is the position past the last letter 'r':<newline/><code>uchar_at cs</code> <italic>raises</italic> <code>End_of_string</code><newline/>Go one character to the left:<newline/><code>move ~num:(-1) cs ;;</code><newline/><code>uchar_at cs</code> <italic>returns</italic> <code>114</code> (i.e. r)<newline/>Cursors can only move relative to their current position. Of course,
one can easily write a function that moves to an absolute position,
like<newline/><precode>let move_abs n cs = 
      let delta = n - cursor_pos cs in
      move ~num:delta cs</precode><newline/>However, this operation is expensive (O(string length)), and should
be avoided for efficient algorithms. Cursors are not arrays, and an
algorithm should only be based on cursors when it is possible to
iterate over the characters of the string one after another.</comment><comment><title level="2"><label><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>unicode_functions</label>Unicode String Functions</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>ustring_length</value><doc>Returns the length of the string in characters. The function fails
when illegal byte sequences or incomplete characters are found in the
string with <code>Malformed_code</code>.<newline/>Evaluation hints:<list><item>PRE_EVAL(encoding)</item></list><param><name>range_pos</name>The byte position of the substring to measure
(default: 0)</param><param><name>range_len</name>The byte length of the substring to measure
(default: byte length of the input string minus <code>range_pos</code>)</param></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><optional>range_pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>range_len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>ustring_iter</value><doc>Iterates over the characters of a string, and calls the passed function
for every code point. The function raises <code>Malformed_code</code> when
illegal byte sequences or incomplete characters are found.<param><name>encoding</name>specifies the encoding</param><param><name>range_pos</name>The byte position of the substring to iterate over
(default: 0)</param><param><name>range_len</name>The byte length of the substring to iterate over
(default: byte length of the input string minus <code>range_pos</code>)</param></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><optional>range_pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>range_len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>ustring_map</value><doc>Maps every character of a string to a list of characters, and returns
the concatenated string.
The <code>encoding</code> argument determines the encoding of both the argument
and the result string.
The map function gets every character as its Unicode code point, and
must return the list of code points to map to.<newline/>The function raises <code>Malformed_code</code> when
illegal byte sequences or incomplete characters are found.<param><name>range_pos</name>The byte position of the substring to map
(default: 0)</param><param><name>range_len</name>The byte length of the substring to map
(default: byte length of the input string minus <code>range_pos</code>)</param></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></arrow><arrow><optional>range_pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>range_len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>ustring_to_lower</value><doc>Converts the input string to lowercase.<newline/>The <code>encoding</code>, <code>range_pos</code>, and <code>range_len</code> arguments work
as for <code>ustring_map</code>. The exception <code>Malformed_code</code> is raised
when illegal byte sequences are found.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><optional>range_pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>range_len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>ustring_to_upper</value><doc>Converts the input string to uppercase.<newline/>The <code>encoding</code>, <code>range_pos</code>, and <code>range_len</code> arguments work
as for <code>ustring_map</code>. The exception <code>Malformed_code</code> is raised
when illegal byte sequences are found.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><optional>range_pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>range_len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>ustring_to_title</value><doc>Converts the input string to titlecase.<newline/>The <code>encoding</code>, <code>range_pos</code>, and <code>range_len</code> arguments work
as for <code>ustring_map</code>. The exception <code>Malformed_code</code> is raised
when illegal byte sequences are found.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><optional>range_pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>range_len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>ustring_sub</value><doc><code>ustring_sub enc start length s</code>: Returns the substring of <code>s</code> starting
at character count <code>start</code> and consisting of <code>length</code> characters. Note
that <code>start</code> and <code>length</code> select the substring by multiples of
(usually multibyte) characters, not bytes.<newline/>If the optional byte-based <code>range_pos</code> and <code>range_len</code> arguments are
present, these arguments are taken to determine a first substring
before <code>start</code> and <code>length</code> are applied to extract the final
substring.<newline/>The function raises <code>Malformed_code</code> when
illegal byte sequences or incomplete characters are found.<param><name>range_pos</name>The byte position of the substring to extract
(default: 0)</param><param><name>range_len</name>The byte length of the substring to extract
(default: byte length of the input string minus <code>range_pos</code>)</param></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>range_pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>range_len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>ustring_compare</value><doc>Compares two strings lexicographically. The first argument is the
encoding of both strings (which must be the same). The second argument
is the function that compares two Unicode code points. It must return
0 if both characters are the same, a negative value if the first
character is the smaller one, and a positive value if the second
character is the smaller one.<newline/>The function raises <code>Malformed_code</code> when
illegal byte sequences or incomplete characters are found.<param><name>range_pos</name>The byte position of the substring to compare
(default: 0), referring to the following string argument</param><param><name>range_len</name>The byte length of the substring to compare
(default: byte length of the input string minus <code>range_pos</code>),
referring to the following string argument</param></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow><arrow><optional>range_pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>range_len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><optional>range_pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>range_len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>code_cmp</value><doc>A compare function for <code>ustring_compare</code>: Normal string comparison:
This function compares by code point</doc><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>ci_code_cmp</value><doc>A compare function for <code>ustring_compare</code>: Case-insensitive comparison:
This function compares by the lowercase code point if it exists,
and the untransformed code point otherwise.<newline/>NB. This bases on the lowercase transformation that maps one char
to only one char, and not to many.</doc><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>uarray_of_ustring</value><doc>Returns the characters of the string as array of Unicode code points.<param><name>range_pos</name>The byte position of the substring to extract
(default: 0)</param><param><name>range_len</name>The byte length of the substring to extract
(default: byte length of the input string minus <code>range_pos</code>)</param></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><optional>range_pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>range_len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>array</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>ustring_of_uarray</value><doc>Returns the array of Unicode code points as encoded string.<param><name>pos</name>Selects a subarray: <code>pos</code> is the first array position
to encode (default: 0)</param><param><name>len</name>Selects a subarray: <code>len</code> is the length of the subarray
to encode (default: array length minus <code>pos</code>)</param><param><name>subst</name>This function is called when a code point cannot be represented
in the chosen character encoding. It must returns the (already encoded)
string to substitute for this code point. By default (if ~subst is
not passed), the exception <code>Cannot_represent</code> will be raised in this
case.</param></doc><arrow><optional>subst</optional><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><optional>pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>array</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></value><exception><exception><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>Malformed_code_at</exception><doc>An illegal byte sequence is found at this byte position</doc><arguments><path><resolved><identifier><type>int</type></identifier></resolved></path></arguments></exception><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>verify</value><doc>Checks whether the string is properly encoded. If so, () is returned.
If not, the exception <code>Malformed_code_at</code> will be raised indicating
the byte position where the problem occurs.<param><name>range_pos</name>The byte position of the substring to verify
(default: 0)</param><param><name>range_len</name>The byte length of the substring to verify
(default: byte length of the input string minus <code>range_pos</code>)</param></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><optional>range_pos</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>range_len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><stop/><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>big_slice</value><path><resolved><identifier><type>int</type></identifier></resolved></path></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>read_iso88591_ref</value><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>ref</type></resolved><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path><arrow><path><resolved><identifier><type>array</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>array</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><tuple><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path></tuple></arrow></arrow></arrow></arrow></arrow></arrow></arrow></path></value><value><value><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>read_utf8_ref</value><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>ref</type></resolved><arrow><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>array</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>array</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><tuple><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root>encoding</type></identifier></resolved></path></tuple></arrow></arrow></arrow></arrow></arrow></arrow></path></value></unit>