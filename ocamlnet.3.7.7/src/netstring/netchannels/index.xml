<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></html></base>Netchannels</root><digest>4e22bd1ba0cae4bd9bd1b6e69fc16ade</digest><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>Netbuffer<digest>5f4225f2baeef1584e246c6ce1d32119</digest></import><import>Netsys_mem<digest>f19ef786301a8cbcfbf1a4fffee992f8</digest></import><import>Netsys_types<digest>67b26630eaf4decaa483864d4d00a3a2</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><source><file>netchannels.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring</dir><digest>5142ab22f6e3603e8217b88ef3989bc0</digest></source><doc>Object-oriented I/O: Basic types and classes<newline/><bold>Contents</bold><newline/><list><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>types</label></resolved></element></reference></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>input</label></resolved></element></reference></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>output</label></resolved></element></reference></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>delegation</label></resolved></element></reference></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>lifting</label></resolved></element></reference></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>descriptors</label></resolved></element></reference></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>transactional</label></resolved></element></reference></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>filters</label></resolved></element></reference>
<list><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>filters_notes</label></resolved></element></reference></item></list></item></list>The tutorial has been moved to <reference><element><root>Netchannels_tut</root></element></reference>.</doc><comment><title level="1"><label><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>types</label>Types</title></comment><comment>There are three levels of class types for channels:<list><item><code>rec_in_channel</code> and <code>rec_out_channel</code>: Primitive, but standardized level</item><item><code>raw_in_channel</code> and <code>raw_out_channel</code>: Unix level</item><item><code>in_obj_channel</code> and <code>out_obj_channel</code>: Application level</item></list>The &quot;rec&quot; level has been recently introduced to improve interoperability
with other libraries (e.g. camomile). The idea is to standardize the
real core methods of I/O, so they have the same meaning in all libraries.
Read
&quot;<reference><link>http://www.ocaml-programming.de/rec/IO-Classes.html</link>Basic I/O class types</reference>&quot;
for more.<newline/>The &quot;raw&quot; level represents the level of Unix file descriptors.<newline/>The application level is what should be used in programs. In addition
to the &quot;raw&quot; level one can find a number of convenience methods,
e.g. <code>input_line</code> to read a line from the channel. The downside is that
these methods usually work only for blocking I/O.<newline/>One can lower the level by coercion, e.g. to turn an <code>in_obj_channel</code>
into a <code>rec_in_channel</code>, apply the function<newline/><code>(fun ch -&gt; (ch : in_obj_channel :&gt; rec_in_channel))</code><newline/>To higher the level, apply <code>lift_in</code> or <code>lift_out</code>, defined below.</comment><comment><bold>Interface changes:</bold> Since ocamlnet-0.98, the semantics of
the methods <code>input</code> and <code>output</code> has slightly changed. When the end
of the channel is reached, <code>input</code> raises now <code>End_of_file</code>. In previous
releases of ocamlnet, the value 0 was returned. When the channel cannot
process data, but is in non-blocking mode, both methods now return the
value 0. In previous releases of ocamlnet, the behaviour was not
defined.<newline/><bold>Ocamlnet-3.0</bold> changed the behavior of <code>close_out</code>. Errors are no longer
reported - instead, the exception is logged to <reference><element><root>Netlog</root></element></reference>. For a stricter
error handling, it is suggested to call <code>flush</code> first. Also, <code>close_in</code>
and <code>close_out</code> no longer raise <code>Closed_channel</code> when the channel is
already closed. Read more about this in the section
<reference><element><resolved><label><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>rec_out_channel</class_type>close_error</label></resolved></element></reference>.</comment><exception><exception><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>Closed_channel</exception><doc>Raised when channel operations are called when the channel is closed</doc></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>Buffer_underrun</exception><doc>Raised by input methods if the internal buffer of the channel is too
empty to read even one byte of data.
This exception is only used by certain implementations of channel
classes.</doc></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>Command_failure</exception><doc>Raised by <code>close_in</code> or <code>close_out</code> if the channel is connected with
another process, and the execution of that process fails.</doc><arguments><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>process_status</type></resolved></path></arguments></exception><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_in_channel</class_type><doc>Recommended input class type for library interoperability.</doc><signature><comment>Description<newline/>This class type is defined in
&quot;<reference><link>http://www.ocaml-programming.de/rec/IO-Classes.html</link>Basic I/O class types</reference>&quot;
as collaborative effort of several library creators.</comment><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_in_channel</class_type>input</method><doc>Reads octets from the channel and puts them into the string. The
first <code>int</code> argument is the position of the substring, and the second
<code>int</code> argument is the length of the substring where the data are
stored. The method returns the number of octets actually read and
stored.<newline/>When the end of the channel is reached and there is no further octet
to read, the exception <code>End_of_file</code> will be raised. <bold>This has
been changed in ocamlnet-0.97! In previous releases the number 0
was returned at the end of the channel.</bold><newline/>When the channel is non-blocking, and there are currently no bytes
to read, the number 0 will be returned. <bold>This has
been changed in ocamlnet-0.97! In previous releases this behaviour
was undefined.</bold><newline/>When the channel is closed, the exception <code>Closed_channel</code> will be
raised if an ocamlnet implementation is used. For implementations
of other libraries there is no standard for this case.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_in_channel</class_type>close_in</method><doc>Closes the channel for input.<newline/>When the channel is already closed, this is a no-op.<newline/>Error policy: Exceptions are only raised in cases of serious
corruption, e.g. if the underlying descriptor is invalid.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_in_channel</class_type><doc>Basic Unix-level class type for input channels as used by ocamlnet. In addition
to the recommended standard, ocamlnet always support a position counter</doc><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_in_channel</class_type></identifier></resolved></path></inherit><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_in_channel</class_type>pos_in</method><doc>Returns the current channel position. This position can be expected
to be consistent with the returned number of bytes of <code>input</code>, i.e.
when <code>input</code> returns <code>n</code>, the position is advanced by <code>n</code>.<newline/>As seek operations are outside the scope of <code>Netchannels</code>,
implementations may or may not take seek operations into account.</doc><path><resolved><identifier><type>int</type></identifier></resolved></path></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_out_channel</class_type><doc>Recommended output class type for library interoperability.</doc><signature><comment>Description<newline/>This class type is defined in
&quot;<reference><link>http://www.ocaml-programming.de/rec/IO-Classes.html</link>Basic I/O class types</reference>&quot;
as collaborative effort of several library creators.</comment><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_out_channel</class_type>output</method><doc>Takes octets from the string and writes them into the channel. The
first <code>int</code> argument is the position of the substring, and the second
<code>int</code> argument is the length of the substring where the data can
be found. The method returns the number of octets actually written.<newline/>The implementation may choose to collect written octets in a buffer
before they actually delivered to the underlying resource.<newline/>When the channel is non-blocking, and there are currently no bytes
to write, the number 0 will be returned. <bold>This has
been changed in ocamlnet-0.97! In previous releases this behaviour
was undefined.</bold><newline/>When the channel is closed, the exception <code>Closed_channel</code> will be
raised if an ocamlnet implementation is used. For implementations
of other libraries there is no standard for this case.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_out_channel</class_type>flush</method><doc>If there is a write buffer, it will be flushed. Otherwise, nothing
happens.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_out_channel</class_type>close_out</method><doc>Flushes the buffer, if any, and closes the channel for output.<newline/>When the channel is already closed, this is a no-op.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><comment><title level="2"><label><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_out_channel</class_type>close_error</label>How to close channels in case of errors</title><newline/>The <code>close_out</code> method has actually two tasks: First, it writes out
all remaining data (like <code>flush</code>), and second, it releases OS
resources (e.g. closes file descriptors). There is the question
what has to happen when the write part fails - is the resource released
anyway or not?<newline/>We choose here a pragmatic approach under the assumption that
an OS error at close time is usually unrecoverable, and it is
more important to release the OS resource. Also, we
assume that the user is wise enough to call <code>flush</code> first if
it is essential to know write errors at close time. Under these
assumptions:<newline/><list><item>The <code>flush</code> method fully reports any errors when writing out
the remaining data.</item><item>When <code>flush</code> raises an error exception, it should discard
any data in the buffer. This is not obligatory, however,
but considered good practice, and is subject to discussion.</item><item>The <code>close_out</code> method usually does not report errors by
raising exceptions, but only by logging them via <reference><element><root>Netlog</root></element></reference>.
The OS resource is released in any case. As before, this
behavior is not obligatory, but considered as good practice,
and subject to discussion.</item></list>This ensures that the following code snippet reports all errors, but also
releases OS resources:<newline/><precode>       try 
         ch # flush();
         ch # close_out();
       with error -&gt; 
          ch # close_out(); raise error</precode><newline/>There are some cases where data can be first written when it is
known that the channel is closed. These data would not be written
by a preceding <code>flush</code>. In such cases:<newline/><list><item>The best way to deal with it is to define another method,
e.g. called <code>write_eof</code>, that marks the data as logically
being complete, so a following <code>flush</code> can do the complete
shutdown cycle of the channel.</item><item>At least, however, one should allow then that a double
<code>close_out</code> releases the descriptor: the first <code>close_out</code>
will report the error condition as exception, but discard
all data in the channel. The second <code>close_out</code> finally
releases the OS resource.</item></list>In any way, hard errors indicating bugs of the program logic
(like invalid file descriptors) should always be immediately
reported.</comment></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_out_channel</class_type><doc>Basic Unix-level class type for output channels as used by ocamlnet. In addition
to the recommended standard, ocamlnet always support a position counter</doc><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_out_channel</class_type></identifier></resolved></path></inherit><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_out_channel</class_type>pos_out</method><doc>Returns the current channel position. This position can be expected
to be consistent with the returned number of bytes of <code>output</code>, i.e.
when <code>output</code> returns <code>n</code>, the position is advanced by <code>n</code>.<newline/>As seek operations are outside the scope of <code>Netchannels</code>,
implementations may or may not take seek operations into account.</doc><path><resolved><identifier><type>int</type></identifier></resolved></path></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_io_channel</class_type><doc>A channel supporting both input and output. The input and output
aspects are strictly separated</doc><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_in_channel</class_type></identifier></resolved></path></inherit><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_out_channel</class_type></identifier></resolved></path></inherit></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>compl_in_channel</class_type><doc>Further methods usually supported by ocamlnet channel implementations.
These methods are only reasonable when the channel is of blocking type,
i.e. waits for input when not enough data are available to perform an
operation. Implementations may choose to fail when they detect the
channel is non-blocking.</doc><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>compl_in_channel</class_type>really_input</method><doc>Reads exactly as many octets from the channel as the second <code>int</code>
argument specifies. The octets are placed at the position denoted
by the first <code>int</code> argument into the string.<newline/>When the end of the channel is reached before the passed number of
octets are read, the exception <code>End_of_file</code> is raised.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>compl_in_channel</class_type>input_char</method><doc>Reads exactly one character from the channel, or raises <code>End_of_file</code></doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>char</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>compl_in_channel</class_type>input_line</method><doc>Reads the next line from the channel. When the channel is already
at the end before <code>input_line</code> is called, the exception <code>End_of_file</code>
is raised.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>compl_in_channel</class_type>input_byte</method><doc>Reads exactly one octet from the channel and returns its code,
or raises <code>End_of_file</code></doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type><doc>The application-level input channel supports raw and complemented methods</doc><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_in_channel</class_type></identifier></resolved></path></inherit><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>compl_in_channel</class_type></identifier></resolved></path></inherit></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>compl_out_channel</class_type><doc>Further methods usually supported by ocamlnet channel implementations.
These methods are only reasonable when the channel is of blocking type,
i.e. waits for output readiness when the underlying resource currently
cannot process enough data. Implementations may choose to fail when they
detect the channel is non-blocking.</doc><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>compl_out_channel</class_type>really_output</method><doc>Writes exactly as many octets to the channel as the second <code>int</code>
argument specifies. The octets are taken from the string position
denoted by the first <code>int</code> argument.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>compl_out_channel</class_type>output_char</method><doc>Writes exactly one character</doc><arrow><path><resolved><identifier><type>char</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>compl_out_channel</class_type>output_string</method><doc>Writes exactly the passed string</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>compl_out_channel</class_type>output_byte</method><doc>Writes exactly one byte passed as integer code</doc><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>compl_out_channel</class_type>output_buffer</method><doc>Writes exactly the contents of the buffer</doc><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/buffer/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/buffer/index.xml"><cmti name="Buffer" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/buffer.cmti" digest="a579f4a57e300ec755f84af883c1e51b"/></xml></html></base>Buffer</root></identifier>t</type></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>compl_out_channel</class_type>output_channel</method><doc>Writes the contents of an <code>in_obj_channel</code> until the end of the
input channel is reached.<param><name>len</name>If passed, at most this number of octets are read from
the input channel and written to this channel.</param></doc><arrow><optional>len</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type><doc>The application-level output channel supports raw and complemented methods</doc><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_out_channel</class_type></identifier></resolved></path></inherit><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>compl_out_channel</class_type></identifier></resolved></path></inherit></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>io_obj_channel</class_type><doc>A channel supporting both input and output. The input and output
aspects are strictly separated</doc><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type></identifier></resolved></path></inherit><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></path></inherit></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>trans_out_obj_channel</class_type><doc>A transactional output channel has a buffer for uncommitted data.
This means that all data written to this channel is collected in the
buffer until either <code>commit_work</code> or <code>rollback_work</code> is called.<newline/>When the channel is closed, the buffer may optionally be committed.
This is implementation-defined.<newline/>The method <code>flush</code> does not have any effect on the transaction
buffer.</doc><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></path></inherit><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>trans_out_obj_channel</class_type>commit_work</method><doc>Flushes the transaction buffer, and writes its contents to the
underlying resource.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>trans_out_obj_channel</class_type>rollback_work</method><doc>Empties the transaction buffer</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method></signature></class_type><comment><title level="1"><label><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>input</label>Input channels</title></comment><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>input_channel</class><doc>Creates an input channel from an <code>in_channel</code>, which must be open.<newline/>The method <code>pos_in</code> reflects the real position in the channel as
returned by <code>Pervasives.pos_in</code>. This works for both seekable and
non-seekable channels.<newline/>The method <code>close_in</code> also closes the underlying <code>in_channel</code>.<newline/>The function <code>onclose</code> is called after the <code>in_channel</code> has been closed.</doc><arrow><optional>onclose</optional><path><resolved><identifier><type>option</type></identifier></resolved><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>in_channel</type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type></identifier></resolved></path></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>input_command</class><doc>Runs the command with <code>/bin/sh</code>, and reads the data the command prints
to stdout.<newline/>The method <code>pos_in</code> returns the number of read octets.<newline/>When <code>close_in</code> is invoked, the subprocess is <code>wait</code>ed for. If the
process exits with code 0, the method returns normally. Otherwise,
the exception <code>Command_failure</code> is raised.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type></identifier></resolved></path></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>input_string</class><doc>Creates an input channel from a (constant) string.<newline/>The method <code>pos_in</code> reflects the real position in the string, i.e.
a character read at position <code>k</code> can be found at <code>s.[k]</code> in the string
<code>s</code>.<param><name>pos</name>The data of the channel begins at this position of the string.
Default: 0</param><param><name>len</name>The data of the channel consists of this number of bytes.
Default: until the end of the string</param></doc><arrow><optional>pos</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><optional>len</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type></identifier></resolved></path></arrow></arrow></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>create_input_netbuffer</value><doc>Creates an input channel and a shutdown function for a netbuffer.
This is a destructive
implementation: Every time data is read, the octets are taken from the
beginning of the netbuffer, and they are deleted from the netbuffer
(recall that a netbuffer works like a queue of characters).<newline/>Conversely, the user of this class may add new data to the netbuffer
at any time. When the shutdown function is called, the EOF condition
is recorded, and no further data must be added.<newline/>If the netbuffer becomes empty, the input methods raise <code>Buffer_underrun</code>
when the EOF condition has not yet been set, and they raise
<code>End_of_file</code> when the EOF condition has been recorded.</doc><arrow><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netbuffer/index.xml"><cmti name="Netbuffer" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netbuffer.cmti" digest="5f4225f2baeef1584e246c6ce1d32119"/></xml></base>Netbuffer</root></identifier>t</type></resolved></path><tuple><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type></identifier></resolved></path><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></tuple></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>lexbuf_of_in_obj_channel</value><doc>Creates a lexical buffer from an input channel. The input channel
is not closed when the end is reached<newline/>This function does not work for non-blocking channels.</doc><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type></identifier></resolved></path><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/lexing/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/lexing/index.xml"><cmti name="Lexing" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/lexing.cmti" digest="1be6a5484fb3cfb69d2c981438a7be62"/></xml></html></base>Lexing</root></identifier>lexbuf</type></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>string_of_in_obj_channel</value><doc>Reads from the input channel until EOF and returns the characters
as string. The input channel is not closed.<newline/>This function does not work for non-blocking channels.</doc><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>lines_of_in_obj_channel</value><doc>Reads from the input channel until EOF and returns the lines
as string list. The input channel is not closed.<newline/>This function does not work for non-blocking channels.</doc><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>with_in_obj_channel</value><doc><code>with_in_obj_channel ch f</code>:
Computes <code>f ch</code> and closes <code>ch</code>. If an exception happens, the channel is
closed, too.</doc><arrow><alias><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type></identifier></resolved></class>a</alias><arrow><arrow><var>a</var><var>b</var></arrow><var>b</var></arrow></arrow></value><comment><title level="1"><label><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>output</label>Output channels</title></comment><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>output_channel</class><doc>Creates an output channel writing into an <code>out_channel</code>.<newline/>The method <code>pos_out</code> reflects the real position in the channel as
returned by <code>Pervasives.pos_out</code>. This works for both seekable and
non-seekable channels.<newline/>The method <code>close_out</code> also closes the underlying <code>out_channel</code>.
There is some implicit logic to either use <code>close_out</code> or <code>close_out_noerr</code>
depending on whether the immediately preceding operation already reported
an error.<param><name>onclose</name>this function is called when the <code>close_out</code> method is
invoked, just after the underlying <code>out_channel</code> has been closed.</param></doc><arrow><optional>onclose</optional><path><resolved><identifier><type>option</type></identifier></resolved><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>out_channel</type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></path></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>output_command</class><doc>Runs the command with <code>/bin/sh</code>, and data written to the channel is
piped to stdin of the command.<newline/>The method <code>pos_out</code> returns the number of written octets.<newline/>When <code>close_out</code> is invoked, the subprocess is <code>wait</code>ed for. If the
process exits with code 0, the method returns normally. Otherwise,
the exception <code>Command_failure</code> is raised. (The channel is closed
even if this exception is raised.)<param><name>onclose</name>this function is called when the <code>close_out</code> method is
invoked, just after the underlying descriptor has been closed.</param></doc><arrow><optional>onclose</optional><path><resolved><identifier><type>option</type></identifier></resolved><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></path></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>output_buffer</class><doc>This output channel writes the data into the passed buffer.<newline/>The method <code>pos_out</code> returns the number of written octets.<param><name>onclose</name>this function is called when the <code>close_out</code> method is
invoked, just after the underlying descriptor has been closed.</param></doc><arrow><optional>onclose</optional><path><resolved><identifier><type>option</type></identifier></resolved><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/buffer/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/buffer/index.xml"><cmti name="Buffer" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/buffer.cmti" digest="a579f4a57e300ec755f84af883c1e51b"/></xml></html></base>Buffer</root></identifier>t</type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></path></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>output_netbuffer</class><doc>This output channel writes the data into the passed netbuffer.<newline/>The method <code>pos_out</code> returns the number of written octets.<param><name>onclose</name>this function is called when the <code>close_out</code> method is
invoked, just after the underlying descriptor has been closed.</param></doc><arrow><optional>onclose</optional><path><resolved><identifier><type>option</type></identifier></resolved><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></path><arrow><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netbuffer/index.xml"><cmti name="Netbuffer" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netbuffer.cmti" digest="5f4225f2baeef1584e246c6ce1d32119"/></xml></base>Netbuffer</root></identifier>t</type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></path></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>output_null</class><doc>This output channel discards all written data.<newline/>The method <code>pos_out</code> returns the number of discarded bytes.<param><name>onclose</name>this function is called when the <code>close_out</code> method is
invoked, just after the underlying descriptor has been closed.</param></doc><arrow><optional>onclose</optional><path><resolved><identifier><type>option</type></identifier></resolved><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></path><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></path></arrow></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>with_out_obj_channel</value><doc><code>with_out_obj_channel ch f</code>:
Computes <code>f ch</code> and closes <code>ch</code>. If an exception happens, the channel is
closed, too.</doc><arrow><alias><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></class>a</alias><arrow><arrow><var>a</var><var>b</var></arrow><var>b</var></arrow></arrow></value><comment><title level="1"><label><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>delegation</label>Delegation classes</title></comment><comment>Delegation classes just forward method calls to an parameter
object, i.e. when method <code>m</code> of the delegation class is called,
the definition of <code>m</code> is just to call the method with the same
name <code>m</code> of the parameter object. This is very useful in order
to redefine methods individually.<newline/>For example, to redefine the method <code>pos_in</code> of an <code>in_obj_channel</code>,
use
<precode>   class my_channel = object(self)
     inherit in_obj_channel_delegation ...
     method pos_in = ...
   end</precode><newline/>As a special feature, the following delegation classes can suppress
the delegation of <code>close_in</code> or <code>close_out</code>, whatever applies.
Just pass <code>close:false</code> to get this effect, e.g.
<precode>   class input_channel_don't_close c =
     in_obj_channel_delegation ~close:false (new input_channel c)</precode>
This class does not close <code>c : in_channel</code> when the <code>close_in</code>
method is called.</comment><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_in_channel_delegation</class><arrow><optional>close</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_in_channel</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_in_channel</class_type></identifier></resolved></path></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_in_channel_delegation</class><arrow><optional>close</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_in_channel</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_in_channel</class_type></identifier></resolved></path></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel_delegation</class><arrow><optional>close</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type></identifier></resolved></path></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_out_channel_delegation</class><arrow><optional>close</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_out_channel</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_out_channel</class_type></identifier></resolved></path></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_out_channel_delegation</class><arrow><optional>close</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_out_channel</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_out_channel</class_type></identifier></resolved></path></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel_delegation</class><arrow><optional>close</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></path></arrow></arrow></class><comment><title level="1"><label><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>lifting</label>Lifting channels</title></comment><comment>The following classes and functions add missing methods to reach
a higher level in the hierarchy of channel class types. For most
uses, the <code>lift_in</code> and <code>lift_out</code> functions work best.</comment><value><value><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>lift_in</value><doc>Turns a <code>rec_in_channel</code> or <code>raw_in_channel</code>, depending on the passed
variant, into a full <code>in_obj_channel</code> object. (This is a convenience
function, you can also use the classes below directly.) If you
want to define a class for the lifted object, use
<precode>     class lifted_ch ... =
       in_obj_channel_delegation (lift_in ...)</precode><param><name>eol</name>The accepted end-of-line delimiters. The method
<code>input_line</code> recognizes any of the passed strings as EOL
delimiters. When more than one delimiter matches, the longest
is taken. Defaults to <code>[&quot;\n&quot;]</code>. The default cannot be
changed when <code>buffered=false</code> (would raise <code>Invalid_argument</code>).
The delimiter strings must neither be empty, nor longer than
<code>buffer_size</code>.</param><param><name>buffered</name>Whether a buffer is added, by default <bold>true</bold></param><param><name>buffer_size</name>The size of the buffer, if any, by default 4096</param><param><name>pass_through</name>If the read request has at least this size,
and the buffer is currently empty, the buffer will be bypassed.
Defaults to <code>max_int</code>, i.e. it is off.</param></doc><arrow><optional>eol</optional><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><arrow><optional>buffered</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>buffer_size</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>pass_through</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><poly_variant><fixed/><constructor>Rec<path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_in_channel</class_type></identifier></resolved></path></constructor><constructor>Raw<path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_in_channel</class_type></identifier></resolved></path></constructor></poly_variant><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>lift_out</value><doc>Turns a <code>rec_out_channel</code> or <code>raw_out_channel</code>, depending on the passed
variant, into a full <code>out_obj_channel</code> object. (This is a convenience
function, you can also use the classes below directly.) If you
want to define a class for the lifted object, use
<precode>     class lifted_ch ... =
       out_obj_channel_delegation (lift_out ...)</precode><param><name>buffered</name>Whether a buffer is added, by default <bold>true</bold></param><param><name>buffer_size</name>The size of the buffer, if any, by default 4096</param><param><name>pass_through</name>If the write request has at least this size,
and the buffer is currently empty, the buffer will be bypassed.
Defaults to <code>max_int</code>, i.e. it is off.</param></doc><arrow><optional>buffered</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>buffer_size</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>pass_through</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><poly_variant><fixed/><constructor>Rec<path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_out_channel</class_type></identifier></resolved></path></constructor><constructor>Raw<path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_out_channel</class_type></identifier></resolved></path></constructor></poly_variant><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>augment_raw_in_channel</class><doc>This class implements the methods from <code>compl_in_channel</code> by calling
the methods of <code>raw_in_channel</code>. There is no additional buffering.
The performance of the method <code>input_line</code> is very bad (consider
to override it, e.g. by <code>enhanced_input_line</code> as defined below).</doc><virtual/><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>compl_in_channel</class_type></identifier></resolved></path></inherit><method><method><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>augment_raw_in_channel</class>input</method><doc>As in <code>raw_in_channel</code></doc><virtual/><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></arrow></method><method><method><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>augment_raw_in_channel</class>close_in</method><doc>As in <code>raw_in_channel</code></doc><virtual/><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>augment_raw_in_channel</class>pos_in</method><doc>As in <code>raw_in_channel</code></doc><virtual/><path><resolved><identifier><type>int</type></identifier></resolved></path></method></signature></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>lift_rec_in_channel</class><doc>This class implements <code>pos_in</code> and the methods from <code>compl_in_channel</code>
by calling the methods of <code>rec_in_channel</code>.
There is no additional buffering.<newline/>The performance of the method <code>input_line</code> is very bad (consider
to override it, e.g. by <code>enhanced_input_line</code> as defined below).<newline/>The method <code>pos_in</code> is implemented by counting the number of octets
read by the <code>input</code> method.<param><name>start_pos_in</name>The initial value of the counter for <code>pos_in</code>.
Defaults to 0.</param></doc><arrow><optional>start_pos_in</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_in_channel</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type></identifier></resolved></path></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>augment_raw_out_channel</class><doc>This class implements the methods from <code>compl_out_channel</code> by calling
the methods of <code>raw_out_channel</code>. There is no additional buffering.</doc><virtual/><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>compl_out_channel</class_type></identifier></resolved></path></inherit><method><method><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>augment_raw_out_channel</class>output</method><doc>As in <code>raw_out_channel</code></doc><virtual/><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></arrow></method><method><method><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>augment_raw_out_channel</class>close_out</method><doc>As in <code>raw_out_channel</code></doc><virtual/><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>augment_raw_out_channel</class>flush</method><doc>As in <code>raw_out_channel</code></doc><virtual/><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>augment_raw_out_channel</class>pos_out</method><doc>As in <code>raw_out_channel</code></doc><virtual/><path><resolved><identifier><type>int</type></identifier></resolved></path></method></signature></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>lift_raw_out_channel</class><doc>This class implements the methods from <code>compl_out_channel</code> by calling
the methods of <code>raw_out_channel</code>. There is no additional buffering.</doc><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_out_channel</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></path></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>lift_rec_out_channel</class><doc>This class implements <code>pos_out</code> and the methods from <code>compl_out_channel</code>
by calling the methods of <code>rec_out_channel</code>.
There is no additional buffering.<newline/>The method <code>pos_out</code> is implemented by counting the number of octets
read by the <code>output</code> method.<param><name>start_pos_out</name>The initial value of the counter for <code>pos_out</code>.
Defaults to 0.</param></doc><arrow><optional>start_pos_out</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>rec_out_channel</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></path></arrow></arrow></class><type><type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>input_result</type><doc>This type is for the method <code>enhanced_input</code> of <code>enhanced_raw_in_channel</code>.<list><item><code>`Data n</code> means that <code>n</code> bytes have been copied to the target string</item><item><code>`Separator s</code> means that no bytes have been copied, but that an
end-of-line separator <code>s</code> has been found</item></list></doc><poly_variant><fixed/><constructor>Data<path><resolved><identifier><type>int</type></identifier></resolved></path></constructor><constructor>Separator<path><resolved><identifier><type>string</type></identifier></resolved></path></constructor></poly_variant></type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>enhanced_raw_in_channel</class_type><doc>Defines private methods reading text line by line</doc><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_in_channel</class_type></identifier></resolved></path></inherit><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>enhanced_raw_in_channel</class_type>enhanced_input_line</method><doc>An improved implementation of <code>input_line</code> that uses the buffer</doc><private/><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>enhanced_raw_in_channel</class_type>enhanced_input</method><doc>Works similar to <code>input</code>, but distinguishes between normal data
and end-of-line separators. The latter are returned as
<code>`Separator s</code>. When normal data is found, it is copied to the
string, and <code>`Data n</code> is returned to indicate that <code>n</code> bytes
were copied.</doc><private/><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>input_result</type></identifier></resolved></path></arrow></arrow></arrow></method></signature></class_type><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>buffered_raw_in_channel</class><doc>This class adds a buffer to the underlying <code>raw_in_channel</code>.
As additional feature, the method <code>enhanced_input_line</code> is a fast
version of <code>input_line</code> that profits from the buffer.<param><name>eol</name>The accepted end-of-line delimiters. The method
<code>enhanced_input_line</code> recognizes any of the passed strings as EOL
delimiters. When more than one delimiter matches, the longest
is taken. Defaults to <code>[&quot;\n&quot;]</code>. Note that <code>input_line</code>
always only recognizes <code>&quot;\n&quot;</code> as EOL character, this cannot
be changed.
The delimiter strings must neither be empty, nor longer than
<code>buffer_size</code>.</param><param><name>buffer_size</name>The size of the buffer, by default 4096.</param><param><name>pass_through</name>If the read request has at least this size,
and the buffer is currently empty, the buffer will be bypassed.
Defaults to <code>max_int</code>, i.e. it is off.</param></doc><arrow><optional>eol</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></path><arrow><optional>buffer_size</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><optional>pass_through</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_in_channel</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>enhanced_raw_in_channel</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>buffered_raw_out_channel</class><doc>This class adds a buffer to the underlying <code>raw_out_channel</code>.<param><name>buffer_size</name>The size of the buffer, by default 4096.</param><param><name>pass_through</name>If the write request has at least this size,
and the buffer is currently empty, the buffer will be bypassed.
Defaults to <code>max_int</code>, i.e. it is off.</param></doc><arrow><optional>buffer_size</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><optional>pass_through</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_out_channel</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_out_channel</class_type></identifier></resolved></path></arrow></arrow></arrow></class><comment><title level="1"><label><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>descriptors</label>Channels over descriptors</title></comment><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>input_descr</class><doc>Creates a <code>raw_in_channel</code> for the passed file descriptor, which must
be open for reading.<newline/>The <code>pos_in</code> method returns logical positions, i.e. it counts the number
of read octets. It is not tried to determine the real file position.<newline/>The method <code>close_in</code> also closes the file descriptor.<newline/>This class also supports Win32 proxy descriptors referring to an input
channel.<param><name>blocking</name>Whether the channel waits for data if it is not
possible to read from the (non-blocking) descriptor. Defaults to <code>true</code>.</param><param><name>start_pos_in</name>The position to which <code>pos_in</code> is initialized when
the channel is created, by default 0</param></doc><arrow><optional>blocking</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><optional>start_pos_in</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_in_channel</class_type></identifier></resolved></path></arrow></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>output_descr</class><doc>Creates a <code>raw_out_channel</code> for the passed file descriptor, which must
be open for writing.<newline/>The <code>pos_out</code> method returns logical positions, i.e. it counts the number
of written octets. It is not tried to determine the real file position.<newline/>The method <code>close_out</code> also closes the file descriptor.<newline/>This class also supports Win32 proxy descriptors referring to an output
channel.<param><name>blocking</name>Whether the channel waits until it can output if it is not
possible to write to the (non-blocking) descriptor. Defaults to <code>true</code>.</param><param><name>start_pos_out</name>The position to which <code>pos_out</code> is initialized when
the channel is created, by default 0</param></doc><arrow><optional>blocking</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><optional>start_pos_out</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_out_channel</class_type></identifier></resolved></path></arrow></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>socket_descr</class><doc>Creates a <code>raw_io_channel</code> for the passed socket descriptor, which must
be open for reading and writing, and not yet shut down in either
direction. The <code>raw_io_channel</code> is used to represent a bidirectional
channel: <code>close_out</code> shuts the socket down for sending, <code>close_in</code>
shuts the socket down for reading, and when both directions are down,
the descriptor is closed.<newline/>The <code>pos_in</code> and <code>pos_out</code> methods returns logical positions.<newline/>This class supports sockets and Win32 named pipes. Note, however,
that for Win32 named pipes it is not possible to shut down only one
direction of the bidirectional data channel.<param><name>blocking</name>See <reference><element><resolved><identifier><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>input_descr</class></identifier></resolved></element></reference> and <reference><element><resolved><identifier><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>output_descr</class></identifier></resolved></element></reference></param><param><name>start_pos_in</name>The position to which <code>pos_in</code> is initialized when
the channel is created, by default 0</param><param><name>start_pos_out</name>The position to which <code>pos_out</code> is initialized when
the channel is created, by default 0</param></doc><arrow><optional>blocking</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><optional>start_pos_in</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><optional>start_pos_out</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.html"><xml src="../../../../ocaml.4.02.1+doc/otherlibs/unix/unix/index.xml"><cmti name="Unix" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/unix/unix.cmti" digest="30a4cc8e5f4f902ea609c91caec48af7"/></xml></html></base>Unix</root></identifier>file_descr</type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>raw_io_channel</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></class><comment><title level="1"><label><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>transactional</label>Transactional channels</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>close_mode</type><doc>Whether a <code>close_out</code> implies a commit or rollback operation</doc><poly_variant><fixed/><constructor>Commit<constant/></constructor><constructor>Rollback<constant/></constructor></poly_variant></type><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>buffered_trans_channel</class><doc>A transactional output channel with a transaction buffer implemented
in memory<param><name>close_mode</name>Specifies the semantics of <code>close_out</code>, by default
<code>`Commit</code></param></doc><arrow><optional>close_mode</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>close_mode</type></identifier></resolved></path></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>trans_out_obj_channel</class_type></identifier></resolved></path></arrow></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>make_temporary_file</value><doc>Creates a temporary file in the directory <code>tmp_directory</code> with a name
prefix <code>tmp_prefix</code> and a unique suffix. The function returns
the triple (name, inch, outch) containing the file <code>name</code>,
the file opened as in_channel <code>inch</code> and as out_channel <code>outch</code>.<param><name>tmp_directory</name>Defaults to <reference><element><dot><root>Netsys_tmp</root>tmp_directory()</dot></element></reference></param><param><name>tmp_prefix</name>By default <code>&quot;netstring&quot;</code>. This needs not to be
unique, but just descriptive.</param><param><name>mode</name>The creation mask of the file; defaults to 0o600, i.e. the
file is private for the current user</param><param><name>limit</name>Limits the number of trials to find the unique suffix.
Defaults to 1000.</param></doc><arrow><optional>mode</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>limit</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>tmp_directory</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><optional>tmp_prefix</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>in_channel</type></resolved></path><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>out_channel</type></resolved></path></tuple></arrow></arrow></arrow></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>tempfile_trans_channel</class><doc>A transactional output channel with a transaction buffer implemented
as temporary file<param><name>close_mode</name>Specifies the semantics of <code>close_out</code>, by default
<code>`Commit</code></param><param><name>tmp_directory</name>See <code>make_temporary_file</code></param><param><name>tmp_prefix</name>See <code>make_temporary_file</code></param></doc><arrow><optional>close_mode</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>close_mode</type></identifier></resolved></path></path><arrow><optional>tmp_directory</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><arrow><optional>tmp_prefix</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>trans_out_obj_channel</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></class><comment><title level="1"><label><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>filters</label>Pipes and Filters</title></comment><comment>Note that this has nothing to do with &quot;pipes&quot; on the Unix level.
It is, however, the same idea: Connecting two I/O resources with an
intermediate buffer.</comment><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>pipe</class><doc>A <code>pipe</code> has two internal buffers (realized by Netbuffer). The
output methods of the class write to the incoming buffer. When
new data are appended to the incoming buffer, the conversion function
<code>conv</code> is called; the arguments are the incoming buffer and the outgoing
buffer. The conversion function must convert the data available in the
incoming buffer and append the result to the outgoing buffer. Finally,
the input methods of the class return the data found in the outgoing
buffer.<newline/>The conversion function is called as follows:
<code>conv incoming_buffer at_eof outgoing_buffer</code><newline/>The conversion function is allowed to do nothing if the incoming data
are not complete enough to be converted. It is also allowed to convert
only the beginning of the incoming buffer.<newline/>If the outgoing buffer is empty, the input methods will raise
<code>Buffer_underrun</code>.<newline/>If <code>close_out</code> is invoked, the end of the data stream will be recorded.
In this case, the conversion function is called with <code>at_eof = true</code>,
and it is expected that this function converts the whole data found
in the incoming buffer.<newline/><code>close_in</code> implies <code>close_out</code>.<newline/>The conversion function may raise exceptions. The exceptions will
fall through to the caller of the input methods. (The output methods
and <code>close_in</code>, <code>close_out</code> never fail because of such exceptions.)<newline/>The default conversion function copies everything from the incoming
buffer to the outgoing buffer without modification.</doc><arrow><optional>conv</optional><path><resolved><identifier><type>option</type></identifier></resolved><arrow><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netbuffer/index.xml"><cmti name="Netbuffer" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netbuffer.cmti" digest="5f4225f2baeef1584e246c6ce1d32119"/></xml></base>Netbuffer</root></identifier>t</type></resolved></path><arrow><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netbuffer/index.xml"><cmti name="Netbuffer" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netbuffer.cmti" digest="5f4225f2baeef1584e246c6ce1d32119"/></xml></base>Netbuffer</root></identifier>t</type></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></path><arrow><optional>buffer_size</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>io_obj_channel</class_type></identifier></resolved></path></arrow></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>output_filter</class><doc>An <code>output_filter</code> filters the data written to it through the
<code>io_obj_channel</code> (usually a <code>pipe</code>), and writes the filtered data
to the passed <code>out_obj_channel</code>.<newline/>If the filter is closed, the <code>io_obj_channel</code> will be closed, too,
but not the destination <code>out_obj_channel</code> (so you can still append
further data).</doc><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>io_obj_channel</class_type></identifier></resolved></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>out_obj_channel</class_type></identifier></resolved></path></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>input_filter</class><doc>An <code>input_filter</code> filters the data read from it through the
<code>io_obj_channel</code> (usually a <code>pipe</code> after the data have been
retrieved from the passed <code>in_obj_channel</code>.<newline/>An <code>input_filter</code> object never generates <code>Buffer_underrun</code> exceptions.
However, if the passed <code>in_obj_channel</code> or <code>io_obj_channel</code> raises such
an exception, the exception will fall through the calling chain.<newline/>If the filter is closed, the <code>io_obj_channel</code> will be closed, too,
but not the source <code>in_obj_channel</code> (so you can still read further
data from it).</doc><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type></identifier></resolved></path><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>io_obj_channel</class_type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>in_obj_channel</class_type></identifier></resolved></path></arrow></arrow></class><comment><title level="2"><label><root><base><xml src="index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root>filters_notes</label>Notes, Examples</title></comment><comment>If you have the choice, prefer <code>output_filter</code> over <code>input_filter</code>.
The latter is slower.<newline/>The primary application of filters is to encode or decode a channel
on the fly. For example, the following lines write a BASE64-encoded file:<newline/><precode>let ch = new output_channel (open_out &quot;file.b64&quot;) in
   let encoder = new Netencoding.Base64.encoding_pipe ~linelength:76 () in
   let ch' = new output_filter encoder ch in
   ... (* write to ch' *)
   ch' # close_out();
   ch  # close_out();  (* you must close both channels! *)</precode><newline/>All bytes written to <code>ch'</code> are BASE64-encoded and the encoded bytes are
written to <code>ch</code>.<newline/>There are also pipes to decode BASE64, and to encode and decode the
&quot;Quoted printable&quot; format. Encoding and decoding work even if the
data is delivered in disadvantageous chunks, because the data is
&quot;re-chunked&quot; if needed. For example, BASE64 would require that data
arrive in multiples of three bytes, and to cope with that, the BASE64 pipe
only processes the prefix of the input buffer that is a multiple of three,
and defers the encoding of the extra bytes till the next opportunity.</comment></unit>