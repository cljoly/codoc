<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></html></base>Netglob</root><digest>cf3b273f3cc48b3509c64a42e9f40126</digest><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>Netbuffer<digest>5f4225f2baeef1584e246c6ce1d32119</digest></import><import>Netchannels<digest>4e22bd1ba0cae4bd9bd1b6e69fc16ade</digest></import><import>Netconversion<digest>192a0e1fae2f882e5f06cf84e9f3da38</digest></import><import>Netfs<digest>1e90ddf12091b683a04cb5de1c8a7cba</digest></import><import>Netsys_mem<digest>f19ef786301a8cbcfbf1a4fffee992f8</digest></import><import>Netsys_types<digest>67b26630eaf4decaa483864d4d00a3a2</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><source><file>netglob.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring</dir><digest>000e9ee7484343589f2d264ba043de88</digest></source><doc>Globbing</doc><comment>Globbing resolves shell wildcards like &quot;*&quot; and &quot;?&quot;. For example,<newline/><precode>    let files = Netglob.glob (`String &quot;*.cm[iox]&quot;)</precode><newline/>would return all files matching this pattern (e.g. module.cmi,
module.cmo).<newline/>The main user function is <reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netglob/index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root></identifier>glob</value></resolved></element></reference>. Globbing accesses the
local filesystem by default, but one can also run the globbing
algorithm on any other filesystem, provided the access primitives
of <reference><element><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netglob/index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root></identifier>glob_fsys</class_type></resolved></element></reference> are available.</comment><comment><title level="2">Types and exceptions</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_expr</type><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_expr_atom</type></identifier></resolved></path></path></type><type><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_expr_atom</type><doc>Atoms:<newline/><list><item><code>`Literal s</code>: Matches the string literally. The string must not be empty.
The backslash is not an escape character, but matches the
backslash character.</item><item><code>`Star</code>: The &quot;*&quot; operator</item><item><code>`Qmark</code>: The &quot;?&quot; operator</item><item><code>`Bracket(negated,set)</code>: The <code>[...]</code> operator. The <code>set</code> argument
describes the characters that are matched. The <code>negated</code> argument
is true when the expression is negated (i.e. <code>[^...]</code>).</item><item><code>`Brace l</code>: The <code>{e1,e2,...}</code> operator</item><item><code>`Tilde t</code>: The <code>~username</code> operator. If <code>t=&quot;&quot;</code> the current user
is meant. The <code>`Tilde</code> atom may only occur at the beginning of the list.
The <code>`Tilde</code> atom always matches a directory,
and must be followed by a literal slash (if anything follows).</item></list>Compatibility: Conforms to POSIX with extensions (braces). Shells often
implement brace expressions in a slightly different way (braces are
parsed and expanded in a separate step before the other pattern
constructors are handled). The cases where this leads to different
results are quite exotic (e.g. <code>&quot;{~g,~h}1&quot;</code> would mean <code>&quot;~g1 ~h1&quot;</code>, but
this implementation rejects the pattern).</doc><poly_variant><fixed/><constructor>Literal<path><resolved><identifier><type>string</type></identifier></resolved></path></constructor><constructor>Star<constant/></constructor><constructor>Qmark<constant/></constructor><constructor>Bracket<tuple><path><resolved><identifier><type>bool</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_set</type></identifier></resolved></path></tuple></constructor><constructor>Brace<path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_expr</type></identifier></resolved></path></path></constructor><constructor>Tilde<path><resolved><identifier><type>string</type></identifier></resolved></path></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_set</type><doc>A set of code points is given as a list of ranges <code>(from,to)</code>, with
<code>from &lt;= to</code>. It is allowed that ranges overlap.</doc><object><name>set</name><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></tuple></path></object></type><type><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type><doc>A validated <code>glob_expr</code></doc></type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>user_info</class_type><doc>Access to the user database</doc><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>user_info</class_type>path_encoding</method><doc>Paths of filesystems may be encoded</doc><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>encoding</type></resolved></path></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>user_info</class_type>home_directory</method><doc>Returns the home directory of the passed user, or the home
directory of the current user for the empty string. Raises
<code>Not_found</code> if the lookup fails.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_fsys</class_type><doc>Filesystem primitives. This is intentionally not the same as
<reference><element><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netfs/index.xml"><cmti name="Netfs" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netfs.cmti" digest="1e90ddf12091b683a04cb5de1c8a7cba"/></xml></base>Netfs</root></identifier>stream_fs</class_type></resolved></element></reference> because only a few access functions are needed
here, and because the functions here should also be capable of accessing
relative paths (not starting with /). It is possible to turn a
<reference><element><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netfs/index.xml"><cmti name="Netfs" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netfs.cmti" digest="1e90ddf12091b683a04cb5de1c8a7cba"/></xml></base>Netfs</root></identifier>stream_fs</class_type></resolved></element></reference> into <reference><element><dot><resolved><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netglob/index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root></identifier></resolved>glob_fs</dot></element></reference> by calling
<reference><element><resolved><class><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netglob/index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root></identifier>of_stream_fs</class></resolved></element></reference>.</doc><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_fsys</class_type>path_encoding</method><doc>Paths of filesystems may be encoded</doc><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>encoding</type></resolved></path></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_fsys</class_type>read_dir</method><doc>Returns the file names contained in the directory, without
path. The names &quot;.&quot; and &quot;..&quot; should be returned. It is acceptable
to return the empty list for an unreadable directory.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_fsys</class_type>file_is_dir</method><doc>Whether the file name is valid and a directory, or a symlink to
a directory.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_fsys</class_type>file_exists</method><doc>Whether the file name is valid and refers to an existing file,
or to a symlink pointing to an existing file.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></method></signature></class_type><type><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_mode</type><doc>Modes:<list><item><code>`Existing_paths</code>: Only paths are returned that really exist</item><item><code>`All_paths</code>: Generated paths not including <code>*</code>, <code>?</code> and
bracket expressions are returned even if they do not exist.
For example, globbing for <code>&quot;fictive{1,2,3}&quot;</code> would return
<code>[&quot;ficitve1&quot;;&quot;fictive2&quot;;&quot;fictive3&quot;]</code> independent of whether
these files exist.</item><item><code>`All_words</code>: Patterns that cannot be resolved are returned
as-is (like the shell does)</item></list></doc><poly_variant><fixed/><constructor>Existing_paths<constant/></constructor><constructor>All_paths<constant/></constructor><constructor>All_words<constant/></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>pattern</type><doc>Input for <reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netglob/index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root></identifier>glob</value></resolved></element></reference></doc><poly_variant><fixed/><constructor>String<path><resolved><identifier><type>string</type></identifier></resolved></path></constructor><constructor>Expr<path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type></identifier></resolved></path></constructor></poly_variant></type><exception><exception><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>Bad_glob_expr</exception><doc>An syntax error in the glob expression; the argument is the bad
expression</doc><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>Unsupported_expr</exception><doc>The notations <code>:class:</code>, <code>.symbol.</code>, <code>=eqclass=</code> inside <code>...</code> are
not supported by this implementation. If they are found, this exception
will be raised, and the argument is the whole glob expression</doc><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></exception><comment><title level="2">Parsing and printing</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>parse_glob_expr</value><doc>Parses the glob expression. By default, all syntax features are enabled.
May raise <code>Bad_glob_expr</code> or <code>Unsupported_expr</code>.<newline/>The glob expressions are POSIX-compliant with the extension of
brace expressions, and tildes, and the omission of internationalized
bracket expressions:<list><item><code>*</code>: Matches a sequence of zero or more arbitrary characters</item><item><code>?</code>: Matches one arbitrary character</item><item><code>[abc]</code>: Matches one of the mentioned characters</item><item><code>[a-z]</code>: Matches one of the characters of the range. This is here
only permitted when the range falls into the ASCII set. (Otherwise
the interpretation would be dependent on the encoding.) Note that
the ASCII restriction does not comply to POSIX.</item><item><code>[!expr]</code> or <code>[^expr]</code>: Negates the bracket expression</item><item><code>{expr,expr,...}</code>: Generates a string for each of the alternatives.
A brace expression is even recognized if there is no comma, or even
no contents (i.e. <code>&quot;{expr}&quot;</code> and <code>&quot;{}&quot;</code>). The elements of brace expressions
may be again glob expressions; nested brace expressions are allowed.</item><item><code>~username</code>: Generates the home directory of this user</item><item><code>~</code>: Generates the home directory of the current user</item><item>If enabled, the backslash character is the escape character. Within
bracket expressions, the backslash character never escapes.</item><item>Not supported: Collating symbols <code>[.a.]</code>, equivalence classes
<code>[=a=]</code>, and character classes <code>[:name:]</code>. If they are found, the
exception <code>Unsupported_expr</code> will be raised.</item></list>Glob expressions have a character <code>encoding</code>. This defaults to
<code>`Enc_iso88591</code>. Encodings must be ASCII-compatible.</doc><arrow><optional>encoding</optional><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>encoding</type></resolved></path><arrow><optional>enable_star</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>enable_qmark</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>enable_brackets</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>enable_braces</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>enable_tilde</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>enable_escape</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>validate_glob_expr</value><doc>Checks whether the passed expression is syntactically valid. If so,
a validated expression is returned. Otherwise, this function fails.</doc><arrow><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>encoding</type></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_expr</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>recover_glob_expr</value><doc>Returns the explicit representation</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_expr</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>encoding_of_glob_expr</value><doc>Returns the encoding</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type></identifier></resolved></path><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>encoding</type></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>literal_glob_expr</value><doc>Returns an expression that matches literally the passed string</doc><arrow><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>encoding</type></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>print_glob_expr</value><doc>Prints the glob expression as string. Meta characters are
escaped by a backslash when possible. Meta characters are:
<code>&quot;*&quot;</code>, <code>&quot;?&quot;</code>, <code>&quot;[&quot;], [&quot;]&quot;</code>, <code>&quot;{&quot;</code>, <code>&quot;}&quot;</code>, <code>&quot;,&quot;</code>, <code>&quot;~&quot;</code> and <code>&quot;\\&quot;</code><newline/><list><item><code>escape_in_literals</code>: Whether meta characters in <code>`Literal</code>
subexpressions are escaped. This is true by default.</item></list></doc><arrow><optional>escape_in_literals</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></value><comment><title level="2">Operations on <code>valid_glob_expr</code></title></comment><value><value><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>expand_glob_expr</value><doc>Resolve generative sub expressions by expanding them. The returned
list of glob expr no longer contains the expanded constructions.<newline/><list><item><code>expand_brace</code>: Expands <code>`Brace</code> subexpressions.</item><item><code>expand_tilde</code>: Expands <code>`Tilde</code> subexpressions.</item><item><code>user_info</code>: The subset of file system operations needed for tilde
expansion. Defaults to <reference><element><resolved><class><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netglob/index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root></identifier>local_user_info</class></resolved></element></reference> (see below).</item></list>Both <code>expand_*</code> options are enabled by default.</doc><arrow><optional>user_info</optional><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>user_info</class_type></identifier></resolved></path><arrow><optional>expand_brace</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>expand_tilde</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type></identifier></resolved></path></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>match_glob_expr</value><doc>Matches the glob_expr against a string.<newline/>The input must neither contain brace expressions nor tildes (i.e. call
<code>expand_glob_expr</code> first). The function fails if it encounters such an
expression.<newline/><list><item><code>protect_period</code>: If true, a leading period cannot be not matched by
<code>*</code>, <code>?</code>, <code>[...]</code>, but only by a literal <code>.</code>. A leading period is
a <code>.</code> at the beginning of the string to be matched against, or
if also <code>protect_slash</code> a <code>.</code> after a <code>/</code></item><item><code>protect_slash</code>: If true, a slash cannot be matched by <code>*</code>, <code>?</code>, <code>[...]</code>,
but only by a literal <code>/</code></item></list>Both options are enabled by default.<newline/><list><item><code>encoding</code>: The encoding of the string argument. Defaults to the
encoding of the glob pattern.</item></list></doc><arrow><optional>protect_period</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>protect_slash</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>encoding</optional><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>encoding</type></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>split_glob_expr</value><doc>Splits the glob expression into filename components separated by
literal <code>/</code> characters. For example, for the glob expression
<code>&quot;a*b/c/d?&quot;</code>, the list <code>[&quot;a*b&quot;; &quot;c&quot;; &quot;d?&quot;]</code> is returned.<newline/>If the first component begins with a slash, the slash is not removed
from the first returned list element, e.g. for <code>&quot;/ab/c*&quot;</code>, the list
<code>[ &quot;/ab&quot;; &quot;c*&quot; ]</code> is computed. Use <code>check_rooted_glob_expr</code> to test this
case.<newline/>Several adjacent slashes are handled like a single slash. E.g.
for <code>&quot;a//b&quot;</code>, the list <code>[&quot;a&quot;; &quot;b&quot;]</code> is returned.<newline/>If the last component ends with a slash, it is not removed from the
returned list element, e.g. for <code>&quot;a/b/&quot;</code>, the list <code>[ &quot;a&quot;; &quot;b/&quot; ]</code> is
returned. Use <code>check_directory_glob_expr</code> to test this case.<newline/>The glob expression passed to this function must not contain brace
or tilde expressions.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>check_rooted_glob_expr</value><doc>If the glob expression matches the root directory (i.e. the expression
begins with a literal <code>/</code>), the function returns <code>Some expr'</code>, where
<code>expr'</code> matches the path relative to the root directory (i.e. the
expression without the <code>/</code> at the beginning).<newline/>Otherwise, <code>None</code> is returned.<newline/>Example: For <code>&quot;/a/b*&quot;</code>, the expression <code>&quot;a/b*&quot;</code> is returned.<newline/>Special case: for <code>&quot;/&quot;</code>, the expression <code>&quot;&quot;</code> (only matching the empty
string) is returned.<newline/>The glob expression passed to this function must not contain brace
or tilde expressions.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type></identifier></resolved></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>check_directory_glob_expr</value><doc>If the last component of the glob expression matches only directories
because it ends with a literal <code>/</code> character, the value <code>Some expr'</code> is
returned where <code>expr'</code> matches the same path without the trailing <code>/</code>.<newline/>Otherwise, <code>None</code> is returned.<newline/>Example: For <code>&quot;a/b*/&quot;</code>, the expression <code>&quot;a/b*&quot;</code> is returned.<newline/>Special case: for <code>&quot;/&quot;</code>, the expression <code>&quot;&quot;</code> (only matching the empty
string) is returned.<newline/>The glob expression passed to this function must not contain brace
or tilde expressions.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type></identifier></resolved></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>valid_glob_expr</type></identifier></resolved></path></path></arrow></value><comment><title level="2">Globbing</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob</value><doc>Forms a set of filenames as described below, and matches this set
against the pattern. The pattern can be given as a <code>`String s</code>
in which case <code>s</code> is parsed (with all features enabled, and
it is assumed it has the passed <code>encoding</code>). Alternatively,
an already parsed <code>`Expr e</code> can be given. (Note that <code>encoding</code>
is ignored in this case.)<newline/><bold>Slashes must be explicitly matched:</bold>
&quot;/&quot; must literally occur in order to be a candidate for matching.
It is not matched by <code>*</code> or <code>?</code> or a bracket expression.<newline/><bold>Periods:</bold> The leading period is protected if <code>protect_period</code>.
It must then also literally occur to be matched.<newline/><bold>Anchoring:</bold> If the <code>glob_expr</code> begins with a literal &quot;/&quot;, the set
of filenames is
anchored at the root directory; otherwise the set is anchored at
the current directory or, if <code>base_dir</code> is passed, at this directory.
(If <code>fsys</code> is passed, it is required to also set <code>base_dir</code>.)<newline/>Initially, the set contains all files of the anchor
directory (for the root directory, a &quot;/&quot; is prepended).<newline/>After that, the set is extended by adding the paths of
subdirectories relative to the anchor directory. Note that the
constructed set is always infinite, because &quot;.&quot; and &quot;..&quot; are not
handled specially, and are also regarded as &quot;subdirectories&quot;. However,
after applying the matching criterion, the returned list is always
finite.<newline/>Note that the anchor directory itself is not part of the generated
set. For example, for the expression &quot;/*&quot; the root directory &quot;/&quot; is
not returned. As an exception of this rule, for the glob expression
&quot;/&quot; the file &quot;/&quot; is returned.<newline/><bold>Braces:</bold> Brace expressions are handled by expanding them first, even
before filename generation starts.<newline/><bold>Mode:</bold> By default, only existing paths are returned
(<code>mode=`Existing_paths</code>).
If no files match, the empty list is returned (and not the pattern
as the shell does). By passing a different <code>mode</code>, this can be changed:<list><item><code>`All_paths</code>: It is allowed that non-existing paths
are returned when the paths do not contain *, ?, or [
metacharacters after the brace expansion. Path expressions
with these metacharacters are still checked for existence.</item><item><code>`All_words</code>: When an expression does not refer to existing
paths, it is returned as such, leaving the metacharacters *, ?, [
unexpanded (i.e., what the Bourne shell does). Note that
either all metacharacters are resolved, or none, but not
a subset of them.</item></list><bold>Encodings:</bold> Often, only the pattern has an encoding, but not
the filesystem (as in Unix). In this case, no conversion is attempted,
and the byte representation of the pattern is matched with the
byte representation of the filenames. Good luck.<newline/>If the filesystem has an encoding, however, conversions may
be required, and this can cause problems. Usually, network filesystems
provide an encoding, and the Win32 local filesystem. (For Unix,
one can pass a custom <code>fsys</code> with encoding knowledge.) Conversion
problems can be avoided if (1) the encoding of the pattern is a superset
of the filename encoding. Also, (2) one should not use literals
in the pattern that cannot be represented in the filename encoding.
If (2) cannot be satisfied, ensure you have at least
<code>mode=`Existing_paths</code>, i.e. the default mode (this removes results
from the returned list when a conversion problem occurs).<newline/>The return value of <code>glob</code> is encoded in the encoding of the filesystem
if the filesystem provides an encoding. (If you want to check this
encoding, pass <code>fsys</code>, e.g. as <code>local_fsys()</code>, and call the
<code>path_encoding</code> method of <code>fsys</code>.)</doc><arrow><optional>encoding</optional><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>encoding</type></resolved></path><arrow><optional>base_dir</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><optional>protect_period</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>fsys</optional><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_fsys</class_type></identifier></resolved></path><arrow><optional>user_info</optional><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>user_info</class_type></identifier></resolved></path><arrow><optional>mode</optional><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_mode</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>pattern</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></arrow></arrow></arrow></arrow></arrow></arrow></value><comment><title level="2">Remarks</title></comment><comment><bold>Examples demonstrating the effect of encodings:</bold> (Linux)<newline/><precode>       let fsys = local_fsys ~encoding:`Enc_utf8()
       let l = glob ~fsys (`String &quot;\214*&quot;)</precode><newline/>The byte 214 is O-umlaut in ISO-8859-1 (the default encoding for
patterns). By passing an <code>fsys</code> argument we change the encoding
for filenames to UTF-8. For example, if<newline/>&quot;\195\150ffentlich&quot;<newline/>was a file in the current directory, it would be found and
returned in <code>l</code>.<newline/>Conversions: For example, assume we have a file
&quot;\226\130\172uro&quot; (EUR-uro in UTF-8). The glob<newline/><precode>       let fsys = local_fsys ~encoding:`Enc_utf8()
       let l = glob ~fsys (`String &quot;*&quot;)</precode><newline/>finds it although the euro sign cannot be represented
in ISO-8859-1, the default pattern encoding.<newline/>We run into a problem, however, if we want to generate the
euro sign even if the file is not present, and the filesystem
uses an encoding that does not include this sign:<newline/><precode>       let fsys = local_fsys ~encoding:`Enc_iso88591()
       let l = glob ~fsys ~encoding:`Enc_utf8 ~mode:`All_paths 
                  (`String &quot;\226\130\172uro&quot;)</precode><newline/>This raises an exception <code>Netconversion.Cannot_represent 8364</code>.</comment><comment><bold>Notes for Win32:</bold><newline/><list><item>Globbing only supports forward slashes, not backslashes as path
separators</item><item>Globbing does neither recognize drive letters nor UNC
paths as special cases. This may lead to subtle bugs. Glob
expressions like &quot;c:/file.*&quot; may or may not work depending on the
context.</item><item>The usually case-insensitive file system is not taken into account.
(To be fixed.)</item></list></comment><comment><title level="2">Default access objects</title></comment><class><class><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>local_user_info</class><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>user_info</class_type></identifier></resolved></path></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>local_user_info</value><doc>Get the home directory of a user from the local user database.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>user_info</class_type></identifier></resolved></path></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>local_fsys</class><arrow><optional>encoding</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>encoding</type></resolved></path></path><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_fsys</class_type></identifier></resolved></path></arrow></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>local_fsys</value><doc>Accesses the local filesystem</doc><arrow><optional>encoding</optional><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>encoding</type></resolved></path><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_fsys</class_type></identifier></resolved></path></arrow></arrow></value><class><class><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>of_stream_fs</class><arrow><class><dot><resolved><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netfs/index.xml"><cmti name="Netfs" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netfs.cmti" digest="1e90ddf12091b683a04cb5de1c8a7cba"/></xml></base>Netfs</root></identifier></resolved>#stream_fs</dot></class><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_fsys</class_type></identifier></resolved></path></arrow></class><value><value><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>of_stream_fs</value><doc>Use an arbitrary network filesystem for globbing</doc><arrow><class><dot><resolved><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netfs/index.xml"><cmti name="Netfs" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netfs.cmti" digest="1e90ddf12091b683a04cb5de1c8a7cba"/></xml></base>Netfs</root></identifier></resolved>#stream_fs</dot></class><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netglob" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netglob.cmti" digest="cf3b273f3cc48b3509c64a42e9f40126"/></xml></base>Netglob</root>glob_fsys</class_type></identifier></resolved></path></arrow></value><comment><title level="2">Compatibility</title><newline/>This implementation is not fully compatible with the POSIX specs.
The differences:<list><item>Missing support for character classes, equivalence classes and
collating symbols.</item><item>Ranges in brackets are restricted to ASCII.</item><item>Unparseable patterns are indicated by exceptions. POSIX, however,
requires that such patterns are taken literally. E.g. a pattern &quot;[&quot;
would match a left bracket in POSIX, but this module throws a
syntax error.</item><item>If the slash character is protected, it is still allowed inside
brackets. POSIX, however, requires that the pattern is scanned
for slashes before brackets. For instance, the pattern &quot;[a/b*]&quot;
is scanned as <code>[`Literal &quot;[a/b]&quot;; `Star]</code> following the POSIX
rules while this implementation sees a bracket expression with
&quot;a&quot;, &quot;b&quot;, &quot;/&quot; and &quot;*&quot; characters.</item><item>The &quot;^&quot; character negates the set if used at the beginning of
bracket expressions. POSIX leaves this unspecified.</item><item>Brace expresions are an extension (although commonly implemented
in shells).</item><item>The default globbing mode is <code>`Existing_paths</code> which is not
defined by POSIX. Use <code>`All_paths</code> for getting POSIX behavior.</item></list>Compared with popular shells, there are some subtle differences in
how the various syntax elements (wildcards, braces, tildes) are
parsed and processed. Shells do it in this order:<list><item>Parse and expand brace expressions</item><item>Parse and expand tildes</item><item>Split the paths at slashes into path components</item><item>Parse and expand wildcards</item></list>For example, after expanding braces it is possible to see totally
new tilde or wildcard expressions, e.g. <code>&quot;~user{1,2}/file&quot;</code> would
be legal. This implementation here does not support this - we first
parse the expression, and then interpret it. However, users interested in
a higher degree of compatibility can call the <reference><element><root>Netglob</root></element></reference> parsing,
processing and printing functions in the required order, and emulate
the shell behavior. For example,<newline/><precode>  let alt_glob pat =
    let g1 = 
       parse_glob_expr 
         ~enable_star:false ~enable_qmark:false ~enable_brackets:false
         ~enable_tilde:false        (* only braces remain enabled *)
          pat in
    let g2_list = 
       expand_glob_expr g1 in
    let pat2_list = 
       List.map (print_glob_expr ~escape_in_literals:false) g2_list in
    let g3_list =
       List.map
         (fun pat2 -&gt; parse_glob_expr ~enable_braces:false pat2) 
         pat2_list in
    List.flatten
      (List.map (fun g3 -&gt; glob (`Expr g3)) g3_list)</precode><newline/>would parse and expand brace expressions in a separate step before
running <code>glob</code> on the remaining syntactic elements.</comment></unit>