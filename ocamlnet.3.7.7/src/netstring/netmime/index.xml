<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></html></base>Netmime</root><digest>0b76a3020124c30d13396d877ed0ad15</digest><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Format<digest>61d4350242b30078d3ad96c904c9f7a1</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>Mimestring<digest>ac31fcb123c04dfee879b3fcd4ac6465</digest></import><import>Netbuffer<digest>5f4225f2baeef1584e246c6ce1d32119</digest></import><import>Netchannels<digest>4e22bd1ba0cae4bd9bd1b6e69fc16ade</digest></import><import>Netstream<digest>0cb48bc6daf6d8a3d088ce0dfb4dcbbe</digest></import><import>Netsys_mem<digest>f19ef786301a8cbcfbf1a4fffee992f8</digest></import><import>Netsys_types<digest>67b26630eaf4decaa483864d4d00a3a2</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><source><file>netmime.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring</dir><digest>7d1bbd403d5bb6f03acd70955be65ced</digest></source><doc>Netmime contains high-level classes and functions to process
mail and MIME messages.<newline/><bold>Contents</bold><newline/><list><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netmime/index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root></identifier>types</label></resolved></element></reference></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netmime/index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root></identifier>classes</label></resolved></element></reference></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netmime/index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root></identifier>parsing</label></resolved></element></reference></item><item><reference><element><resolved><label><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netmime/index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root></identifier>printing</label></resolved></element></reference></item></list>The tutorial has been moved to <reference><element><root>Netmime_tut</root></element></reference>.</doc><comment><title level="1"><label><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>types</label>Types</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>store</type><doc>Specifies where to store the body of a mail message. <code>`Memory</code>
means in-memory, <code>`File name</code> means in the file <code>name</code>. The body
is stored in decoded form (i.e. without transfer encoding).</doc><poly_variant><fixed/><constructor>Memory<constant/></constructor><constructor>File<path><resolved><identifier><type>string</type></identifier></resolved></path></constructor></poly_variant></type><exception><exception><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>Immutable</exception><doc>Raised if it is tried to modify a read-only value. The string denotes
the function or method where the incident happened.</doc><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></exception><comment>MIME headers and bodies are defined in two steps. First the subtype
describing read access is defined (<code>mime_header_ro</code>, and <code>mime_body_ro</code>),
and after that the full class type including write access is defined
(<code>mime_header</code>, and <code>mime_body</code>).<newline/>The idea is that you can write functions that take an ro value as
input to indicate that they do not modify the value. For example:<newline/><precode>   let number_of_fields (h:#mime_header_ro) =
     List.length (h#fields)</precode><newline/>This function accepts both <code>mime_header</code>, and <code>mime_header_ro</code> values as
input, but the typing ensures that the function cannot mutate anything.<newline/>There is another way to ensure that a header or body is not modified.
The read-only flag can be set when creating the object, and this flag
causes that all trials to modify the value will raise the exception
<code>Immutable</code>. Of course, such trials of mutation are only detected at
run-time.<newline/>The advantage of the read-only flag is that it even works if
mutation depends on a condition, but it can be ensured that this
condition is never true. Furthermore, typing is much simpler (getting
subtyping correct can be annoying).</comment><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header_ro</class_type><doc>This is the read-only version of a MIME header. There are only methods
to read the header fields.</doc><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header_ro</class_type>fields</method><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></tuple></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header_ro</class_type>field</method><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header_ro</class_type>multiple_field</method><doc>The current fields of the header. <code>fields</code> returns the complete
header. <code>field name</code> returns the value of the field, or raises
<code>Not_found</code>. <code>multiple_field name</code> returns all fields with the same
name.<newline/>Note that field names are case-insensitive; <code>field &quot;content-length&quot;</code>,
and <code>field &quot;CONTENT-LENGTH&quot;</code> will return the same field. However,
the method <code>fields</code> returns the original field names, without
adjustment of the case.<newline/>The order of the fields is preserved.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></method><comment>Access methods for frequent standard fields.<newline/>These methods will raise <code>Not_found</code> if the fields are not
present.</comment><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header_ro</class_type>content_length</method><doc>Returns the Content-length field as integer</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header_ro</class_type>content_type</method><doc>Returns the Content-type as parsed value. The left value of the
pair is the main type, and the right value is the list of
parameters. For example, for the field value
<code>&quot;text/plain; charset=utf-8&quot;</code> this method returns
<code>(&quot;text/plain&quot;, [&quot;charset&quot;, p])</code> where <code>p</code> is an opaque value
with <code>Mimestring.param_value p = &quot;utf-8&quot;</code>.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/mimestring/index.xml"><cmti name="Mimestring" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/mimestring.cmti" digest="ac31fcb123c04dfee879b3fcd4ac6465"/></xml></base>Mimestring</root></identifier>s_param</type></resolved></path></tuple></path></tuple></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header_ro</class_type>content_disposition</method><doc>Returns the Content-disposition field as parsed value. The
left value is the main disposition, and the right value is the
list of parameters. For example, for the field value
<code>&quot;attachment; filename=xy.dat&quot;</code> this method returns
<code>(&quot;attachment&quot;, [&quot;filename&quot;, p])</code> where <code>p</code> is an opaque value
with <code>Mimestring.param_value p = &quot;xy.dat&quot;</code>.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/mimestring/index.xml"><cmti name="Mimestring" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/mimestring.cmti" digest="ac31fcb123c04dfee879b3fcd4ac6465"/></xml></base>Mimestring</root></identifier>s_param</type></resolved></path></tuple></path></tuple></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header_ro</class_type>content_transfer_encoding</method><doc>Returns the Content-transfer-encoding as string</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header</class_type><doc>A MIME header with both read and write method. It is still possible,
however, to set the read-only flag to make this kind of header
immutable, too.</doc><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header_ro</class_type></identifier></resolved></path></inherit><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header</class_type>ro</method><doc>whether the header is read-only or not</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header</class_type>set_fields</method><arrow><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></tuple></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header</class_type>update_field</method><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header</class_type>update_multiple_field</method><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header</class_type>delete_field</method><doc>These methods modify the fields of the header. If the header is
read-only, the exception <code>Immutable</code> will be raised.<newline/><code>set_fields</code> replaces the current fields with a new list of
(name,value) pairs. <code>update_field name value</code> replaces all fields
of the passed name with the single setting (name,value), or
adds this setting to the list. <code>update_multiple_field name values</code>
replaces all fields of the passed name with the list of values,
or adds this list. Finally, <code>delete_field name</code> deletes all
fields of the passed name. Nothing happens if there is no such
field.<newline/>Both <code>update_field</code> and <code>update_multiple_field</code> first replace
existing values by the new ones without changing the order
of the fields in the header. Additional values are inserted
after the last existing value, or at the end of the header.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body_ro</class_type><doc>This is the read-only version of a MIME body. There are only methods
to read the body contents.<newline/>The value of the body can be returned either as <code>string</code>, or as
object channel. Both ways are possible independently of where
the value is stored, in-memory, or as external file.</doc><signature><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body_ro</class_type>value</method><doc>The <code>value</code> method returns the _decoded_ body,
i.e. transfer encodings are removed before the value is passed
back.<newline/>When the body is stored in an external file, this method
reads the complete file into memory.</doc><path><resolved><identifier><type>string</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body_ro</class_type>store</method><doc>Where the body is actually stored.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>store</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body_ro</class_type>open_value_rd</method><doc>Opens the value for reading. This works independently of where
the body is stored. For example, to read the body line by line:
<precode>       let ch = body # open_value_rd () in
       try
         while true do
           let line = ch # input_line() in
           ... (* do something *)
         done;
         assert false; (* never reached *)
       with
         End_of_file -&gt;
           ch # close_in()</precode><newline/>As <code>value</code>, this method returns the value in decoded form.
This method is quite economical with the resources, and takes
only as much memory as needed for the channel operations.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>in_obj_channel</class_type></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body_ro</class_type>finalize</method><doc>After the body has been finalized, it cannot be accessed any longer.
External resources (files) are deallocated, if they are seen as
temporary.</doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method></signature></class_type><class_type><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body</class_type><doc>A MIME body with both read and write method. It is still possible,
however, to set the read-only flag to make this kind of body
immutable, too.<newline/>The value of the body can be set either by a <code>string</code>, or by writing
to an object channel. Both ways are possible independently of where
the value is stored, in-memory, or as external file.</doc><signature><inherit><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body_ro</class_type></identifier></resolved></path></inherit><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body</class_type>ro</method><doc>whether this body is read-only or not</doc><path><resolved><identifier><type>bool</type></identifier></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body</class_type>set_value</method><doc>Sets the value. If the value is immutable, the exception
<code>Immutable</code> will be raised.<newline/>The passed string must be in decoded form. When the body is
stored in an external file, the file is overwritten.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body</class_type>open_value_wr</method><doc>Opens the value for writing. The current value is overwritten.
If the value is immutable, the exception <code>Immutable</code> will be raised.<newline/>For example, to copy the file <code>f</code> into the value:
<precode>       let ch = body # open_value_wr() in
       let f_ch = new Netchannels.input_file f in
       ch # output_channel f_ch;
       f_ch # close_in();
       ch # close_out();</precode></doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>out_obj_channel</class_type></resolved></path></arrow></method></signature></class_type><comment>One can consider the pair <code>(mime_header, mime_body)</code> as simple MIME
message with one header and one body. Of course, this simple representation
does not support multi-part messages (attachments). For that reason,
the <code>complex_mime_message</code> was invented: The body can be further
structured as a sequence of parts that are complex messages themselves.<newline/>For example, a mail message with an attachment is usually
represented as
<precode>   (mail_header, `Parts [ (main_header, `Body main_body);
                          (att_header, `Body att_body) ] )</precode><newline/>Here, <code>mail_header</code> is the real header of the mail message.
<code>main_header</code> is the header of the main message, usually
only containing the content type of <code>main_body</code>, the body
of the main message. The attachment has also its own
<code>att_header</code>, again usually only containing the content type,
and the data of the attachment can be found in <code>att_body</code>.<newline/>Nowadays, mails have often even a more complicated structure
with <code>`Parts</code> containing nested <code>`Parts</code>. As <code>complex_mime_message</code>
is recursive, any kind of nesting can be easily represented.</comment><type><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>complex_mime_message</type><tuple><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header</class_type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>complex_mime_body</type></identifier></resolved></path></tuple></type><type><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>complex_mime_body</type><poly_variant><fixed/><constructor>Body<path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body</class_type></identifier></resolved></path></constructor><constructor>Parts<path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>complex_mime_message</type></identifier></resolved></path></path></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>complex_mime_message_ro</type><tuple><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header_ro</class_type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>complex_mime_body_ro</type></identifier></resolved></path></tuple></type><type><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>complex_mime_body_ro</type><doc>The read-only view of a complex_mime_message</doc><poly_variant><fixed/><constructor>Body<path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body_ro</class_type></identifier></resolved></path></constructor><constructor>Parts<path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>complex_mime_message_ro</type></identifier></resolved></path></path></constructor></poly_variant></type><comment>Note: <code>`Parts []</code>, i.e. <code>`Parts</code> together with an empty list, is
considered as illegal. Such a value cannot be transformed into
printable text.</comment><type><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_message</type><doc>Simple MIME message, in a form that is compatible with complex
ones.</doc><tuple><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header</class_type></identifier></resolved></path><poly_variant><fixed/><constructor>Body<path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body</class_type></identifier></resolved></path></constructor></poly_variant></tuple></type><type><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_message_ro</type><doc>Read-only variant of simple messages</doc><tuple><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header_ro</class_type></identifier></resolved></path><poly_variant><fixed/><constructor>Body<path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body_ro</class_type></identifier></resolved></path></constructor></poly_variant></tuple></type><comment><title level="1"><label><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>classes</label>Classes</title></comment><class><class><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>basic_mime_header</class><doc>An implementation of <code>mime_header</code>.<newline/>The argument is the list of (name,value) pairs of the header.<newline/>Example: Create a MIME header with only the field &quot;Content-type&quot;:
<precode>let h = new basic_mime_header [&quot;content-type&quot;, &quot;text/plain&quot;]</precode><newline/>Example: Set the field &quot;Subject&quot;:
<precode>h # update_field &quot;subject&quot; &quot;The value of this field&quot;</precode><newline/>This <code>mime_header</code> implementation bases on a mixture of a <code>Map</code> data
structure and a doubly linked list. The efficiency of the operations
(n=number of fields; m=average number of values per field;
n*m=total number of values):<list><item><code>new</code>, <code>set_fields</code>: O(m * n * log n), but the construction of the dictionary
is deferred until the first real access</item><item><code>field</code>: O(log n)</item><item><code>multiple_field</code>: O(log n + m)</item><item><code>fields</code>: O(n * m)</item><item><code>update_field</code>, <code>update_multiple_field</code>: O(log n + m)</item><item><code>delete_field</code>: O(n + m)</item></list><param><name>ro</name>whether the header is read-only (default: false)</param></doc><arrow><optional>ro</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></tuple></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header</class_type></identifier></resolved></path></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>memory_mime_body</class><doc>An implementation of <code>mime_body</code> where the value is stored
in-memory.<newline/>The argument is the initial (decoded) value of the body.
The method <code>store</code> returns <code>`Memory</code>.<newline/>Example: To create a body from a string, call
<precode>new memory_mime_body &quot;The value as string&quot;</precode><param><name>ro</name>whether the body is read-only (default: false)</param></doc><arrow><optional>ro</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body</class_type></identifier></resolved></path></arrow></arrow></class><class><class><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>file_mime_body</class><doc>An implementation of <code>mime_body</code> where the value is stored
in an external file.<newline/>The argument is the name of the file containing the (decoded) value.
The method <code>store</code> returns <code>`File filename</code>.
The method <code>value</code> loads the contents of the file and returns them
as string.<newline/>Example: To create a body from the file &quot;f&quot;, call
<precode>new file_mime_body &quot;f&quot;</precode><param><name>ro</name>whether the body is read-only (default: false)</param><param><name>fin</name>whether to delete the file when the <code>finalize</code> method is called
(default: false)</param></doc><arrow><optional>ro</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><optional>fin</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body</class_type></identifier></resolved></path></arrow></arrow></arrow></class><comment><title level="1"><label><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>parsing</label>Parsing MIME messages</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>read_mime_header</value><doc>Decodes the MIME header that begins at the current position of the
netstream, and returns the header as class <code>basic_mime_header</code>.
After returning, the stream is advanced to the byte following the
empty line terminating the header.<newline/>Example: To read the header at the beginning of the file &quot;f&quot;, use:
<precode>     let ch = new Netchannels.input_channel (open_in &quot;f&quot;) in
     let stream = new Netstream.input_stream ch in
     let h = read_mime_header stream in
     ...
     stream#close_in();    (* no need to close ch *)</precode><newline/>Note that although the <code>stream</code> position after parsing is exactly
known, the position of <code>ch</code> cannot be predicted.<param><name>unfold</name>whether linefeeds are replaced by spaces in the values of the
header fields (Note: defaults to <code>false</code> here in contrast to
<code>Mimestring.scan_header</code>!)</param><param><name>strip</name>whether whitespace at the beginning and at the end of the
header fields is stripped</param><param><name>ro</name>whether the returned header is read-only (default: false)</param></doc><arrow><optional>unfold</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>strip</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>ro</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netstream/index.xml"><cmti name="Netstream" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netstream.cmti" digest="0cb48bc6daf6d8a3d088ce0dfb4dcbbe"/></xml></base>Netstream</root></identifier>in_obj_stream</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header</class_type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><comment>Hint: To write the header <code>h</code> into the channel <code>ch</code>, use
<precode>Mimestring.write_header ch h#fields</precode><newline/>Link: <reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/mimestring/index.xml"><cmti name="Mimestring" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/mimestring.cmti" digest="ac31fcb123c04dfee879b3fcd4ac6465"/></xml></base>Mimestring</root></identifier>write_header</value></resolved></element></reference></comment><type><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>multipart_style</type><doc>How to parse multipart messages:<list><item><code>`None</code>: Do not handle multipart messages specially. Multipart bodies
are not further decoded, and returned as <code>`Body b</code> where <code>b</code> is
the transfer-encoded text representation.</item><item><code>`Flat</code>: If the top-level message is a multipart message, the parts
are separated and returned as list. If the parts are again multipart
messages, these inner multipart messages are not furher decoded
and returned as <code>`Body b</code>.</item><item><code>`Deep</code>: Multipart messages are recursively decoded and returned as
tree structure.</item></list>This value determines how far the <code>complex_mime_message</code> structure
is created for a parsed MIME message. <code>`None</code> means that no parts
are decoded, and messages have always only a simple <code>`Body b</code>,
even if <code>b</code> is in reality a multi-part body. With <code>`Flat</code>, the
top-level multi-part bodies are decoded (if found), and messages
can have a structured <code>`Parts [_, `Body b1; _, `Body b1; ...]</code>
body. Finally, <code>`Deep</code> allows that inner multi-part bodies are
recursively decoded, and messages can have an arbitrarily complex
form.</doc><poly_variant><fixed/><constructor>None<constant/></constructor><constructor>Flat<constant/></constructor><constructor>Deep<constant/></constructor></poly_variant></type><value><value><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>decode_mime_body</value><doc><code>let ch' = decode_mime_body hdr ch</code>:
According to the value of the Content-transfer-encoding header field
in <code>hdr</code> the encoded MIME body written to <code>ch'</code> is decoded and transferred
to <code>ch</code>.<newline/>Handles 7bit, 8bit, binary, quoted-printable, base64.<newline/>Example: The file &quot;f&quot; contains base64-encoded data, and is to be decoded
and to be stored in &quot;g&quot;:<newline/><precode>     let ch_f = new Netchannels.input_channel (open_in &quot;f&quot;) in
     let ch_g = new Netchannels.output_channel (open_out &quot;g&quot;) in
     let hdr = new basic_mime_header [&quot;content-transfer-encoding&quot;, &quot;base64&quot; ] in
     let ch = decode_mime_body hdr ch_g in
     ch # output_channel ch_f;
     ch # close_out();
     ch_g # close_out();
     ch_f # close_in();</precode><newline/>Note: This function is internally used by <code>read_mime_message</code> to
decode bodies. There is usually no need to call it directly.</doc><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header_ro</class_type></identifier></resolved></class><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>out_obj_channel</class_type></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>out_obj_channel</class_type></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>storage</value><doc>Creates a new storage facility for a mime body according to <code>store</code>.
This function can be used to build the <code>storage_style</code> argument
of the class <code>read_mime_message</code> (below). For example, this is
useful to store large attachments in external files, as in:<newline/><precode>     let storage_style hdr = 
       let filename = hdr ... (* extract from hdr *) in
       storage (`File filename)</precode><param><name>ro</name>whether the returned mime_bodies are read-only or not. Note that
it is always possible to write into the body using the returned
out_obj_channel regardless of the value of ~ro.
Default: false</param><param><name>fin</name>whether to finalize bodies stored in files.
Default: false</param></doc><arrow><optional>ro</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>fin</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>store</type></identifier></resolved></path><tuple><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body</class_type></identifier></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>out_obj_channel</class_type></resolved></path></tuple></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>read_mime_message</value><doc>Decodes the MIME message that begins at the current position of the
passed netstream. It is expected that the message continues until
EOF of the netstream.<newline/>Multipart messages are decoded as specified by <code>multipart_style</code> (see
above).<newline/>Message bodies with content-transfer-encodings of 7bit, 8bit, binary,
base64, and quoted-printable can be processed. The bodies are stored
without content-transfer-encoding (i.e. in decoded form), but the
content-transfer-encoding header field is not removed from the header.<newline/>The <code>storage_style</code> function determines where every message body is
stored. The corresponding header of the body is passed to the function
as argument; the result of the function is a pair of a new <code>mime_body</code>
and an <code>out_obj_channel</code> writing into this body. You can create such a
pair by calling <code>storage</code> (above).<newline/>By default, the <code>storage_style</code> is <code>storage ?ro `Memory</code> for every header.
Here, the designator <code>`Memory</code> means that the body will be stored in an
O'Caml string. The designator <code>`File fn</code> would mean that the body will be stored in the
file <code>fn</code>. The file would be created if it did not yet exist, and
it would be overwritten if it did already exist.<newline/>Note that the <code>storage_style</code> function is called for every non-multipart
body part.<newline/>Large message bodies (&gt; maximum string length) are supported if the
bodies are stored in files. The memory consumption is optimized for
this case, and usually only a small constant amount of memory is needed.<newline/>Example:<newline/>Parse the MIME message stored in the file f:<newline/><precode>     let m = read_mime_message 
               (new input_stream (new input_channel (open_in f)))</precode><param><name>unfold</name>whether linefeeds are replaced by spaces in the values of the
header fields (Note: defaults to <code>false</code> here in contrast to
<reference><element><dot><root>Mimestring</root>scan_header</dot></element></reference>!)</param><param><name>strip</name>whether whitespace at the beginning and at the end of the
header fields is stripped</param><param><name>ro</name>Whether the created MIME headers are read-only or not. Furthermore,
the default <code>storage_style</code> uses this parameter for the MIME bodies, too.
However, the MIME bodies may have a different read-only flag in general.</param></doc><arrow><optional>unfold</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>strip</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>ro</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>multipart_style</optional><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>multipart_style</type></identifier></resolved></path><arrow><optional>storage_style</optional><arrow><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header</class_type></identifier></resolved></path><tuple><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_body</class_type></identifier></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>out_obj_channel</class_type></resolved></path></tuple></arrow><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netstream/index.xml"><cmti name="Netstream" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netstream.cmti" digest="0cb48bc6daf6d8a3d088ce0dfb4dcbbe"/></xml></base>Netstream</root></identifier>in_obj_stream</class_type></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>complex_mime_message</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></arrow></value><comment><title level="1"><label><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>printing</label>Printing MIME Messages</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>encode_mime_body</value><doc><code>let ch' = encode_mime_body hdr ch</code>:
According to the value of the Content-transfer-encoding header field
in <code>hdr</code> the unencoded MIME body written to ch' is encoded and transferred
to ch.<newline/>Handles 7bit, 8bit, binary, quoted-printable, base64.<newline/>For an example, see <code>decode_mime_body</code> which works in a similar way
but performs decoding instead of encoding.<param><name>crlf</name>if set (this is by default the case) CR/LF will be used for
end-of-line (eol) termination, if not set LF will be used. For 7bit, 8bit and
binary encoding the existing eol delimiters are not rewritten, so this option
has only an effect for quoted-printable and base64.</param></doc><arrow><optional>crlf</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><class><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>mime_header_ro</class_type></identifier></resolved></class><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>out_obj_channel</class_type></resolved></path><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>out_obj_channel</class_type></resolved></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>write_mime_message</value><doc>Writes the MIME message to the output channel. The content-transfer-
encoding of the leaves is respected, and their bodies are encoded
accordingly. The content-transfer-encoding of multipart messages is
always &quot;fixed&quot;, i.e. set to &quot;7bit&quot;, &quot;8bit&quot;, or &quot;binary&quot; depending
on the contents.<newline/>The function fails if multipart messages do not have a multipart
content type field (i.e. the content type does not begin with &quot;multipart&quot;).
If only the boundary parameter is missing, a good boundary parameter is
added to the content type. &quot;Good&quot; means here that it is impossible
that the boundary string occurs in the message body if the
content-transfer-encoding is quoted-printable or base64, and that
such an occurrence is very unlikely if the body is not encoded.
If the whole content type field is missing, a &quot;multipart/mixed&quot; type
with a boundary parameter is added to the printed header.<newline/>Note that already existing boundaries are used, no matter whether
they are of good quality or not.<newline/>No other header fields are added, deleted or modified. The mentioned
modifications are _not_ written back to the passed MIME message but
only added to the generated message text.<newline/>It is possible in some cases that the boundary does not work (both
the existing boundary, and the added boundary). This causes that a wrong
and unparseable MIME message is written. In order to ensure a correct
MIME message, it is recommended to parse the written text, and to compare
the structure of the message trees. It is, however, very unlikely that
a problem arises.<newline/>Note that if the passed message is a simple message like (_,`Body _),
and if no content-transfer-encoding is set, the written message might
not end with a linefeed character.<param><name>wr_header</name>If true, the outermost header is written. Inner headers
of the message parts are written unless ~wr_body=false.</param><param><name>wr_body</name>If true, the body of the whole message is written; if false,
no body is written at all.</param><param><name>nr</name>This argument sets the counter that is included in generated
boundaries to a certain minimum value.</param><param><name>ret_boundary</name>if passed, the boundary of the outermost multipart
message is written to this reference. (Internally used.)</param><param><name>crlf</name>if set (this is by default the case) CR/LF will be used for
end-of-line (eol) termination, if not set LF will be used. The eol
separator is used for the header, the multipart framing, and for
bodies encoded as quoted-printable or base64. Other eol separators are
left untouched.</param></doc><arrow><optional>wr_header</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>wr_body</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>nr</optional><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><optional>ret_boundary</optional><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>ref</type></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><arrow><optional>crlf</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>out_obj_channel</class_type></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netmime" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netmime.cmti" digest="0b76a3020124c30d13396d877ed0ad15"/></xml></base>Netmime</root>complex_mime_message</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></arrow></arrow></value></unit>