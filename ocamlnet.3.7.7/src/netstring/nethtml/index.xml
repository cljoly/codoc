<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></html></base>Nethtml</root><digest>9b5e7df0c91d25851c5542b5494444fb</digest><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>Netbuffer<digest>5f4225f2baeef1584e246c6ce1d32119</digest></import><import>Netchannels<digest>4e22bd1ba0cae4bd9bd1b6e69fc16ade</digest></import><import>Netconversion<digest>192a0e1fae2f882e5f06cf84e9f3da38</digest></import><import>Netsys_mem<digest>f19ef786301a8cbcfbf1a4fffee992f8</digest></import><import>Netsys_types<digest>67b26630eaf4decaa483864d4d00a3a2</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><source><file>nethtml.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring</dir><digest>6a67b54b072786786d957df6beee093a</digest></source><doc>Parsing of HTML</doc><type><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>document</type><doc>The type <code>document</code> represents parsed HTML documents:<newline/><list><item><code>Element (name, args, subnodes)</code> is an element node for an element of
type <code>name</code> (i.e. written <code>&lt;name ...&gt;...&lt;/name&gt;</code>) with arguments <code>args</code>
and subnodes <code>subnodes</code> (the material within the element). The arguments
are simply name/value pairs. Entity references (something like <code>&amp;xy;</code>)
occuring in the values are <bold>not</bold> resolved.<newline/>Arguments without values (e.g. <code>&lt;select name=&quot;x&quot; multiple&gt;</code>: here,
<code>multiple</code> is such an argument) are represented as <code>(name,name)</code>, i.e. the
name is also returned as value.<newline/>As argument names are case-insensitive, the names are all lowercase.</item><item><code>Data s</code> is a character data node. Again, entity references are contained
as such and not as what they mean.</item></list><newline/>Character encodings: The parser is restricted to ASCII-compatible
encodings (see the function <reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>is_ascii_compatible</value></resolved></element></reference> for
a definition). In order to read other encodings, the text must be
first recoded to an ASCII-compatible encoding (example below).
Names of elements and attributes must additionally be ASCII-only.</doc><variant><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>document</type>Element</constructor><arguments><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></tuple></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>document</type></identifier></resolved></path></path></tuple></arguments></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>document</type>Data</constructor><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></constructor></variant></type><comment>We also need a type that declares how to handle the various tags.
This is called a &quot;simplified DTD&quot;, as it is derived from SGML DTDs,
but simplified to the extent used in the HTML definition.<newline/>The HTML specification (http://www.w3.org/TR/1999/REC-html401-19991224)
is the reference for the HTML DTD. You can see there that
most HTML elements are either an inline element, a block element, or
both (&quot;flow&quot; element). The grammar of HTML is described in terms of
these classes. For instance, a <code>P</code> tag (paragraph) is a block element and
contains block elements whereas <code>B</code> (bold) is an inline element and
contains inline elements. From this follows that you cannot put a <code>P</code>
inside a <code>B</code>: <code>&lt;B&gt;&lt;P&gt;something&lt;/P&gt;&lt;/B&gt;</code> is illegal.<newline/>The parser needs this information to resolve such input, i.e. do
something with bad HTML. As HTML allows tag minimization (many end tags
can be omitted), the parser can read this as: <code>&lt;B&gt;&lt;/B&gt;&lt;P&gt;something&lt;/P&gt;</code>
(and the <code>&lt;/B&gt;</code> in the input is ignored).<newline/>If all start and all end tags are written out, changing the
simplified_dtd does not make any difference.<newline/>There is no normative text that says how to read bad HTML. Because of
this, it is - to a large degree - an interpretation of HTML what you put
into <code>simplified_dtd</code>. We provide two versions:<list><item><code>html40_dtd</code>: tries to be close to the official spec</item><item><code>relaxed_html40_dtd</code>: tries to be close to what common web browsers
implement</item></list></comment><type><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>element_class</type><doc>Element classes are a property used in the HTML DTD. For our purposes,
we define element classes simply as an enumeration:<list><item><code>`Inline</code> is the class of inline HTML elements</item><item><code>`Block</code> is the class of block HTML elements</item><item><code>`Essential_block</code> is a sub-class of <code>`Block</code> with the additional
property that every start tag must be explicitly ended</item><item><code>`None</code> means that the members of the class are neither block nor
inline elements, but have to be handled specially</item><item><code>`Everywhere</code> means that the members of the class can occur everywhere,
regardless of whether a constraint allows it or not.</item></list></doc><poly_variant><fixed/><constructor>Inline<constant/></constructor><constructor>Block<constant/></constructor><constructor>Essential_block<constant/></constructor><constructor>None<constant/></constructor><constructor>Everywhere<constant/></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>model_constraint</type><doc>Model constraints define the possible sub elements of an element:<list><item><code>`Inline</code>: The sub elements must belong to the class <code>`Inline</code></item><item><code>`Block</code>: The sub elements must be members of the classes <code>`Block</code> or
<code>`Essential_block</code></item><item><code>`Flow</code>: The sub elements must belong to the classes <code>`Inline</code>, <code>`Block</code>,
or <code>`Essential_block</code></item><item><code>`Empty</code>: There are no sub elements</item><item><code>`Any</code>: Any sub element is allowed</item><item><code>`Special</code>: The element has special content (e.g. <code>&lt;script&gt;</code>).
Functionally equivalent to <code>`Empty</code></item><item><code>`Elements l</code>: Only these enumerated elements may occur as sub elements</item><item><code>`Or(m1,m2)</code>: One of the constraints <code>m1</code> or <code>m2</code> must hold</item><item><code>`Except(m1,m2)</code>: The constraint <code>m1</code> must hold, and <code>m2</code> must not hold</item><item><code>`Sub_exclusions(l,m)</code>: The constraint <code>m</code> must hold; furthermore,
the elements enumerated in list <code>l</code> are not allowed as direct or
indirect subelements, even if <code>m</code> or the model of a subelement would
allow them. The difference to <code>`Except(m, `Elements l)</code> is that the
exclusion is inherited to the subelements. The <code>`Sub_exclusions</code>
expression must be toplevel, i.e. it must not occur within an <code>`Or</code>,
<code>`Except</code>, or another <code>'Sub_exclusions</code> expression.</item></list>Note that the members of the class <code>`Everywhere</code> are allowed everywhere,
regardless of whether the model constraint allows them or not.<newline/>Note that certain aspects are not modeled:<list><item><code>#PCDATA</code>: We do not specify where PCDATA is allowed and where not.</item><item>Order, Number: We do neither specify in which order the sub elements must
occur nor how often they can occur</item><item>Inclusions: DTDs may describe that an element extraordinarily
allows a list of elements in all sub elements.</item><item>Optional tags: Whether start or end tags can be omitted (to some extent,
this can be expressed with <code>`Essential_block</code>, however)</item></list></doc><poly_variant><fixed/><constructor>Inline<constant/></constructor><constructor>Block<constant/></constructor><constructor>Flow<constant/></constructor><constructor>Empty<constant/></constructor><constructor>Any<constant/></constructor><constructor>Special<constant/></constructor><constructor>Elements<path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></constructor><constructor>Or<tuple><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>model_constraint</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>model_constraint</type></identifier></resolved></path></tuple></constructor><constructor>Except<tuple><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>model_constraint</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>model_constraint</type></identifier></resolved></path></tuple></constructor><constructor>Sub_exclusions<tuple><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>model_constraint</type></identifier></resolved></path></tuple></constructor></poly_variant></type><type><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>simplified_dtd</type><doc>A <code>simplified_dtd</code> is an associative list of tuples
<code>(element_name, (element_class, constraint))</code>: For every <code>element_name</code>
it is declared that it is a member of <code>element_class</code>, and that
the sub elements must satisfy <code>constraint</code>.<newline/>It is not allowed to have several entries for the same element.</doc><path><resolved><identifier><type>list</type></identifier></resolved><tuple><path><resolved><identifier><type>string</type></identifier></resolved></path><tuple><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>element_class</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>model_constraint</type></identifier></resolved></path></tuple></tuple></path></type><value><value><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>html40_dtd</value><doc>The (transitional) HTML 4.0 DTD, expressed as <code>simplified_dtd</code></doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>simplified_dtd</type></identifier></resolved></path></value><value><value><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>relaxed_html40_dtd</value><doc>A relaxed version of the HTML 4.0 DTD that matches better common
practice. In particular, this DTD additionally allows that inline
elements may span blocks. For example,
<precode>&lt;B&gt;text1 &lt;P&gt;text2</precode>
is parsed as
<precode>&lt;B&gt;text1 &lt;P&gt;text2&lt;/P&gt;&lt;/B&gt;</precode>
and not as
<precode>&lt;B&gt;text1 &lt;/B&gt;&lt;P&gt;text2&lt;/P&gt;</precode>
\- the latter is more correct (and parsed by <code>html40_dtd</code>), but is not what
users expect.<newline/>Note that this is still not what many browsers implement. For example,
Netscape treats most inline tags specially: <code>&lt;B&gt;</code> switches bold on,
<code>&lt;/B&gt;</code> switches bold off. For example,
<precode>&lt;A href='a'&gt;text1&lt;B&gt;text2&lt;A href='b'&gt;text3</precode>
is parsed as
<precode>&lt;A href='a'&gt;text1&lt;B&gt;text2&lt;/B&gt;&lt;/A&gt;&lt;B&gt;&lt;A href='b'&gt;text3&lt;/A&gt;&lt;/B&gt;</precode>
\- there is an extra <code>B</code> element around the second anchor! (You can
see what Netscape parses by loading a page into the &quot;Composer&quot;.)
IMHO it is questionable to consider inline tags as switches because
this is totally outside of the HTML specification, and browsers may
differ in that point.<newline/>Furthermore, several elements are turned into essential blocks:
<code>TABLE</code>, <code>UL</code>, <code>OL</code>, and <code>DL</code>. David Fox reported a problem with structures
like:
<precode>&lt;TABLE&gt;&lt;TR&gt;&lt;TD&gt;&lt;TABLE&gt;&lt;TR&gt;&lt;TD&gt;x&lt;/TD&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;y&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;</precode>
i.e. the <code>TD</code> of the inner table has two end tags. Without additional
help, the second <code>&lt;/TD&gt;</code> would close the outer table cell. Because of
this problem, tables are now essential meaning that it is not allowed
to implicitly add a missing <code>&lt;/TABLE&gt;</code>; every table element has to
be explicitly ended. This rule seems to be what many browsers implement.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>simplified_dtd</type></identifier></resolved></path></value><value><value><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>parse_document</value><doc>Parses the HTML document from a <code>lexbuf</code> and returns it.<param><name>dtd</name>specifies the DTD to use. By default, <code>html40_dtd</code> is used which
bases on the transitional HTML 4.0 DTD</param><param><name>return_declarations</name>if set, the parser returns <code>&lt;!...&gt;</code> declarations
as <code>Element(&quot;!&quot;,[&quot;contents&quot;,c],[])</code> nodes, where <code>c</code> is the string inside
<code>&lt;!</code> and <code>&gt;</code>. - By default, declarations are skipped.</param><param><name>return_pis</name>if set, the parser returns <code>&lt;?...&gt;</code> (or <code>&lt;?...?&gt;</code>) processing
instructions as <code>Element(&quot;?&quot;,[&quot;contents&quot;,c],[])</code> nodes, where <code>c</code> is the
string inside <code>&lt;?</code> and <code>&gt;</code> (or <code>?&gt;</code>). - By default, processing instructions
are skipped.</param><param><name>return_comments</name>if set, the parser returns <code>&lt;!--</code> .... <code>--&gt;</code> comments
as <code>Element(&quot;--&quot;,[&quot;contents&quot;,c],[])</code> nodes, where <code>c</code> is the string inside
<code>&lt;!--</code> and <code>--&gt;</code>. - By default, comments are skipped.</param></doc><arrow><optional>dtd</optional><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>simplified_dtd</type></identifier></resolved></path><arrow><optional>return_declarations</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>return_pis</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>return_comments</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/lexing/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/lexing/index.xml"><cmti name="Lexing" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/lexing.cmti" digest="1be6a5484fb3cfb69d2c981438a7be62"/></xml></html></base>Lexing</root></identifier>lexbuf</type></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>document</type></identifier></resolved></path></path></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>parse</value><doc>Parses the HTML document from an object channel and returns it.
For example, to parse the HTML string <code>s</code>:
<precode>     let ch = Netchannels.input_string s in
     let doc = parse ch</precode><newline/>Arguments are the same as in <code>parse_document</code>.</doc><arrow><optional>dtd</optional><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>simplified_dtd</type></identifier></resolved></path><arrow><optional>return_declarations</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>return_pis</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>return_comments</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>in_obj_channel</class_type></resolved></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>document</type></identifier></resolved></path></path></arrow></arrow></arrow></arrow></arrow></value><comment><bold>Note on XHTML</bold><newline/>The parser can read XHTML, as long as the following XML features are not
used:<list><item>Internal DTD subset, i.e. <code>&lt;!DOCTYPE html ... [ ... ]&gt;</code></item><item>External entities</item><item><code>&lt;![CDATA[</code></item><item><code>&lt;![INCLUDE[</code></item><item><code>&lt;![IGNORE[</code></item></list>The following XML features are ok:<list><item>Processing instructions</item><item>Empty elements (e.g. <code>&lt;br/&gt;</code>) as long as the element is declared as
<code>`Empty</code>.</item></list></comment><comment><bold>Note on Character Encodings</bold><newline/>The parser can only read character streams that are encoded in an ASCII-
compatible way. For example, it is possible to read a UTF-8-encoded
stream, but not a UTF-16-encoded stream. All bytes between 1 and 127
are taken as ASCII, and other bytes are ignored (copied from input
to output).<newline/>Non-ASCII-compatible streams must be recoded first. For example, to
read a UTF-16-encoded netchannel <code>ch</code>, use:<newline/><precode>   let p = 
     new Netconversion.recoding_pipe ~in_enc:`Enc_utf16 ~out_enc:`Enc_utf8 () in
   let ch' =
     new Netchannels.input_filter ch p in
   let doc =
     Nethtml.parse ch' in
   ch' # close_in();
   ch # close_in();</precode></comment><value><value><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>decode</value><doc>Converts entities <code>&amp;name;</code> and <code>&amp;#num;</code> into the corresponding
characters. The argument <code>enc</code> must indicate the character set of
the document (by default ISO-8859-1 for backwards compatibility).
If a character cannot be represented in this encoding, the function
<code>subst</code> is called (input is the Unicode code point, output is the
substituted string). By default, the function fails if such a
character is found.<newline/>The arg <code>entity_base</code> selects which entities can be converted
(see <reference><element><resolved><value><module><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netencoding/index.xml"><cmti name="Netencoding" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netencoding.cmti" digest="1e3a4e766eb2eec3c2276a870dd7e697"/></xml></base>Netencoding</root></identifier>Html</module>decode</value></resolved></element></reference>). The function <code>lookup</code> is called
for all unknown <code>&amp;name;</code> entities. By default, this function fails.<newline/>Declarations, processing instructions, and comments are not
decoded. The same also applies to elements declared as <code>`Special</code>
in the DTD. The <code>dtd</code> argument determines the DTD, by default
<code>html40_dtd</code> is assumed.</doc><arrow><optional>enc</optional><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>encoding</type></resolved></path><arrow><optional>subst</optional><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow><arrow><optional>entity_base</optional><poly_variant><fixed/><constructor>Html<constant/></constructor><constructor>Xml<constant/></constructor><constructor>Empty<constant/></constructor></poly_variant><arrow><optional>lookup</optional><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow><arrow><optional>dtd</optional><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>simplified_dtd</type></identifier></resolved></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>document</type></identifier></resolved></path></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>document</type></identifier></resolved></path></path></arrow></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>encode</value><doc>Converts problematic characters to their corresponding
entities. The argument <code>enc</code> must indicate the character set of
the document (by default ISO-8859-1 for backwards compatibility).
If <code>prefer_name</code>, the algorithm tries to find the named entities
(<code>&amp;name;</code>); otherwise only numeric entities (<code>&amp;#num;</code>) are generated.
Names are preferred by default.<newline/>Declarations, processing instructions, and comments are not
encoded. The same also applies to elements declared as <code>`Special</code>
in the DTD. The <code>dtd</code> argument determines the DTD, by default
<code>html40_dtd</code> is assumed.</doc><arrow><optional>enc</optional><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netconversion/index.xml"><cmti name="Netconversion" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netconversion.cmti" digest="192a0e1fae2f882e5f06cf84e9f3da38"/></xml></base>Netconversion</root></identifier>encoding</type></resolved></path><arrow><optional>prefer_name</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>dtd</optional><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>simplified_dtd</type></identifier></resolved></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>document</type></identifier></resolved></path></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>document</type></identifier></resolved></path></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>map_list</value><doc><code>map_list f doclst</code>:
Applies <code>f</code> to all attribute values and data strings (except
the attributes of &quot;?&quot;, &quot;!&quot;, or &quot;--&quot; nodes).<newline/>This can be used to change the text encoding of a parsed document:
<precode>     let doc' = map_list String.lowercase doc</precode>
converts all text data to lowercase characters.</doc><arrow><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>document</type></identifier></resolved></path></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>document</type></identifier></resolved></path></path></arrow></arrow></value><type><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>xmap_value</type><variant><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>xmap_value</type>Xmap_attribute</constructor><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></constructor><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>xmap_value</type>Xmap_data</constructor><arguments><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></constructor></variant></type><value><value><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>xmap_list</value><doc><code>xmap_list f surrounding_element_opt doclst</code>: Similar to <code>map_list</code>,
the function <code>f</code> is applied to all attribute values and data strings.
Unlike <code>map_list</code>, more information is passed to the callback function
<code>f</code>. This function is called with an <code>xmap_value</code> argument:<list><item><code>Xmap_attribute(ename,aname,aval)</code>: The function is called for an
attribute value of element <code>ename</code>. The attribute is <code>aname</code> and
has the value <code>aval</code>. The function must return the new value of
the attribute (i.e. <code>aval'</code>).</item><item><code>Xmap_data(ename_opt,data)</code>: The function is called for a data
node surrounded by an element <code>ename_opt</code> (which is <code>None</code> if the
data node is the outermost node). The string <code>data</code> is the value
of the data node. The function must return the new value of the
data node (i.e. <code>data'</code>).</item></list><code>xmap_list</code> is invoked with <code>surrounding_element_opt</code> which is the
name of the surrounding element, or <code>None</code> if such an element does
not exist, or is unknown.</doc><arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>xmap_value</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>document</type></identifier></resolved></path></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>document</type></identifier></resolved></path></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>write</value><doc>Writes the document to the output channel. No additional encoding or
decoding happens.<newline/>Empty elements are written without end tag (see also optional argument
<code>xhtml</code>); the rest is written unabbreviated.<newline/>Example: To write the document to a file:
<precode>     let f = open_out &quot;filename&quot; in
     let ch = new Netchannels.output_channel f in
     write ch doc;
     ch # close_out()</precode><param><name>dtd</name>The assumed simplified DTD, by default <code>html40_dtd</code></param><param><name>xhtml</name>makes the output compatible with XHTML 1.0 Strict by
closing <code>`Empty</code> tags with &quot;/&gt;&quot; (<code>true</code> by default).</param></doc><arrow><optional>dtd</optional><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>simplified_dtd</type></identifier></resolved></path><arrow><optional>xhtml</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netstring/netchannels/index.xml"><cmti name="Netchannels" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/netchannels.cmti" digest="4e22bd1ba0cae4bd9bd1b6e69fc16ade"/></xml></base>Netchannels</root></identifier>out_obj_channel</class_type></resolved></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Nethtml" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netstring/nethtml.cmti" digest="9b5e7df0c91d25851c5542b5494444fb"/></xml></base>Nethtml</root>document</type></identifier></resolved></path></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value></unit>