<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Shell_uq" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell_uq.cmti" digest="0ec6f55804417a1cc2d6a3f64d150b8d"/></xml></html></base>Shell_uq</root><digest>0ec6f55804417a1cc2d6a3f64d150b8d</digest><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>CamlinternalOO<digest>3d0b4eb4525ba4274c8885d7124f7bbc</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Equeue<digest>207ed21b384dd4f4ad91bce8a449f64c</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>Netbuffer<digest>5f4225f2baeef1584e246c6ce1d32119</digest></import><import>Netchannels<digest>4e22bd1ba0cae4bd9bd1b6e69fc16ade</digest></import><import>Netexn<digest>845c6110cc81d957d9fc21c9e149d5fb</digest></import><import>Netlog<digest>2441459e41ceb77fc72d5714e0508958</digest></import><import>Netsockaddr<digest>514bc9294568dc3facaf49b96623c337</digest></import><import>Netsys<digest>4a0ae4cc74f10e8667e3b629e6907079</digest></import><import>Netsys_mem<digest>f19ef786301a8cbcfbf1a4fffee992f8</digest></import><import>Netsys_posix<digest>f5b674538a41e016bb4f0e731d114657</digest></import><import>Netsys_signal<digest>703311022efc5162433d614b9bef35af</digest></import><import>Netsys_types<digest>67b26630eaf4decaa483864d4d00a3a2</digest></import><import>Netsys_win32<digest>02161f9169b76f686b05a51ed2d9357c</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Oo<digest>0977563fa9c23f2df2952b302bdba835</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>Shell<digest>6524b490ffcd34f586611e86202aac97</digest></import><import>Shell_sys<digest>c3c871471e040ad097ba823e433888c3</digest></import><import>Stream<digest>55948988e71c3ee1749feb21ccec9fc9</digest></import><import>Sys<digest>0ce699458ce4430954d7e6a78874647c</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><import>Unixqueue<digest>5ec5f57d46c5b3e908696c79a59232d4</digest></import><import>Unixqueue_util<digest>f013da7473123405a6e2f9edc5dde5e1</digest></import><import>Uq_engines<digest>7eabb27fa86d9290a1fe2ef78547b48a</digest></import><source><file>shell_uq.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell</dir><digest>19619f7eb32cd7ea2f5ff69a1687c14f</digest></source><doc>Run shell commands within Unixqueues</doc><comment>This module is <bold>not thread-safe</bold>. See the module <code>Shell_sys</code> for
more information.</comment><comment><bold>Signal handlers:</bold> It is important to have a number of signal handlers
installed for proper function of the engines. It is recommended to
call the pair of functions <reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/shell/shell_sys/index.xml"><cmti name="Shell_sys" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell_sys.cmti" digest="c3c871471e040ad097ba823e433888c3"/></xml></base>Shell_sys</root></identifier>configure_job_handlers</value></resolved></element></reference> and
<reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/shell/shell_sys/index.xml"><cmti name="Shell_sys" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell_sys.cmti" digest="c3c871471e040ad097ba823e433888c3"/></xml></base>Shell_sys</root></identifier>install_job_handlers</value></resolved></element></reference> for this purpose. This is not
done automatically.<newline/>Note that this has a global side effect on the whole process, because
there is only one set of signal handlers.</comment><comment><title level="1">Engines</title></comment><class_type><class_type><root><base><xml src="index.xml"><cmti name="Shell_uq" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell_uq.cmti" digest="0ec6f55804417a1cc2d6a3f64d150b8d"/></xml></base>Shell_uq</root>job_handler_engine_type</class_type><doc>This type of engine also returns the <code>job</code> and the <code>job_instance</code>.</doc><param>t</param><signature><inherit><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/uq_engines/index.xml"><cmti name="Uq_engines" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/uq_engines.cmti" digest="7eabb27fa86d9290a1fe2ef78547b48a"/></xml></base>Uq_engines</root></identifier>engine</class_type></resolved><var>t</var></path></inherit><method><method><class_type><root><base><xml src="index.xml"><cmti name="Shell_uq" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell_uq.cmti" digest="0ec6f55804417a1cc2d6a3f64d150b8d"/></xml></base>Shell_uq</root>job_handler_engine_type</class_type>job</method><doc>Returns the called job</doc><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/shell/shell_sys/index.xml"><cmti name="Shell_sys" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell_sys.cmti" digest="c3c871471e040ad097ba823e433888c3"/></xml></base>Shell_sys</root></identifier>job</type></resolved></path></method><method><method><class_type><root><base><xml src="index.xml"><cmti name="Shell_uq" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell_uq.cmti" digest="0ec6f55804417a1cc2d6a3f64d150b8d"/></xml></base>Shell_uq</root>job_handler_engine_type</class_type>job_instance</method><doc>Returns the job instance</doc><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/shell/shell_sys/index.xml"><cmti name="Shell_sys" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell_sys.cmti" digest="c3c871471e040ad097ba823e433888c3"/></xml></base>Shell_sys</root></identifier>job_instance</type></resolved></path></method></signature></class_type><class><class><root><base><xml src="index.xml"><cmti name="Shell_uq" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell_uq.cmti" digest="0ec6f55804417a1cc2d6a3f64d150b8d"/></xml></base>Shell_uq</root>call_engine</class><doc>This engine corresponds to <reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/shell/shell/index.xml"><cmti name="Shell" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell.cmti" digest="6524b490ffcd34f586611e86202aac97"/></xml></base>Shell</root></identifier>call</value></resolved></element></reference>. The command list is
executed until the job is done. In this case,
the status of the engine changes to <code>`Done</code> or <code>`Error</code>.
If not <code>ignore_error_code</code>, failed jobs are reported by the
error status <code>`Error Subprocess_failure</code>. If <code>ignore_error_code</code>,
failed jobs are ignored, and result in the status <code>`Done</code>
(however, jobs terminated by signals are still reported as
errors).<newline/>For the other arguments see <reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/shell/shell/index.xml"><cmti name="Shell" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell.cmti" digest="6524b490ffcd34f586611e86202aac97"/></xml></base>Shell</root></identifier>call</value></resolved></element></reference>.<newline/>When the engine goes to <code>`Error</code> or <code>`Aborted</code>, the job
is terminated ( <reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/shell/shell_sys/index.xml"><cmti name="Shell_sys" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell_sys.cmti" digest="c3c871471e040ad097ba823e433888c3"/></xml></base>Shell_sys</root></identifier>abandon_job</value></resolved></element></reference> ).</doc><arrow><optional>ignore_error_code</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path><arrow><optional>mode</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/shell/shell_sys/index.xml"><cmti name="Shell_sys" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell_sys.cmti" digest="c3c871471e040ad097ba823e433888c3"/></xml></base>Shell_sys</root></identifier>group_mode</type></resolved></path></path><arrow><optional>stdin</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/shell/shell/index.xml"><cmti name="Shell" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell.cmti" digest="6524b490ffcd34f586611e86202aac97"/></xml></base>Shell</root></identifier>producer</type></resolved></path></path><arrow><optional>stdout</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/shell/shell/index.xml"><cmti name="Shell" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell.cmti" digest="6524b490ffcd34f586611e86202aac97"/></xml></base>Shell</root></identifier>consumer</type></resolved></path></path><arrow><optional>stderr</optional><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/shell/shell/index.xml"><cmti name="Shell" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell.cmti" digest="6524b490ffcd34f586611e86202aac97"/></xml></base>Shell</root></identifier>consumer</type></resolved></path></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/shell/shell_sys/index.xml"><cmti name="Shell_sys" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell_sys.cmti" digest="c3c871471e040ad097ba823e433888c3"/></xml></base>Shell_sys</root></identifier>command</type></resolved></path></path><arrow><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/equeue/unixqueue/index.xml"><cmti name="Unixqueue" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/equeue/unixqueue.cmti" digest="5ec5f57d46c5b3e908696c79a59232d4"/></xml></base>Unixqueue</root></identifier>event_system</class_type></resolved></path><path><resolved><identifier><class_type><root><base><xml src="index.xml"><cmti name="Shell_uq" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell_uq.cmti" digest="0ec6f55804417a1cc2d6a3f64d150b8d"/></xml></base>Shell_uq</root>job_handler_engine_type</class_type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/shell/shell_sys/index.xml"><cmti name="Shell_sys" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell_sys.cmti" digest="c3c871471e040ad097ba823e433888c3"/></xml></base>Shell_sys</root></identifier>job_status</type></resolved></path></path></arrow></arrow></arrow></arrow></arrow></arrow></arrow></class><comment><title level="1">Examples</title><newline/>All examples presented for the <reference><element><root>Shell</root></element></reference> module can be easily rewritten
for <code>Shell_uq</code>. For example, to call &quot;ls&quot; and collect the result in a
buffer, use this piece of code:<newline/><precode>   let ues = Unixqueue.create_unix_event_system();;
   let b = Buffer.create 10;;
   let e = new call_engine ~stdout:(Shell.to_buffer b) [ Shell.command &quot;ls&quot; ];;
   Unixqueue.run ues;;
   let r = Buffer.contents b;;</precode><newline/>This means, one simply creates a <code>call_engine</code> instead of invoking
<reference><element><resolved><value><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/shell/shell/index.xml"><cmti name="Shell" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/shell/shell.cmti" digest="6524b490ffcd34f586611e86202aac97"/></xml></base>Shell</root></identifier>call</value></resolved></element></reference>, and then runs the queue. Note that you must look at
<code>e#state</code> to find out whether the engine <code>e</code> produced an error, no
exception is raised in this case.<newline/>It is allowed (and somehow the purpose of this module) to create
several job engines, and let them run in parallel.</comment></unit>