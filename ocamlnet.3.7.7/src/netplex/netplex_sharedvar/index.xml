<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></html></base>Netplex_sharedvar</root><digest>f19e9e5af87fa260c338ddf9f3a9a1e7</digest><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>CamlinternalOO<digest>3d0b4eb4525ba4274c8885d7124f7bbc</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Equeue<digest>207ed21b384dd4f4ad91bce8a449f64c</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>Netbuffer<digest>5f4225f2baeef1584e246c6ce1d32119</digest></import><import>Netchannels<digest>4e22bd1ba0cae4bd9bd1b6e69fc16ade</digest></import><import>Netexn<digest>845c6110cc81d957d9fc21c9e149d5fb</digest></import><import>Netlog<digest>2441459e41ceb77fc72d5714e0508958</digest></import><import>Netnumber<digest>dbd89ef42a315eaa84a5eeb21e4b6530</digest></import><import>Netplex_cenv<digest>43133314057c968b273798ffd6e47f8f</digest></import><import>Netplex_encap<digest>6dd5527c9f4aa5fa370a0b8cfe94711b</digest></import><import>Netplex_types<digest>b09b49cdab7359a58acb7a6f179e24ac</digest></import><import>Netsockaddr<digest>514bc9294568dc3facaf49b96623c337</digest></import><import>Netsys<digest>4a0ae4cc74f10e8667e3b629e6907079</digest></import><import>Netsys_mem<digest>f19ef786301a8cbcfbf1a4fffee992f8</digest></import><import>Netsys_pmanage<digest>92c0604cf0e5efc29660e1f7814481fc</digest></import><import>Netsys_posix<digest>f5b674538a41e016bb4f0e731d114657</digest></import><import>Netsys_signal<digest>703311022efc5162433d614b9bef35af</digest></import><import>Netsys_types<digest>67b26630eaf4decaa483864d4d00a3a2</digest></import><import>Netsys_win32<digest>02161f9169b76f686b05a51ed2d9357c</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Oo<digest>0977563fa9c23f2df2952b302bdba835</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Rpc<digest>823bfd8fbbbc545fe6929685a57393b5</digest></import><import>Rpc_client<digest>56bf3aef28bd1d22eab29ca954a2cb3c</digest></import><import>Rpc_packer<digest>af7dd8ce3ff9294c27a0d09fd8424b4e</digest></import><import>Rpc_program<digest>2c8259e58584b03793c1d5b3eaa20436</digest></import><import>Rpc_server<digest>11e0d988a11e73632cc4454470337bbd</digest></import><import>Rpc_transport<digest>6dccd6c9fbafeb7fe8a94a52c7614424</digest></import><import>Rpc_util<digest>fdef7f525a45859737db6e8e58372317</digest></import><import>Rtypes<digest>3a2195ceddcae11873afeb1784965176</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>Stream<digest>55948988e71c3ee1749feb21ccec9fc9</digest></import><import>Sys<digest>0ce699458ce4430954d7e6a78874647c</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><import>Unixqueue<digest>5ec5f57d46c5b3e908696c79a59232d4</digest></import><import>Unixqueue_util<digest>f013da7473123405a6e2f9edc5dde5e1</digest></import><import>Uq_engines<digest>7eabb27fa86d9290a1fe2ef78547b48a</digest></import><import>Uq_mt<digest>9c171e79d90169806336d502364d1bd2</digest></import><import>Xdr<digest>d36f2013b5caa2d21a98f895fdddfd16</digest></import><import>Xdr_mstring<digest>2f3d19f64c1f9ca2f05941c7b5ea2c42</digest></import><source><file>netplex_sharedvar.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex</dir><digest>02208a8aad872d23b6f0f5d253e96446</digest></source><doc>Netplex-wide variables</doc><comment>This plugin allows to have Netplex-global variables that can be read
and written by all components. These variables are useful to communicate
names and other small pieces of information across the whole Netplex.
For instance, one component could allocate a shared memory object, and
put its name into a variable to make it known to other components.<newline/>This implementation works in both multi-processing and
multi-threading netplex environments. It is, however, not very
fast, because the variables live in the controller, and the
access operations are realized by RPC's. It is good
enough when these operations are only infrequently called, e.g. in
the post-start and pre-finish processor callbacks.<newline/>Furthermore, note that it is unwise to put large values into
variables when using them in multi-processing contexts. The controller
process is also the parent process of all <code>fork</code>ed children, and
when a lot of memory is allocated in the controller, all
this memory needs to be copied when the <code>fork</code> is done. As workaround,
put such values into temporary files, and only pass the names of the
files around via variables.<newline/>Variables come in two flavors:<list><item>String variables</item><item>Encapsulated variables (see <reference><element><root>Netplex_encap</root></element></reference>)</item></list>A string variable cannot be accessed as encapsulated variable, and
vice versa.<newline/>The latter kind is useful to safely store structured ocaml values in
Netplex variables.<newline/>More documentation can also be found here:
<reference><element><dot><root>Netplex_advanced</root>sharedvars</dot></element></reference><newline/><bold>Thread safety:</bold> Full. The functions can be called from any thread.</comment><exception><exception><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>Sharedvar_type_mismatch</exception><doc>The (dynamically typed) variable has the wrong type (string/exn)</doc><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>Sharedvar_no_permission</exception><doc>It is not allowed to set the value</doc><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>Sharedvar_not_found</exception><doc>The variable does not exist. Only used by <code>Make_var_type</code></doc><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>Sharedvar_null</exception><doc>The initial value of a shared exception variable</doc></exception><value><value><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>plugin</value><doc>To enable shared variables, call the controller's <code>add_plugin</code> method
with this object as argument. This can e.g. be done in the
<code>post_add_hook</code> of the processor.</doc><path><resolved><class_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netplex/netplex_types/index.xml"><cmti name="Netplex_types" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_types.cmti" digest="b09b49cdab7359a58acb7a6f179e24ac"/></xml></base>Netplex_types</root></identifier>plugin</class_type></resolved></path></value><comment>The folloing functions can all be invoked in container
contexts. In controller context, access is limited to <code>get_value</code>.<newline/>If called from the wrong context the exception
<reference><element><resolved><exception><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netplex/netplex_cenv/index.xml"><cmti name="Netplex_cenv" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_cenv.cmti" digest="43133314057c968b273798ffd6e47f8f"/></xml></base>Netplex_cenv</root></identifier>Not_in_container_thread</exception></resolved></element></reference> is raised.</comment><value><value><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>create_var</value><doc>Create the variable with the passed name with an empty string
(or the exception <code>Sharedvar_null</code>) as
initial value. If the creation is possible (i.e. the variable did
not exist already), the function returns <code>true</code>, otherwise
the already existing variable is left modified, and <code>false</code> is
passed back. By default, the variable can be modified and deleted
by any other container. Two options allow you to change that:<newline/><list><item><code>own</code>: If true, the created variable is owned by the calling
socket service. Only the caller can delete it, and when the
last component of the socket service terminates, the variable is
automatically deleted. The deletion happens after the
<code>post_finish_hook</code> is executed, so the variable is still accessible
from this hook.</item><item><code>ro</code>: if true, only the owner can set the value</item><item><code>enc</code>: if true, the variable stores encapsulated values, otherwise
strings
(defaults to false)</item></list>Variable names are global to the whole netplex system. By convention,
these names are formed like <code>&quot;service_name.local_name&quot;</code>, i.e. they
are prefixed by the socket service to which they refer.</doc><arrow><optional>own</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>ro</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>enc</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>delete_var</value><doc><code>delete_var name</code>: Deletes the variable <code>name</code>. Returns <code>true</code> if
the deletion could be carried out, and <code>false</code> when the variable
does not exist, or the container does not have permission to delete
the variable.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>set_value</value><doc><code>set_value name value</code>: Sets the variable <code>name</code> to <code>value</code>. This
is only possible when the variable exists, and is writable.
Returns <code>true</code> if the function is successful, and <code>false</code> when
the variable does not exist.<newline/>Raises <code>Sharedvar_no_permission</code> if the variable cannot be modified.<newline/>Raises <code>Sharedvar_type_mismatch</code> if the variable is not a string
variable.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>set_enc_value</value><doc><code>set_enc_value name value</code>: Sets the variable <code>name</code> to <code>value</code>.
Return value as for <code>set_value</code>.<newline/>Raises <code>Sharedvar_no_permission</code> if the variable cannot be modified.<newline/>Raises <code>Sharedvar_type_mismatch</code> if the variable is not encapsulated</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netplex/netplex_types/index.xml"><cmti name="Netplex_types" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_types.cmti" digest="b09b49cdab7359a58acb7a6f179e24ac"/></xml></base>Netplex_types</root></identifier>encap</type></resolved></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>get_value</value><doc><code>get_value name</code>: Gets the value of the variable <code>name</code>. If the
variable does not exist, <code>None</code> is returned.<newline/>Raises <code>Sharedvar_type_mismatch</code> if the variable is not a string
variable.<newline/>As an exception of the general rules, this function can also be
called from the controller, and not only from a container.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>get_enc_value</value><doc><code>get_enc_value name</code>: Gets the value of the variable <code>name</code>. If the
variable does not exist, <code>None</code> is returned.<newline/>Raises <code>Sharedvar_type_mismatch</code> if the variable is not encapsulated<newline/>As an exception of the general rules, this function can also be
called from the controller, and not only from a container.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netplex/netplex_types/index.xml"><cmti name="Netplex_types" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_types.cmti" digest="b09b49cdab7359a58acb7a6f179e24ac"/></xml></base>Netplex_types</root></identifier>encap</type></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>wait_for_value</value><doc><code>wait_for_value name</code>: If the variable exists and <code>set_value</code> has
already been called at least once, the current value is returned.
If the variable exists, but <code>set_value</code> has not yet been called at all,
the function waits until <code>set_value</code> is called, and returns the value
set then. If the variable does not exist, the function immediately
returns <code>None</code>.<newline/>An ongoing wait is interrupted when the variable is deleted. In this
case <code>None</code> is returned.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>wait_for_enc_value</value><doc>Same for encapsulated variables</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netplex/netplex_types/index.xml"><cmti name="Netplex_types" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_types.cmti" digest="b09b49cdab7359a58acb7a6f179e24ac"/></xml></base>Netplex_types</root></identifier>encap</type></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>get_lazily</value><doc><code>get_lazily name f</code>: Uses the variable <code>name</code> to ensure that <code>f</code>
is only invoked when <code>get_lazily</code> is called for the first time,
and that the value stored in the variable is returned the
next times. This works from whatever component <code>get_lazily</code>
is called.<newline/>If <code>f()</code> raises an exception, the exception is suppressed, and
<code>None</code> is returned as result of <code>get_lazily</code>. Exceptions are not
stored in the variable, so the next time <code>get_lazily</code> is called
it is again tried to compute the value of <code>f()</code>. If you want to
catch the exception this must done in the body of <code>f</code>.<newline/>No provisions are taken to delete the variable. If <code>delete_var</code>
is called by user code (which is allowed at any time), and
<code>get_lazily</code> is called again, the lazy value will again be computed.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>get_enc_lazily</value><doc>Same for encapsulated values</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netplex/netplex_types/index.xml"><cmti name="Netplex_types" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_types.cmti" digest="b09b49cdab7359a58acb7a6f179e24ac"/></xml></base>Netplex_types</root></identifier>encap</type></resolved></path></arrow><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netplex/netplex_types/index.xml"><cmti name="Netplex_types" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_types.cmti" digest="b09b49cdab7359a58acb7a6f179e24ac"/></xml></base>Netplex_types</root></identifier>encap</type></resolved></path></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>dump</value><doc>Dumps the access counter of this variable to <reference><element><root>Netlog</root></element></reference>. The
string argument &quot;*&quot; dumps all variables.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netsys/netlog/index.xml"><cmti name="Netlog" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netsys/netlog.cmti" digest="2441459e41ceb77fc72d5714e0508958"/></xml></base>Netlog</root></identifier>level</type></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><module><module><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>Make_var_type</module><doc>Creates a module with <code>get</code> and <code>set</code> functions to access variables
of type <code>T.t</code>. Call it like<newline/><precode>         module Foo_var = 
           Make_var_type(struct type t = foo end)</precode><newline/>and use <code>Foo_var.get</code> and <code>Foo_var.set</code> to access the shared
variables of type <code>foo</code>. These functions can also raise the exception
<code>Sharedvar_not_found</code> (unlike the primitive accessors above).<newline/>The variable must have been created with <code>enc:true</code>, e.g.<newline/><precode>          let ok = create_var ~enc:true &quot;name&quot;</precode></doc><type><functor><argument><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>Make_var_type</module>T</argument><resolved><module_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netplex/netplex_cenv/index.xml"><cmti name="Netplex_cenv" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_cenv.cmti" digest="43133314057c968b273798ffd6e47f8f"/></xml></base>Netplex_cenv</root></identifier>TYPE</module_type></resolved></argument><with><resolved><module_type><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netplex/netplex_cenv/index.xml"><cmti name="Netplex_cenv" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_cenv.cmti" digest="43133314057c968b273798ffd6e47f8f"/></xml></base>Netplex_cenv</root></identifier>VAR_TYPE</module_type></resolved><type><resolved><type><root/>t</type></resolved><path><resolved><type><identifier><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Netplex_sharedvar" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_sharedvar.cmti" digest="f19e9e5af87fa260c338ddf9f3a9a1e7"/></xml></base>Netplex_sharedvar</root>Make_var_type</module>T</argument></identifier>t</type></resolved></path></type></with></functor></type></module><comment>Example code:<newline/>Here, one randomly chosen container computes <code>precious_value</code>, and
makes it available to all others, so the other container can simply
grab the value. This is similar to what <code>get_lazily</code> does internally:<newline/><precode>      let get_precious_value() =
        let container = Netplex_cenv.self_cont() in
        let var_name = &quot;my_service.precious&quot; in
        if Netplex_sharedvar.create_var var_name then (
          let precious_value = 
            try ...    (* some costly computation *)
            with exn -&gt;
              ignore(Netplex_sharedvar.delete_var var_name);
              raise exn in
          let b = Netplex_sharedvar.set_value var_name precious_value in
          assert b;
          precious_value
        )
        else (
          match Netplex_sharedvar.wait_for_value var_name with
           | Some v -&gt; v
           | None -&gt; failwith &quot;get_precious_value&quot;
                       (* or do plan B, e.g. compute the value *)
        )</precode><newline/>We don't do anything here for deleting the value when it is no longer
needed. Finding a criterion for that is very application-specific.
If the variable can be thought as being another service endpoint
of a socket service, it is a good idea to acquire the ownership
(by passing <code>~own:true</code> to <code>create_var</code>), so the variable is automatically
deleted when the socket service stops.<newline/>Of course, the plugin must be enabled, e.g. by overriding the
<code>post_add_hook</code> processor hook:<newline/><precode>    method post_add_hook sockserv ctrl =
      ctrl # add_plugin Netplex_sharedvar.plugin</precode></comment></unit>