<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></html></base>Netplex_encap</root><digest>6dd5527c9f4aa5fa370a0b8cfe94711b</digest><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><source><file>netplex_encap.mli</file><dir>/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex</dir><digest>9ceb1dd30d3b6fb7744f33bd388f2d08</digest></source><doc>Type-safe marshalling between processes of the same executable</doc><comment>This is a pragmatic approach to type-safe marshalling. We define
<code>type encap</code> as an arbitrary value that carries a type identifier with it.
The type identifier is generated when the functor
<reference><element><resolved><module><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netplex/netplex_encap/index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root></identifier>Make_encap</module></resolved></element></reference> is applied. Every instantiation of this
functor generates a new type identifier.<newline/>The idea is then that an <code>encap</code> value can be marshalled to another
process using <code>Marshal</code>, and when it is unwrapped the type identifier
is checked. Unwrapping is only successful when the <code>unwrap</code> function
from the same functor instantiation is used as the <code>wrap</code>
function.<newline/>This module is incompatible with:<list><item>Marshalling to processes running a different executable</item><item>Marshalling to processes that are dynamically loading
modules</item><item>The functor must be instantiated at program initialization time.
Especially this must not happen in <code>let module</code> expressions.</item></list>Only some of these assumptions can be checked at runtime by this
implementation.</comment><exception><exception><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>Type_mismatch</exception><doc>Raised when an encapulated type is tried to be unwrapped by the
wrong encapsulation module</doc></exception><type><type><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>encap</type><doc>An encapsulated value with a type identifier</doc></type><module_type><module_type><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>TYPE</module_type><doc>Just a (monomorphic) type <code>t</code></doc><signature><type><type><module_type><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>TYPE</module_type>t</type></type></signature></module_type><module_type><module_type><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>ENCAP</module_type><signature><type><type><module_type><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>ENCAP</module_type>t</type></type><value><value><module_type><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>ENCAP</module_type>wrap</value><arrow><path><resolved><identifier><type><module_type><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>ENCAP</module_type>t</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>encap</type></identifier></resolved></path></arrow></value><value><value><module_type><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>ENCAP</module_type>unwrap</value><doc>Raises <reference><element><resolved><exception><identifier><root><base><xml src="../../../../ocamlnet.3.7.7/src/netplex/netplex_encap/index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root></identifier>Type_mismatch</exception></resolved></element></reference> if the value does not fit</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>encap</type></identifier></resolved></path><path><resolved><identifier><type><module_type><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>ENCAP</module_type>t</type></identifier></resolved></path></arrow></value></signature></module_type><module><module><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>Make_encap</module><doc>Create an encapsulation module</doc><type><functor><argument><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>Make_encap</module>T</argument><resolved><identifier><module_type><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>TYPE</module_type></identifier></resolved></argument><with><resolved><identifier><module_type><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>ENCAP</module_type></identifier></resolved><type><resolved><type><root/>t</type></resolved><path><resolved><type><identifier><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Netplex_encap" src="/home/dsheets/.opam/doc/build/ocamlnet.3.7.7/src/netplex/netplex_encap.cmti" digest="6dd5527c9f4aa5fa370a0b8cfe94711b"/></xml></base>Netplex_encap</root>Make_encap</module>T</argument></identifier>t</type></resolved></path></type></with></functor></type></module></unit>