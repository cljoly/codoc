<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></html></base>Type_equal</root><digest>ac672656b4e5212cce36104ce2047fb6</digest><import>Arg<digest>1a93c52516966fe6a58564a4c4d9e4fa</digest></import><import>Array<digest>ae800d8cf9903f1d36856950940430e6</digest></import><import>ArrayLabels<digest>58a6628d1722d835ca71a7e76108549e</digest></import><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Bin_prot<digest>1eba8a056671767c0ff0de95b9d79cf0</digest></import><import>Binable0<digest>0fe6364c01bd9377b6baf595be287f14</digest></import><import>Binary_searchable<digest>e7ae29784851b589b3c9a1e0f4eaab52</digest></import><import>Binary_searchable_intf<digest>883bca9fb2518f81cf82908ff8175f78</digest></import><import>Blit<digest>38cca5bb1ea14104396fcd0df027b225</digest></import><import>Blit_intf<digest>f48a85659cd6e269c3929d7515f39640</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>BytesLabels<digest>f6f25f5328b09c590f56c7e37005c501</digest></import><import>Callback<digest>deb9226b3de6bdba985bad268a5b7c51</digest></import><import>Caml<digest>01b089cee287c41f97b78e3ddf6bc738</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>CamlinternalOO<digest>3d0b4eb4525ba4274c8885d7124f7bbc</digest></import><import>Char<digest>60fd98ba6ff303baf9287e7bfb886f12</digest></import><import>Commutative_group<digest>aa4494605afd29137f2593bdd461c267</digest></import><import>Comparable<digest>55231eb12c9894aac160d63db882c02b</digest></import><import>Comparable_intf<digest>878adaae9ba1d102814a3634b619ba2e</digest></import><import>Comparator<digest>ca98a1a2139034b6b365d48fefb3def4</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Container<digest>9063e144211a8276060de10d3e58e514</digest></import><import>Core_array<digest>2e519631f41e4445860667dc8eb92775</digest></import><import>Core_hashtbl<digest>2e3fb9f8848e52fdc2f18b9aa7da2b28</digest></import><import>Core_hashtbl_intf<digest>fe8a4de4a5df8e661b70bca95b622cea</digest></import><import>Core_list<digest>d9b325cab29fcb632954c72b9d266843</digest></import><import>Core_map<digest>62d019f2f220f288dd8294f2eb1b9e27</digest></import><import>Core_map_intf<digest>c58c46b48540ea9e80f28b0d26897ca6</digest></import><import>Core_random<digest>bbd98deba04115392c499062c07bd2aa</digest></import><import>Core_set<digest>6f21088f6d061770860f5c96d5092b0f</digest></import><import>Core_set_intf<digest>f3107b698c0fb7b072c0a37401330275</digest></import><import>Digest<digest>eab54f58b34b8a6fdc763db6966614a1</digest></import><import>Doubly_linked<digest>ef6a3fcfa42efe6befd4aeb5f233f341</digest></import><import>Error<digest>02d0f933be0201d30aabef7a0eeb9065</digest></import><import>Exn<digest>52afb5810422a283909bd0dc734eb6df</digest></import><import>Fieldslib<digest>d78f9550b468f1166a617738859cc53d</digest></import><import>Filename<digest>3817bec1dad20c6f594d3a85b13020b8</digest></import><import>Format<digest>61d4350242b30078d3ad96c904c9f7a1</digest></import><import>Gc<digest>b6fd17066fdc1a10189b41093e32d95d</digest></import><import>Genlex<digest>b273667d018eaee28be8ef8663aada02</digest></import><import>Hash_queue<digest>96cccf043a8a7295f7d68af1a2d9c6cb</digest></import><import>Hash_set<digest>254c900867a3fece1fe05f4efc77b962</digest></import><import>Hash_set_intf<digest>a1c33ee2656433853f1b0e4360cd162e</digest></import><import>Hashable<digest>27c85ba73bc3d6030f426ee992e59382</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Info<digest>da2e4e00893d36ca6c5b545c5bcfeffa</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Invariant<digest>9d71ef007e46a29fad7976fa3c64c4de</digest></import><import>Invariant_intf<digest>01f78fe3f5ea1f3a94d0ba72cb7f8ebe</digest></import><import>Lazy<digest>7dba0bf02f60e5ff44e9e4057263f28d</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>List<digest>8988208489274193e4e3f69dc6ec2f75</digest></import><import>ListLabels<digest>f9c893b10648fae8e31ad7bfcd64248f</digest></import><import>Map<digest>770e6123e5460eeb42d3050f13c5ad53</digest></import><import>Marshal<digest>6a7be818a4d43f06397faef2c6f9d35b</digest></import><import>Monad<digest>c2faab2fa073d3588ae0da2799fe693c</digest></import><import>MoreLabels<digest>de38ed0a31c05b2d5f114679e33d4cad</digest></import><import>Nativeint<digest>d9e04753374f7110b66feda40414e5e3</digest></import><import>Never_returns<digest>4823561ceb8b8adb6baeae90909724ab</digest></import><import>Nothing0<digest>92a3ca72a247f89f8da41a42050c5925</digest></import><import>OUnit<digest>061c2b7c3576f155359af098da2b6cc4</digest></import><import>OUnit2<digest>c63c5d4e5d21b5a6e1c006ea3f6a9f40</digest></import><import>OUnitConf<digest>e9d7ac436b7c92024bd75e3ee9f66c27</digest></import><import>OUnitLogger<digest>2829f5e4133023ee1e1988da414aca56</digest></import><import>OUnitPropList<digest>00368900f7cfb75540524d6799d0501a</digest></import><import>OUnitShared<digest>272141ba126236b9846a49bb85586d03</digest></import><import>OUnitTest<digest>b2691574cfa63f167bc6f6ecaaf4805b</digest></import><import>OUnitUtils<digest>5471ffa587444f794375a4caab4e85fd</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Oo<digest>0977563fa9c23f2df2952b302bdba835</digest></import><import>Option<digest>6f50cf6a1a79827c990e1396bf3e2eca</digest></import><import>Or_error<digest>9501535b87ba0d5e423e14a726335381</digest></import><import>Pa_bench_lib<digest>49e35efd8e698dfeaeed8204f5445f77</digest></import><import>Pa_ounit_lib<digest>c6212c5c68dc085c7c3df6d5dbfc4532</digest></import><import>Pa_test_lib<digest>9869606bf4a7705fc5a9fcc2bb324335</digest></import><import>Parsing<digest>4f8cd2d8537563c7ea7ee2e5dc94e427</digest></import><import>Perms<digest>da958215a5464ccca32d356260c501ba</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Polymorphic_compare_intf<digest>e13c3fbc889c7d614a9863831952c326</digest></import><import>Pooled_hashtbl<digest>5cbd70801e69c83d5f7b5f80008c04a4</digest></import><import>Pretty_printer<digest>e27f937dbaf980055e07b66bfe64fdf8</digest></import><import>Printexc<digest>fb616c60404add6295347001c01bfcaa</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Queue<digest>06a89c77a23c672d34cb97e6dfc5f30d</digest></import><import>Random<digest>6d410ecc00aac669668fa399dbd6fca2</digest></import><import>Result<digest>0916716eeafc152ab7d597a6b225102d</digest></import><import>Scanf<digest>31f1631ff7e3da78eabf4b08e91d2861</digest></import><import>Sequence<digest>d8431c681e7fc33d0019f6575d1e7a4c</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>Sexplib<digest>edfea10cfcfd644a920e72e67cb0bbdd</digest></import><import>Sort<digest>7f209dd54826e792b36c64d0a799f76b</digest></import><import>Source_code_position0<digest>dd1b468910e23123a1f7fcd84a7daff2</digest></import><import>Stable_unit_test_intf<digest>ebd37bc4989a2cc2b955ae68802706b6</digest></import><import>Stack<digest>3397768ddbaaa5d9fe72a4c82cdc6eb9</digest></import><import>StdLabels<digest>bde0996731d345de202224fb701f3910</digest></import><import>Stream<digest>55948988e71c3ee1749feb21ccec9fc9</digest></import><import>String<digest>9cb286f2c4569fd32c379b1a05c7b590</digest></import><import>StringLabels<digest>d53c23a5c85990103dbeef11dd5cf4f1</digest></import><import>Stringable<digest>b4f4de79e1a2570f977d5a0a05b2a4dc</digest></import><import>Sys<digest>0ce699458ce4430954d7e6a78874647c</digest></import><import>T<digest>cf35d97f682e76692d648dbe4fd968d0</digest></import><import>Typerep_lib<digest>e6a610cd9119c4b89b2ecff18190c6e7</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><import>Validate<digest>13c95b83dccb7fdbd3d69bac4dd261f8</digest></import><import>Weak<digest>441c40816fe88175926465199a665458</digest></import><import>With_return<digest>97602245d75939eef6a80591b5372f93</digest></import><source><file>lib/type_equal.mli</file><dir>/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build</dir><digest>9bf4be589b74c4df0ce821ce76bdbd57</digest></source><doc>For representing type equalities otherwise not known by the type-checker.<newline/>The purpose of <code>Type_equal</code> is to represent type equalities that the type checker
otherwise would not know, perhaps because the type equality depends on dynamic data,
or perhaps because the type system isn't powerful enough.<newline/>A value of type <code>(a, b) Type_equal.t</code> represents that types <code>a</code> and <code>b</code> are equal.
One can think of such a value as a proof of type equality. The <code>Type_equal</code> module
has operations for constructing and manipulating such proofs. For example, the
functions <code>refl</code>, <code>sym</code>, and <code>trans</code> express the usual properties of reflexivity,
symmetry, and transitivity of equality.<newline/>If one has a value <code>t : (a, b) Type_equal.t</code> that proves types <code>a</code> and <code>b</code> are equal,
there are two ways to use <code>t</code> to safely convert a value of type <code>a</code> to a value of type
<code>b</code>: <code>Type_equal.conv</code> or pattern matching on <code>Type_equal.T</code>:<newline/><precode>      let f (type a) (type b) (t : (a, b) Type_equal.t) (a : a) : b =
        Type_equal.conv t a

      let f (type a) (type b) (t : (a, b) Type_equal.t) (a : a) : b =
        let Type_equal.T = t in a</precode><newline/>At runtime, conversion by either means is just the identity -- nothing is changing
about the value. Consistent with this, a value of type <code>Type_equal.t</code> is always just
a constructor <code>Type_equal.T</code>; the value has no interesting semantic content.
<code>Type_equal</code> gets its power from the ability to, in a type-safe way, prove to the type
checker that two types are equal. The <code>Type_equal.t</code> value that is passed is
necessary for the type-checker's rules to be correct, but the compiler, could, in
principle, not pass around values of type <code>Type_equal.t</code> at run time.</doc><type><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type><param>a</param><param>b</param><path><dot><dot><dot><root>Typerep_lib</root>Std</dot>Type_equal</dot>t</dot><var>a</var><var>b</var></path><variant><constructor><constructor><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type>T</constructor><result><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a</var><var>a</var></path></result></constructor></variant></type><type><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>equal</type><doc>just an alias, needed when <code>t</code> gets shadowed below</doc><param>a</param><param>b</param><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a</var><var>b</var></path></type><value><value><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>refl</value><doc><code>refl</code>, <code>sym</code>, and <code>trans</code> construct proofs that type equality is reflexive,
symmetric, and transitive.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a</var><var>a</var></path></value><value><value><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>sym</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a</var><var>b</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>b</var><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>trans</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a</var><var>b</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>b</var><var>c</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a</var><var>c</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>conv</value><doc><code>conv t x</code> uses the type equality <code>t : (a, b) t</code> as evidence to safely cast <code>x</code>
from type <code>a</code> to type <code>b</code>. <code>conv</code> is semantically just the identity function.<newline/>In a program that has <code>t : (a, b) t</code> where one has a value of type <code>a</code> that one wants
to treat as a value of type <code>b</code>, it is often sufficient to pattern match on
<code>Type_equal.T</code> rather than use <code>conv</code>. However, there are situations where OCaml's
type checker will not use the type equality <code>a = b</code>, and one must use <code>conv</code>. For
example:<newline/><precode>      module F (M1 : sig type t end) (M2 : sig type t end) : sig
        val f : (M1.t, M2.t) equal -&gt; M1.t -&gt; M2.t
      end = struct
        let f equal (m1 : M1.t) = conv equal m1
      end</precode><newline/>If one wrote the body of <code>F</code> using pattern matching on <code>T</code>:<newline/><precode>      let f (T : (M1.t, M2.t) equal) (m1 : M1.t) = (m1 : M2.t)</precode><newline/>this would give a type error.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a</var><var>b</var></path><arrow><var>a</var><var>b</var></arrow></arrow></value><comment>It is always safe to conclude that if type <code>a</code> equals <code>b</code>, then for any type <code>'a t</code>,
type <code>a t</code> equals <code>b t</code>. The OCaml type checker uses this fact when it can. However,
sometimes, e.g. when using <code>conv</code>, one needs to explicitly use this fact to construct
an appropriate <code>Type_equal.t</code>. The <code>Lift*</code> functors do this.</comment><module><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Lift</module><type><functor><argument><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Lift</module>X</argument><dot><root>T</root>T1</dot></argument><signature><value><value><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Lift</module>lift</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a</var><var>b</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><path><dot><resolved><identifier><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Lift</module>X</argument></identifier></resolved>t</dot><var>a</var></path><path><dot><resolved><identifier><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Lift</module>X</argument></identifier></resolved>t</dot><var>b</var></path></path></arrow></value></signature></functor></type></module><module><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Lift2</module><type><functor><argument><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Lift2</module>X</argument><dot><root>T</root>T2</dot></argument><signature><value><value><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Lift2</module>lift</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a1</var><var>b1</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a2</var><var>b2</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><path><dot><resolved><identifier><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Lift2</module>X</argument></identifier></resolved>t</dot><var>a1</var><var>a2</var></path><path><dot><resolved><identifier><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Lift2</module>X</argument></identifier></resolved>t</dot><var>b1</var><var>b2</var></path></path></arrow></arrow></value></signature></functor></type></module><module><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Lift3</module><type><functor><argument><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Lift3</module>X</argument><dot><root>T</root>T3</dot></argument><signature><value><value><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Lift3</module>lift</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a1</var><var>b1</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a2</var><var>b2</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a3</var><var>b3</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><path><dot><resolved><identifier><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Lift3</module>X</argument></identifier></resolved>t</dot><var>a1</var><var>a2</var><var>a3</var></path><path><dot><resolved><identifier><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Lift3</module>X</argument></identifier></resolved>t</dot><var>b1</var><var>b2</var><var>b3</var></path></path></arrow></arrow></arrow></value></signature></functor></type></module><value><value><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>detuple2</value><doc><code>tuple2</code> and <code>detuple2</code> convert between equality on a 2-tuple and its components.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><tuple><var>a1</var><var>a2</var></tuple><tuple><var>b1</var><var>b2</var></tuple></path><tuple><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a1</var><var>b1</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a2</var><var>b2</var></path></tuple></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>tuple2</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a1</var><var>b1</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><var>a2</var><var>b2</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>t</type></identifier></resolved><tuple><var>a1</var><var>a2</var></tuple><tuple><var>b1</var><var>b2</var></tuple></path></arrow></arrow></value><module_type><module_type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Injective</module_type><doc><code>Injective</code> is an interface that states that a type is injective, where the type is
viewed as a function from types to other types. The typical usage is:<newline/><precode>      type 'a t
      include Injective with type 'a t := 'a t</precode><newline/>For example, <code>'a list</code> is an injective type, because whenever <code>'a list = 'b list</code>, we
know that <code>'a</code> = <code>'b</code>. On the other hand, if we define:<newline/><precode>      type 'a t = unit</precode><newline/>then clearly <code>t</code> isn't injective, because, e.g. <code>int t = bool t</code>, but <code>int &lt;&gt; bool</code>.<newline/>If <code>module M : Injective</code>, then <code>M.strip</code> provides a way to get a proof that two types
are equal from a proof that both types transformed by <code>M.t</code> are equal.<newline/>OCaml has no built-in language feature to state that a type is injective, which is why
we have <code>module type Injective</code>. However, OCaml can infer that a type is injective,
and we can use this to match <code>Injective</code>. A typical implementation will look like
this:<newline/><precode>      let strip (type a) (type b)
          (Type_equal.T : (a t, b t) Type_equal.t) : (a, b) Type_equal.t =
        Type_equal.T</precode><newline/>This will not type check for all type constructors (certainly not for non-injective
ones!), but it's always safe to try the above implementation if you are unsure. If
OCaml accepts this definition, then the type is injective. On the other hand, if
OCaml doesn't, then type type may or may not be injective. For example, if the
definition of the type depends on abstract types that match <code>Injective</code>, OCaml will
not automatically use their injectivity, and one will have to write a more complicated
definition of <code>strip</code> that causes OCaml to use that fact. For example:<newline/><precode>      module F (M : Type_equal.Injective) : Type_equal.Injective = struct
        type 'a t = 'a M.t * int

        let strip (type a) (type b)
            (e : (a t, b t) Type_equal.t) : (a, b) Type_equal.t =
          let e1, _ = Type_equal.detuple2 e in
          M.strip e1
        ;;
      end</precode><newline/>If in the definition of <code>F</code> we had written the simpler implementation of <code>strip</code> that
didn't use <code>M.strip</code>, then OCaml would have reported a type error.</doc><signature><type><type><module_type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Injective</module_type>t</type><param>a</param></type><value><value><module_type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Injective</module_type>strip</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>equal</type></identifier></resolved><path><resolved><identifier><type><module_type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Injective</module_type>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module_type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Injective</module_type>t</type></identifier></resolved><var>b</var></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>equal</type></identifier></resolved><var>a</var><var>b</var></path></arrow></value></signature></module_type><module_type><module_type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Injective2</module_type><doc><code>Injective2</code> is for a binary type that is injective in both type arguments.</doc><signature><type><type><module_type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Injective2</module_type>t</type><param>a1</param><param>a2</param></type><value><value><module_type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Injective2</module_type>strip</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>equal</type></identifier></resolved><path><resolved><identifier><type><module_type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Injective2</module_type>t</type></identifier></resolved><var>a1</var><var>a2</var></path><path><resolved><identifier><type><module_type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Injective2</module_type>t</type></identifier></resolved><var>b1</var><var>b2</var></path></path><tuple><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>equal</type></identifier></resolved><var>a1</var><var>b1</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>equal</type></identifier></resolved><var>a2</var><var>b2</var></path></tuple></arrow></value></signature></module_type><module><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Composition_preserves_injectivity</module><doc><code>Composition_preserves_injectivity</code> is a functor that proves that composition of
injective types is injective.</doc><type><functor><argument><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Composition_preserves_injectivity</module>M1</argument><resolved><identifier><module_type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Injective</module_type></identifier></resolved></argument><argument><argument pos="2"><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Composition_preserves_injectivity</module>M2</argument><resolved><identifier><module_type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Injective</module_type></identifier></resolved></argument><with><resolved><identifier><module_type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Injective</module_type></identifier></resolved><type><resolved><type><root/>t</type></resolved><param>a</param><path><resolved><type><identifier><argument pos="2"><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Composition_preserves_injectivity</module>M2</argument></identifier>t</type></resolved><path><resolved><type><identifier><argument pos="1"><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Composition_preserves_injectivity</module>M1</argument></identifier>t</type></resolved><var>a</var></path></path></type></with></functor></type></module><module><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module><doc><code>Id</code> provides identifiers for types, and the ability to test (via <code>Id.same</code>) at
run-time if two identifiers are equal, and if so to get a proof of equality of their
types. Unlike values of type <code>Type_equal.t</code>, values of type <code>Id.t</code> do have semantic
content and must have a nontrivial runtime representation.</doc><type><signature><type><type><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>t</type><param>a</param></type><module><module><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>Uid</module><doc>Every <code>Id.t</code> contains a unique id that is distinct from the <code>Uid.t</code> in any other
<code>Id.t</code>.</doc><type><signature><type><type><module><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>Uid</module>t</type></type><include><with><resolved><module_type><identifier><root><base><xml src="../../../../core_kernel.112.06.02/_build/lib/comparable/index.xml"><cmti name="Comparable" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/comparable.cmti" digest="55231eb12c9894aac160d63db882c02b"/></xml></base>Comparable</root></identifier>S</module_type></resolved><type_subst><dot><resolved><root/></resolved>t</dot><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>Uid</module>t</type></identifier></resolved></type_subst></with></include><include><with><dot><root>Hashable</root>S</dot><type_subst><dot><resolved><root/></resolved>t</dot><resolved><identifier><type><module><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>Uid</module>t</type></identifier></resolved></type_subst></with></include></signature></type></module><value><value><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>uid</value><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>t</type></identifier></resolved><any/></path><path><resolved><type><identifier><module><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>Uid</module></identifier>t</type></resolved></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>create</value><doc><code>create ~name</code> defines a new type identity. Two calls to <code>create</code> will result in
two distinct identifiers, even for the same arguments with the same type. If the
type <code>'a</code> doesn't support sexp conversion, then a good practice is to have the
converter be <code>&lt;:sexp_of&lt; _ &gt;&gt;</code>, (or <code>sexp_of_opaque</code>, if not using pa_sexp).</doc><arrow><label>name</label><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><arrow><var>a</var><path><dot><dot><root>Sexplib</root>Sexp</dot>t</dot></path></arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>t</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>hash</value><doc>accessors</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>t</type></identifier></resolved><any/></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>name</value><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>t</type></identifier></resolved><any/></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>to_sexp</value><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>t</type></identifier></resolved><var>a</var></path><arrow><var>a</var><path><dot><dot><root>Sexplib</root>Sexp</dot>t</dot></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>same</value><doc><code>same_witness t1 t2</code> and <code>same_witness_exn t1 t2</code> return a type equality proof iff
the two identifiers are the same (i.e. physically equal, resulting from the same
call to <code>create</code>). This is a useful way to achieve a sort of dynamic typing.
<code>same_witness</code> does not allocate a <code>Some</code> every time it is called.<newline/><code>same t1 t2 = is_some (same_witness t1 t2)</code>.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>t</type></identifier></resolved><any/></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>t</type></identifier></resolved><any/></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>same_witness</value><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>t</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>t</type></identifier></resolved><var>b</var></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>equal</type></identifier></resolved><var>a</var><var>b</var></path></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>same_witness_exn</value><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>t</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>t</type></identifier></resolved><var>b</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>equal</type></identifier></resolved><var>a</var><var>b</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>sexp_of_t</value><arrow><arrow><var>a</var><path><dot><dot><root>Sexplib</root>Sexp</dot>t</dot></path></arrow><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Type_equal" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/type_equal.cmti" digest="ac672656b4e5212cce36104ce2047fb6"/></xml></base>Type_equal</root>Id</module>t</type></identifier></resolved><var>a</var></path><path><dot><dot><root>Sexplib</root>Sexp</dot>t</dot></path></arrow></arrow></value></signature></type></module></unit>