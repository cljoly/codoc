<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Staged" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/staged.cmti" digest="b9f50d484acb8f6bc46f61efdbfdf2a5"/></xml></html></base>Staged</root><digest>b9f50d484acb8f6bc46f61efdbfdf2a5</digest><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><source><file>lib/staged.mli</file><dir>/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build</dir><digest>3ffdc78c61f4aa7b5e8b17a04fbf1720</digest></source><doc>A type for making staging explicit in the type of a function. For example, you might
want to have a function that creates a function for allocating unique identifiers.
Rather than using the type:<newline/><precode>    val make_id_allocator : unit -&gt; unit -&gt; int</precode><newline/>you would have<newline/><precode>    val make_id_allocator : unit -&gt; (unit -&gt; int) Staged.t</precode><newline/>Such a function could be defined as follows:<newline/><precode>    let make_id_allocator () =
      let ctr = ref 0 in
      stage (fun () -&gt; incr ctr; !ctr)</precode><newline/>and could be invoked as follows:<newline/><precode>    let (id1,id2) =
      let alloc = unstage (make_id_allocator ()) in
      (alloc (), alloc ())</precode><newline/>both stage and unstage functions are available in Common.<newline/>(Note that in many cases, including perhaps the one above, it's preferable to create a
custom type rather than use Staged.)</doc><type><type><root><base><xml src="index.xml"><cmti name="Staged" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/staged.cmti" digest="b9f50d484acb8f6bc46f61efdbfdf2a5"/></xml></base>Staged</root>t</type><param>a<pos/></param></type><value><value><root><base><xml src="index.xml"><cmti name="Staged" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/staged.cmti" digest="b9f50d484acb8f6bc46f61efdbfdf2a5"/></xml></base>Staged</root>stage</value><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Staged" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/staged.cmti" digest="b9f50d484acb8f6bc46f61efdbfdf2a5"/></xml></base>Staged</root>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Staged" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/staged.cmti" digest="b9f50d484acb8f6bc46f61efdbfdf2a5"/></xml></base>Staged</root>unstage</value><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Staged" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/staged.cmti" digest="b9f50d484acb8f6bc46f61efdbfdf2a5"/></xml></base>Staged</root>t</type></identifier></resolved><var>a</var></path><var>a</var></arrow></value></unit>