<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Heap_block" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/heap_block.cmti" digest="111f5b24e8bbe3c4becdb3a8b5fa5eea"/></xml></html></base>Heap_block</root><digest>111f5b24e8bbe3c4becdb3a8b5fa5eea</digest><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Char<digest>60fd98ba6ff303baf9287e7bfb886f12</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Format<digest>61d4350242b30078d3ad96c904c9f7a1</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Lazy<digest>7dba0bf02f60e5ff44e9e4057263f28d</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>List<digest>8988208489274193e4e3f69dc6ec2f75</digest></import><import>Nativeint<digest>d9e04753374f7110b66feda40414e5e3</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Random<digest>6d410ecc00aac669668fa399dbd6fca2</digest></import><import>Sexplib<digest>edfea10cfcfd644a920e72e67cb0bbdd</digest></import><import>String<digest>9cb286f2c4569fd32c379b1a05c7b590</digest></import><import>Sys<digest>0ce699458ce4430954d7e6a78874647c</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><source><file>lib/heap_block.mli</file><dir>/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build</dir><digest>005f7f2e1ea57f1ebf75d517755d1336</digest></source><doc>A heap block is a value that is guaranteed to live on the OCaml heap, and is hence
guaranteed to be usable with finalization or in a weak pointer. It is an abstract
type so we can use the type system to guarantee that the values we put in weak
pointers and use with finalizers are heap blocks.<newline/>Some examples of values that are not heap-allocated are integers, constant
constructors, booleans, the empty array, the empty list, the unit value. The exact
list of what is heap-allocated or not is implementation-dependent. Some constant
values can be heap-allocated but never deallocated during the lifetime of the program,
for example a list of integer constants; this is also implementation-dependent. You
should also be aware that compiler optimizations may duplicate some immutable values,
for example floating-point numbers when stored into arrays; thus they can be finalized
and collected while another copy is still in use by the program.<newline/>The results of calling <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/string/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/string/index.xml"><cmti name="String" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/string.cmti" digest="9cb286f2c4569fd32c379b1a05c7b590"/></xml></html></base>String</root></identifier>make</value></resolved></element></reference>, <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/string/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/string/index.xml"><cmti name="String" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/string.cmti" digest="9cb286f2c4569fd32c379b1a05c7b590"/></xml></html></base>String</root></identifier>create</value></resolved></element></reference>, <reference><element><resolved><value><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/array/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/array/index.xml"><cmti name="Array" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/array.cmti" digest="ae800d8cf9903f1d36856950940430e6"/></xml></html></base>Array</root></identifier>make</value></resolved></element></reference>, and
<reference><element><resolved><type><identifier><root><base><html src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html"><xml src="../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.xml"><cmti name="Pervasives" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/pervasives.cmti" digest="0d015a5a2136659b0de431be7f1545be"/></xml></html></base>Pervasives</root></identifier>ref</type></resolved></element></reference> are guaranteed to be heap-allocated and non-constant except when the
length argument is <code>0</code>.</doc><type><type><root><base><xml src="index.xml"><cmti name="Heap_block" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/heap_block.cmti" digest="111f5b24e8bbe3c4becdb3a8b5fa5eea"/></xml></base>Heap_block</root>t</type><param>a<pos/></param><private/><var>a</var></type><value><value><root><base><xml src="index.xml"><cmti name="Heap_block" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/heap_block.cmti" digest="111f5b24e8bbe3c4becdb3a8b5fa5eea"/></xml></base>Heap_block</root>create</value><doc><code>create v</code> returns <code>Some t</code> if <code>v</code> is a heap block, where <code>t</code> is physically equal
to <code>v</code></doc><arrow><var>a</var><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Heap_block" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/heap_block.cmti" digest="111f5b24e8bbe3c4becdb3a8b5fa5eea"/></xml></base>Heap_block</root>t</type></identifier></resolved><var>a</var></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Heap_block" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/heap_block.cmti" digest="111f5b24e8bbe3c4becdb3a8b5fa5eea"/></xml></base>Heap_block</root>create_exn</value><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Heap_block" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/heap_block.cmti" digest="111f5b24e8bbe3c4becdb3a8b5fa5eea"/></xml></base>Heap_block</root>t</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Heap_block" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/heap_block.cmti" digest="111f5b24e8bbe3c4becdb3a8b5fa5eea"/></xml></base>Heap_block</root>value</value><doc><code>value t</code> returns the value that is physically equal to <code>t</code></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Heap_block" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/heap_block.cmti" digest="111f5b24e8bbe3c4becdb3a8b5fa5eea"/></xml></base>Heap_block</root>t</type></identifier></resolved><var>a</var></path><var>a</var></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Heap_block" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/heap_block.cmti" digest="111f5b24e8bbe3c4becdb3a8b5fa5eea"/></xml></base>Heap_block</root>bytes</value><doc><code>bytes t</code> returns the number of bytes on the heap taken by heap block <code>t</code>, including
the header. This is just the space for the single block, not anything it points
to.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Heap_block" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/heap_block.cmti" digest="111f5b24e8bbe3c4becdb3a8b5fa5eea"/></xml></base>Heap_block</root>t</type></identifier></resolved><any/></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Heap_block" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/heap_block.cmti" digest="111f5b24e8bbe3c4becdb3a8b5fa5eea"/></xml></base>Heap_block</root>sexp_of_t</value><arrow><arrow><var>a</var><path><dot><dot><root>Sexplib</root>Sexp</dot>t</dot></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Heap_block" src="/home/dsheets/.opam/doc/build/core_kernel.112.06.02/_build/lib/heap_block.cmti" digest="111f5b24e8bbe3c4becdb3a8b5fa5eea"/></xml></base>Heap_block</root>t</type></identifier></resolved><var>a</var></path><path><dot><dot><root>Sexplib</root>Sexp</dot>t</dot></path></arrow></arrow></value></unit>