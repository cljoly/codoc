<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></html></base>Ctypes</root><digest>a209b3c3904d897aa99ee3acbc9ab4dc</digest><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>Bytes<digest>4c433013a088edac8556bb94512e4988</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Ctypes_bigarray<digest>8ba498be454ef6d169c217dfc7a6ac05</digest></import><import>Ctypes_path<digest>97a0835e9989462986c86762d17d953a</digest></import><import>Ctypes_primitives<digest>b9a4fb7c7287c4c63edd1821a614b454</digest></import><import>Ctypes_raw<digest>7b877d018c7e4f35afc6b81c67b29b3f</digest></import><import>Format<digest>61d4350242b30078d3ad96c904c9f7a1</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Primitives<digest>218641e645fb9701bc31592de778b3d0</digest></import><import>Signed<digest>1d45bfd71b293f949af17f0ea4c61089</digest></import><import>Static<digest>6bbc665275eef458e20f0f4e5df43966</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><import>Unsigned<digest>501e55aed1d2848c27903d1467c057dd</digest></import><source><file>src/ctypes/ctypes.mli</file><dir>/home/dsheets/.opam/doc/build/ctypes.0.3.4</dir><digest>c30e496501a1a07624c4f5a630422d0c</digest></source><doc>The core ctypes module.<newline/>The main points of interest are the set of functions for describing C
types (see <reference><element><resolved><identifier><label><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>types</label></identifier></resolved></element></reference>) and the set of functions for accessing C values (see
<reference><element><resolved><identifier><label><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>values</label></identifier></resolved></element></reference>). The <reference><element><resolved><value><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes-foreign-threaded/foreign/index.xml"><cmti name="Foreign" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes-foreign-threaded/foreign.cmti" digest="eee3456bdce4c538d4cd34980e4ac98e"/></xml></base>Foreign</root></identifier>foreign</value></resolved></element></reference> function uses C type descriptions
to bind external C values.</doc><comment><title level="2"><label><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>types</label>Values representing C types</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type><doc>The type of values representing C types. There are two types associated
with each <code>typ</code> value: the C type used to store and pass values, and the
corresponding OCaml type. The type parameter indicates the OCaml type, so a
value of type <code>t typ</code> is used to read and write OCaml values of type <code>t</code>.
There are various uses of <code>typ</code> values, including<newline/><list><item>constructing function types for binding native functions using
<reference><element><resolved><value><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes-foreign-threaded/foreign/index.xml"><cmti name="Foreign" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes-foreign-threaded/foreign.cmti" digest="eee3456bdce4c538d4cd34980e4ac98e"/></xml></base>Foreign</root></identifier>foreign</value></resolved></element></reference></item></list><list><item>constructing pointers for reading and writing locations in C-managed
storage using <reference><element><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved></element></reference></item></list><list><item>describing the fields of structured types built with <reference><element><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structure</type></identifier></resolved></element></reference> and
<reference><element><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>union</type></identifier></resolved></element></reference>.</item></list></doc><param>a</param><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/static/index.xml"><cmti name="Static" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/static.cmti" digest="6bbc665275eef458e20f0f4e5df43966"/></xml></base>Static</root></identifier>typ</type></resolved><var>a</var></path></type><comment><title level="3">The void type</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>void</value><doc>Value representing the C void type. Void values appear in OCaml as the
unit type, so using void in an argument or result type specification
produces a function which accepts or returns unit.<newline/>Dereferencing a pointer to void is an error, as in C, and will raise
<reference><element><resolved><identifier><exception><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>IncompleteType</exception></identifier></resolved></element></reference>.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></value><comment><title level="3">Scalar types</title><newline/>The scalar types consist of the <reference><element><resolved><identifier><label><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>arithmetic_types</label></identifier></resolved></element></reference> and the <reference><element><resolved><identifier><label><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>pointer_types</label></identifier></resolved></element></reference>.</comment><comment><title level="4"><label><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>arithmetic_types</label>Arithmetic types</title><newline/>The arithmetic types consist of the signed and unsigned integer types
(including character types) and the floating types. There are values
representing both exact-width integer types (of 8, 16, 32 and 64 bits) and
types whose size depend on the platform (signed and unsigned short, int, long,
long long).</comment><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>char</value><doc>Value representing the C type <code>char</code>.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type>char</type></identifier></resolved></path></path></value><comment><title level="5">Signed integer types</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>schar</value><doc>Value representing the C type <code>signed char</code>.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>short</value><doc>Value representing the C type (<code>signed</code>) <code>short</code>.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>int</value><doc>Value representing the C type (<code>signed</code>) <code>int</code>.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>long</value><doc>Value representing the C type (<code>signed</code>) <code>long</code>.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/signed/index.xml"><cmti name="Signed" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/signed.cmti" digest="1d45bfd71b293f949af17f0ea4c61089"/></xml></base>Signed</root></identifier>long</type></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>llong</value><doc>Value representing the C type (<code>signed</code>) <code>long long</code>.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/signed/index.xml"><cmti name="Signed" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/signed.cmti" digest="1d45bfd71b293f949af17f0ea4c61089"/></xml></base>Signed</root></identifier>llong</type></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>nativeint</value><doc>Value representing the C type (<code>signed</code>) <code>int</code>.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type>nativeint</type></identifier></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>int8_t</value><doc>Value representing an 8-bit signed integer C type.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>int16_t</value><doc>Value representing a 16-bit signed integer C type.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>int32_t</value><doc>Value representing a 32-bit signed integer C type.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type>int32</type></identifier></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>int64_t</value><doc>Value representing a 64-bit signed integer C type.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type>int64</type></identifier></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>camlint</value><doc>Value representing an integer type with the same storage requirements as
an OCaml <code>int</code>.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></value><comment><title level="5">Unsigned integer types</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>uchar</value><doc>Value representing the C type <code>unsigned char</code>.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/unsigned/index.xml"><cmti name="Unsigned" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/unsigned.cmti" digest="501e55aed1d2848c27903d1467c057dd"/></xml></base>Unsigned</root></identifier>uchar</type></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>uint8_t</value><doc>Value representing an 8-bit unsigned integer C type.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/unsigned/index.xml"><cmti name="Unsigned" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/unsigned.cmti" digest="501e55aed1d2848c27903d1467c057dd"/></xml></base>Unsigned</root></identifier>uint8</type></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>uint16_t</value><doc>Value representing a 16-bit unsigned integer C type.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/unsigned/index.xml"><cmti name="Unsigned" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/unsigned.cmti" digest="501e55aed1d2848c27903d1467c057dd"/></xml></base>Unsigned</root></identifier>uint16</type></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>uint32_t</value><doc>Value representing a 32-bit unsigned integer C type.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/unsigned/index.xml"><cmti name="Unsigned" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/unsigned.cmti" digest="501e55aed1d2848c27903d1467c057dd"/></xml></base>Unsigned</root></identifier>uint32</type></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>uint64_t</value><doc>Value representing a 64-bit unsigned integer C type.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/unsigned/index.xml"><cmti name="Unsigned" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/unsigned.cmti" digest="501e55aed1d2848c27903d1467c057dd"/></xml></base>Unsigned</root></identifier>uint64</type></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>size_t</value><doc>Value representing the C type <code>size_t</code>, an alias for one of the unsigned
integer types. The actual size and alignment requirements for <code>size_t</code>
vary between platforms.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/unsigned/index.xml"><cmti name="Unsigned" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/unsigned.cmti" digest="501e55aed1d2848c27903d1467c057dd"/></xml></base>Unsigned</root></identifier>size_t</type></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ushort</value><doc>Value representing the C type <code>unsigned short</code>.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/unsigned/index.xml"><cmti name="Unsigned" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/unsigned.cmti" digest="501e55aed1d2848c27903d1467c057dd"/></xml></base>Unsigned</root></identifier>ushort</type></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>uint</value><doc>Value representing the C type <code>unsigned int</code>.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/unsigned/index.xml"><cmti name="Unsigned" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/unsigned.cmti" digest="501e55aed1d2848c27903d1467c057dd"/></xml></base>Unsigned</root></identifier>uint</type></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ulong</value><doc>Value representing the C type <code>unsigned long</code>.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/unsigned/index.xml"><cmti name="Unsigned" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/unsigned.cmti" digest="501e55aed1d2848c27903d1467c057dd"/></xml></base>Unsigned</root></identifier>ulong</type></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ullong</value><doc>Value representing the C type <code>unsigned long long</code>.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/unsigned/index.xml"><cmti name="Unsigned" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/unsigned.cmti" digest="501e55aed1d2848c27903d1467c057dd"/></xml></base>Unsigned</root></identifier>ullong</type></resolved></path></path></value><comment><title level="5">Floating types</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>float</value><doc>Value representing the C single-precision <code>float</code> type.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type>float</type></identifier></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>double</value><doc>Value representing the C type <code>double</code>.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type>float</type></identifier></resolved></path></path></value><comment><title level="5">Complex types</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>complex32</value><doc>Value representing the C99 single-precision <code>float complex</code> type.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/stdlib/complex/index.html"><xml src="../../../../../ocaml.4.02.1+doc/stdlib/complex/index.xml"><cmti name="Complex" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/complex.cmti" digest="d0dcc1da3c694cf9a7e924c7832d1528"/></xml></html></base>Complex</root></identifier>t</type></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>complex64</value><doc>Value representing the C99 double-precision <code>double complex</code> type.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/stdlib/complex/index.html"><xml src="../../../../../ocaml.4.02.1+doc/stdlib/complex/index.xml"><cmti name="Complex" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/complex.cmti" digest="d0dcc1da3c694cf9a7e924c7832d1528"/></xml></html></base>Complex</root></identifier>t</type></resolved></path></path></value><comment><title level="4"><label><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>pointer_types</label>Pointer types</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>pointer</type><doc>The type of pointer values. A value of type <code>('a, [`C]) pointer</code> contains
a C-compatible pointer, and a value of type <code>('a, [`OCaml]) pointer</code>
contains a pointer to a value that can be moved by OCaml runtime.</doc><param>a</param><param>b</param><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/static/index.xml"><cmti name="Static" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/static.cmti" digest="6bbc665275eef458e20f0f4e5df43966"/></xml></base>Static</root></identifier>pointer</type></resolved><var>a</var><var>b</var></path></type><comment><title level="4">C-compatible pointers</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type><doc>The type of C-compatible pointer values. A value of type <code>t ptr</code> can be
used to read and write values of type <code>t</code> at particular addresses.</doc><param>a</param><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>pointer</type></identifier></resolved><var>a</var><poly_variant><fixed/><constructor>C<constant/></constructor></poly_variant></path></type><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</value><doc>Construct a pointer type from an existing type (called the <italic>reference
type</italic>).</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr_opt</value><doc>Construct a pointer type from an existing type (called the <italic>reference
type</italic>). This behaves like <reference><element><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved></element></reference>, except that null pointers appear in OCaml
as <code>None</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>string</value><doc>A high-level representation of the string type.<newline/>On the C side this behaves like <code>char *</code>; on the OCaml side values read
and written using <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>string</value></identifier></resolved></element></reference> are simply native OCaml strings.<newline/>To avoid problems with the garbage collector, values passed using
<reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>string</value></identifier></resolved></element></reference> are copied into immovable C-managed storage before being passed
to C.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>string_opt</value><doc>A high-level representation of the string type. This behaves like <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>string</value></identifier></resolved></element></reference>,
except that null pointers appear in OCaml as <code>None</code>.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></path></value><comment><title level="4">OCaml pointers</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ocaml</type><doc>The type of pointer values pointing directly into OCaml values.
<bold>Pointers of this type should never be captured by external code</bold>.
In particular, functions accepting <code>'a ocaml</code> pointers must not invoke
any OCaml code.</doc><param>a</param><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/static/index.xml"><cmti name="Static" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/static.cmti" digest="6bbc665275eef458e20f0f4e5df43966"/></xml></base>Static</root></identifier>ocaml</type></resolved><var>a</var></path></type><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ocaml_string</value><doc>Value representing the directly mapped storage of an OCaml string.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ocaml</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ocaml_bytes</value><doc>Value representing the directly mapped storage of an OCaml byte array.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ocaml</type></identifier></resolved><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/stdlib/bytes/index.html"><xml src="../../../../../ocaml.4.02.1+doc/stdlib/bytes/index.xml"><cmti name="Bytes" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/bytes.cmti" digest="4c433013a088edac8556bb94512e4988"/></xml></html></base>Bytes</root></identifier>t</type></resolved></path></path></path></value><comment><title level="3">Array types</title></comment><comment><title level="4">C array types</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>carray</type><doc>The type of C array values. A value of type <code>t carray</code> can be used to read
and write array objects in C-managed storage.</doc><param>a</param></type><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>array</value><doc>Construct a sized array type from a length and an existing type (called
the <italic>element type</italic>).</doc><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>carray</type></identifier></resolved><var>a</var></path></path></arrow></arrow></value><comment><title level="4">Bigarray types</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>bigarray_class</type><doc>The type of Bigarray classes. There are four instances, one for each of
the Bigarray submodules.</doc><param/></type><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>genarray</value><doc>The class of <reference><element><resolved><type><module><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>Genarray</module>t</type></resolved></element></reference> values</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>bigarray_class</type></identifier></resolved><object><name>element</name><var>a</var><name>ba_repr</name><var>b</var><name>bigarray</name><path><resolved><type><module><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>Genarray</module>t</type></resolved><var>a</var><var>b</var><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>c_layout</type></resolved></path></path><name>carray</name><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>carray</type></identifier></resolved><var>a</var></path><name>dims</name><path><resolved><identifier><type>array</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></object></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>array1</value><doc>The class of <reference><element><resolved><type><module><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>Array1</module>t</type></resolved></element></reference> values</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>bigarray_class</type></identifier></resolved><object><name>element</name><var>a</var><name>ba_repr</name><var>b</var><name>bigarray</name><path><resolved><type><module><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>Array1</module>t</type></resolved><var>a</var><var>b</var><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>c_layout</type></resolved></path></path><name>carray</name><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>carray</type></identifier></resolved><var>a</var></path><name>dims</name><path><resolved><identifier><type>int</type></identifier></resolved></path></object></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>array2</value><doc>The class of <reference><element><resolved><type><module><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>Array2</module>t</type></resolved></element></reference> values</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>bigarray_class</type></identifier></resolved><object><name>element</name><var>a</var><name>ba_repr</name><var>b</var><name>bigarray</name><path><resolved><type><module><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>Array2</module>t</type></resolved><var>a</var><var>b</var><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>c_layout</type></resolved></path></path><name>carray</name><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>carray</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>carray</type></identifier></resolved><var>a</var></path></path><name>dims</name><tuple><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></tuple></object></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>array3</value><doc>The class of <reference><element><resolved><type><module><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>Array3</module>t</type></resolved></element></reference> values</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>bigarray_class</type></identifier></resolved><object><name>element</name><var>a</var><name>ba_repr</name><var>b</var><name>bigarray</name><path><resolved><type><module><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>Array3</module>t</type></resolved><var>a</var><var>b</var><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>c_layout</type></resolved></path></path><name>carray</name><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>carray</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>carray</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>carray</type></identifier></resolved><var>a</var></path></path></path><name>dims</name><tuple><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></tuple></object></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>bigarray</value><doc>Construct a sized bigarray type representation from a bigarray class, the
dimensions, and the <reference><element><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>kind</type></resolved></element></reference>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>bigarray_class</type></identifier></resolved><object><name>element</name><var>a</var><name>ba_repr</name><var>b</var><name>dims</name><var>dims</var><name>bigarray</name><var>bigarray</var><name>carray</name><any/></object></path><arrow><var>dims</var><arrow><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>kind</type></resolved><var>a</var><var>b</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>bigarray</var></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ_of_bigarray_kind</value><doc><code>typ_of_bigarray_kind k</code> is the type corresponding to the Bigarray kind
<code>k</code>.</doc><arrow><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>kind</type></resolved><var>a</var><var>b</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path></arrow></value><comment><title level="3">Function types</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>fn</type><doc>The type of values representing C function types. A value of type <code>t fn</code>
can be used to bind to C functions and to describe type of OCaml functions
passed to C.</doc><param>a</param><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/static/index.xml"><cmti name="Static" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/static.cmti" digest="6bbc665275eef458e20f0f4e5df43966"/></xml></base>Static</root></identifier>fn</type></resolved><var>a</var></path></type><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>(@-&gt;)</value><doc>Construct a function type from a type and an existing function type. This
corresponds to prepending a parameter to a C function parameter list. For
example,<newline/><code>int @-&gt; ptr void @-&gt; returning float</code><newline/>describes a function type that accepts two arguments -- an integer and a
pointer to void -- and returns a float.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>fn</type></identifier></resolved><var>b</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>fn</type></identifier></resolved><arrow><var>a</var><var>b</var></arrow></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>returning</value><doc>Give the return type of a C function. Note that <code>returning</code> is intended
to be used together with <reference><element><root>(@-&gt;)</root></element></reference>; see the documentation for <reference><element><root>(@-&gt;)</root></element></reference> for an
example.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>fn</type></identifier></resolved><var>a</var></path></arrow></value><comment><title level="3">Struct and union types</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structured</type><doc>The base type of values representing C struct and union types. The
<code>'kind</code> parameter is a polymorphic variant type indicating whether the type
represents a struct (<code>`Struct</code>) or a union (<code>`Union</code>).</doc><param>a</param><param>kind</param><path><resolved><type><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/static/index.xml"><cmti name="Static" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/static.cmti" digest="6bbc665275eef458e20f0f4e5df43966"/></xml></base>Static</root></identifier>structured</type></resolved><var>a</var><var>kind</var></path></type><type><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structure</type><doc>The type of values representing C struct types.</doc><param>a</param><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structured</type></identifier></resolved><var>a</var><poly_variant><fixed/><constructor>Struct<constant/></constructor></poly_variant></path></type><type><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>union</type><doc>The type of values representing C union types.</doc><param>a</param><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structured</type></identifier></resolved><var>a</var><poly_variant><fixed/><constructor>Union<constant/></constructor></poly_variant></path></type><type><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>field</type><doc>The type of values representing C struct or union members (called &quot;fields&quot;
here). A value of type <code>(a, s) field</code> represents a field of type <code>a</code> in a
struct or union of type <code>s</code>.</doc><param>a</param><param>t</param></type><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structure</value><doc>Construct a new structure type. The type value returned is incomplete and
can be updated using <reference><element><root>(*:*)</root></element></reference> until it is passed to <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>seal</value></identifier></resolved></element></reference>, at which point
the set of fields is fixed.<newline/>The type (<code>'_s structure typ</code>) of the expression returned by the call
<code>structure tag</code> includes a weak type variable, which can be explicitly
instantiated to ensure that the OCaml values representing different C
structure types have incompatible types. Typical usage is as follows:<newline/><code>type tagname</code><newline/><code>let tagname : tagname structure typ = structure &quot;tagname&quot;</code></doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structure</type></identifier></resolved><var>s</var></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>union</value><doc>Construct a new union type. This behaves analogously to <reference><element><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structure</type></identifier></resolved></element></reference>;
fields are added with <reference><element><root>(+:+)</root></element></reference>.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>union</type></identifier></resolved><var>s</var></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>field</value><doc><code>field ty label ty'</code> adds a field of type <code>ty'</code> with label <code>label</code> to the
structure or union type <code>ty</code> and returns a field value that can be used to
read and write the field in structure or union instances (e.g. using
<reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>getf</value></identifier></resolved></element></reference> and <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>setf</value></identifier></resolved></element></reference>).<newline/>Attempting to add a field to a union type that has been sealed with <code>seal</code>
is an error, and will raise <reference><element><resolved><identifier><exception><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ModifyingSealedType</exception></identifier></resolved></element></reference>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>t</var></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>field</type></identifier></resolved><var>a</var><alias><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structured</type></identifier></resolved><var>s</var><poly_variant><closed/><constructor>Struct<constant/></constructor><constructor>Union<constant/></constructor></poly_variant></path>t</alias></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>(*:*)</value><doc><deprecated>Add an anonymous field to a structure. Use <reference><element><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>field</type></identifier></resolved></element></reference> instead.</deprecated></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>t</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>field</type></identifier></resolved><var>a</var><alias><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structured</type></identifier></resolved><var>s</var><poly_variant><fixed/><constructor>Struct<constant/></constructor></poly_variant></path>t</alias></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>(+:+)</value><doc><deprecated>Add an anonymous field to a union. Use <reference><element><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>field</type></identifier></resolved></element></reference> instead.</deprecated></doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>t</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>field</type></identifier></resolved><var>a</var><alias><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structured</type></identifier></resolved><var>s</var><poly_variant><fixed/><constructor>Union<constant/></constructor></poly_variant></path>t</alias></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>seal</value><doc><code>seal t</code> completes the struct or union type <code>t</code> so that no further fields
can be added. Struct and union types must be sealed before they can be used
in a way that involves their size or alignment; see the documentation for
<reference><element><resolved><identifier><exception><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>IncompleteType</exception></identifier></resolved></element></reference> for further details.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structured</type></identifier></resolved><any/><poly_variant><closed/><constructor>Struct<constant/></constructor><constructor>Union<constant/></constructor></poly_variant></path></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><comment><title level="3">View types</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>view</value><doc><code>view ~read:r ~write:w t</code> creates a C type representation <code>t'</code> which
behaves like <code>t</code> except that values read using <code>t'</code> are subsequently
transformed using the function <code>r</code> and values written using <code>t'</code> are first
transformed using the function <code>w</code>.<newline/>For example, given suitable definitions of <code>string_of_char_ptr</code> and
<code>char_ptr_of_string</code>, the type representation<newline/><code>view ~read:string_of_char_ptr ~write:char_ptr_of_string (ptr char)</code><newline/>can be used to pass OCaml strings directly to and from bound C functions,
or to read and write string members in structs and arrays. (In fact, the
<reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>string</value></identifier></resolved></element></reference> type representation is defined in exactly this way.)<newline/>The optional argument <code>format_typ</code> is used by the <reference><element><resolved><value><identifier><root><base><xml src="../../../../../ctypes.0.3.4/_build/src/ctypes/ctypes/index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root></identifier>format_typ</value></resolved></element></reference> and
<reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>string_of_typ</value></identifier></resolved></element></reference> functions to print the type at the top level and
elsewhere. If <code>format_typ</code> is not supplied the printer for <code>t</code> is used
instead.</doc><arrow><optional>format_typ</optional><arrow><arrow><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/stdlib/format/index.html"><xml src="../../../../../ocaml.4.02.1+doc/stdlib/format/index.xml"><cmti name="Format" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/format.cmti" digest="61d4350242b30078d3ad96c904c9f7a1"/></xml></html></base>Format</root></identifier>formatter</type></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/stdlib/format/index.html"><xml src="../../../../../ocaml.4.02.1+doc/stdlib/format/index.xml"><cmti name="Format" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/format.cmti" digest="61d4350242b30078d3ad96c904c9f7a1"/></xml></html></base>Format</root></identifier>formatter</type></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow><arrow><label>read</label><arrow><var>a</var><var>b</var></arrow><arrow><label>write</label><arrow><var>b</var><var>a</var></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>b</var></path></arrow></arrow></arrow></arrow></value><comment><title level="3">Abstract types</title></comment><type><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>abstract</type><doc>The type of abstract values. The purpose of the <code>abstract</code> type is to
represent values whose type varies from platform to platform.<newline/>For example, the type <code>pthread_t</code> is a pointer on some platforms, an
integer on other platforms, and a struct on a third set of platforms. One
way to deal with this kind of situation is to have
possibly-platform-specific code which interrogates the C type in some way
to help determine an appropriate representation. Another way is to use
<code>abstract</code>, leaving the representation opaque.<newline/>(Note, however, that although <code>pthread_t</code> is a convenient example, since
the type used to implement it varies significantly across platforms, it's
not actually a good match for <code>abstract</code>, since values of type <code>pthread_t</code>
are passed and returned by value.)</doc><param>a</param></type><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>abstract</value><doc>Create an abstract type specification from the size and alignment
requirements for the type.</doc><arrow><label>name</label><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><label>size</label><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><label>alignment</label><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>abstract</type></identifier></resolved><var>a</var></path></path></arrow></arrow></arrow></value><comment><title level="3">Operations on types</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>sizeof</value><doc><code>sizeof t</code> computes the size in bytes of the type <code>t</code>. The exception
<reference><element><resolved><identifier><exception><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>IncompleteType</exception></identifier></resolved></element></reference> is raised if <code>t</code> is incomplete.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>alignment</value><doc><code>alignment t</code> computes the alignment requirements of the type <code>t</code>. The
exception <reference><element><resolved><identifier><exception><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>IncompleteType</exception></identifier></resolved></element></reference> is raised if <code>t</code> is incomplete.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>format_typ</value><doc>Pretty-print a C representation of the type to the specified formatter.</doc><arrow><optional>name</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/stdlib/format/index.html"><xml src="../../../../../ocaml.4.02.1+doc/stdlib/format/index.xml"><cmti name="Format" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/format.cmti" digest="61d4350242b30078d3ad96c904c9f7a1"/></xml></html></base>Format</root></identifier>formatter</type></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>format_fn</value><doc>Pretty-print a C representation of the function type to the specified
formatter.</doc><arrow><optional>name</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/stdlib/format/index.html"><xml src="../../../../../ocaml.4.02.1+doc/stdlib/format/index.xml"><cmti name="Format" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/format.cmti" digest="61d4350242b30078d3ad96c904c9f7a1"/></xml></html></base>Format</root></identifier>formatter</type></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>fn</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>string_of_typ</value><doc>Return a C representation of the type.</doc><arrow><optional>name</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>string_of_fn</value><doc>Return a C representation of the function type.</doc><arrow><optional>name</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>fn</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></value><comment><title level="2"><label><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>values</label>Values representing C values</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>format</value><doc>Pretty-print a representation of the C value to the specified formatter.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/stdlib/format/index.html"><xml src="../../../../../ocaml.4.02.1+doc/stdlib/format/index.xml"><cmti name="Format" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/format.cmti" digest="61d4350242b30078d3ad96c904c9f7a1"/></xml></html></base>Format</root></identifier>formatter</type></resolved></path><arrow><var>a</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>string_of</value><doc>Return a string representation of the C value.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><arrow><var>a</var><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></value><comment><title level="3">Pointer values</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>null</value><doc>A null pointer.</doc><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>(!@)</value><doc><code>!@ p</code> dereferences the pointer <code>p</code>. If the reference type is a scalar
type then dereferencing constructs a new value. If the reference type is
an aggregate type then dereferencing returns a value that references the
memory pointed to by <code>p</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path><var>a</var></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>(&lt;-@)</value><doc><code>p &lt;-@ v</code> writes the value <code>v</code> to the address <code>p</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path><arrow><var>a</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>(+@)</value><doc>If <code>p</code> is a pointer to an array element then <code>p +@ n</code> computes the
address of the <code>n</code>th next element.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>pointer</type></identifier></resolved><var>a</var><var>b</var></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>pointer</type></identifier></resolved><var>a</var><var>b</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>(-@)</value><doc>If <code>p</code> is a pointer to an array element then <code>p -@ n</code> computes the address
of the nth previous element.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>pointer</type></identifier></resolved><var>a</var><var>b</var></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>pointer</type></identifier></resolved><var>a</var><var>b</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr_diff</value><doc><code>ptr_diff p q</code> computes <code>q - p</code>. As in C, both <code>p</code> and <code>q</code> must point
into the same array, and the result value is the difference of the
subscripts of the two array elements.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>pointer</type></identifier></resolved><var>a</var><var>b</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>pointer</type></identifier></resolved><var>a</var><var>b</var></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>from_voidp</value><doc>Conversion from <code>void *</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>to_voidp</value><doc>Conversion to <code>void *</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><any/></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>allocate</value><doc><code>allocate t v</code> allocates a fresh value of type <code>t</code>, initialises it with
<code>v</code> and returns its address. The argument <code>?finalise</code>, if present, will be
called just before the memory is freed.</doc><arrow><optional>finalise</optional><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><arrow><var>a</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>allocate_n</value><doc><code>allocate_n t ~count:n</code> allocates a fresh array with element type <code>t</code> and
length <code>n</code>, and returns its address. The argument <code>?finalise</code>, if present,
will be called just before the memory is freed.</doc><arrow><optional>finalise</optional><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><arrow><label>count</label><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr_compare</value><doc>If <code>p</code> and <code>q</code> are pointers to elements <code>i</code> and <code>j</code> of the same array then
<code>ptr_compare p q</code> compares the indexes of the elements. The result is
negative if <code>i</code> is less than <code>j</code>, positive if <code>i</code> is greater than <code>j</code>, and
zero if <code>i</code> and <code>j</code> are equal.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>reference_type</value><doc>Retrieve the reference type of a pointer.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr_of_raw_address</value><doc>Convert the numeric representation of an address to a pointer</doc><arrow><path><resolved><identifier><type>int64</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>raw_address_of_ptr</value><doc>Return the numeric representation of an address</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><path><resolved><identifier><type>unit</type></identifier></resolved></path></path><path><resolved><identifier><type>int64</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>string_from_ptr</value><doc><code>string_from_ptr p ~length</code> creates a string initialized with the <code>length</code>
characters at address <code>p</code>.<newline/>Raise <code>Invalid_argument &quot;Ctypes.string_from_ptr&quot;</code> if <code>length</code> is
negative.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><path><resolved><identifier><type>char</type></identifier></resolved></path></path><arrow><label>length</label><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ocaml_string_start</value><doc><code>ocaml_string_start s</code> allows to pass a pointer to the contents of an OCaml
string directly to a C function.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ocaml</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ocaml_bytes_start</value><doc><code>ocaml_bytes_start s</code> allows to pass a pointer to the contents of an OCaml
byte array directly to a C function.</doc><arrow><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/stdlib/bytes/index.html"><xml src="../../../../../ocaml.4.02.1+doc/stdlib/bytes/index.xml"><cmti name="Bytes" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/bytes.cmti" digest="4c433013a088edac8556bb94512e4988"/></xml></html></base>Bytes</root></identifier>t</type></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ocaml</type></identifier></resolved><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/stdlib/bytes/index.html"><xml src="../../../../../ocaml.4.02.1+doc/stdlib/bytes/index.xml"><cmti name="Bytes" src="/home/dsheets/.opam/doc/build/ocaml/stdlib/bytes.cmti" digest="4c433013a088edac8556bb94512e4988"/></xml></html></base>Bytes</root></identifier>t</type></resolved></path></path></arrow></value><comment><title level="3">Array values</title></comment><comment><title level="4">C array values</title></comment><module><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module><doc>Operations on C arrays.</doc><type><signature><type><type><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>t</type><param>a</param><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>carray</type></identifier></resolved><var>a</var></path></type><value><value><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>get</value><doc><code>get a n</code> returns the <code>n</code>th element of the zero-indexed array <code>a</code>. The
semantics for non-scalar types are non-copying, as for <reference><element><root>(!@)</root></element></reference>.<newline/>If you rebind the <code>CArray</code> module to <code>Array</code> then you can also use the
syntax <code>a.(n)</code> instead of <code>Array.get a n</code>.<newline/>Raise <code>Invalid_argument &quot;index out of bounds&quot;</code> if <code>n</code> is outside of the
range <code>0</code> to <code>(CArray.length a - 1)</code>.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>t</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><var>a</var></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>set</value><doc><code>set a n v</code> overwrites the <code>n</code>th element of the zero-indexed array <code>a</code>
with <code>v</code>.<newline/>If you rebind the <code>CArray</code> module to <code>Array</code> then you can also use the
<code>a.(n) &lt;- v</code> syntax instead of <code>Array.set a n v</code>.<newline/>Raise <code>Invalid_argument &quot;index out of bounds&quot;</code> if <code>n</code> is outside of the
range <code>0</code> to <code>(CArray.length a - 1)</code>.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>t</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><var>a</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>unsafe_get</value><doc><code>unsafe_get a n</code> behaves like <code>get a n</code> except that the check that <code>n</code>
between <code>0</code> and <code>(CArray.length a - 1)</code> is not performed.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>t</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><var>a</var></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>unsafe_set</value><doc><code>unsafe_set a n v</code> behaves like <code>set a n v</code> except that the check that
<code>n</code> between <code>0</code> and <code>(CArray.length a - 1)</code> is not performed.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>t</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><arrow><var>a</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>of_list</value><doc><code>of_list t l</code> builds an array of type <code>t</code> of the same length as <code>l</code>, and
writes the elements of <code>l</code> to the corresponding elements of the array.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>t</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>to_list</value><doc><code>to_list a</code> builds a list of the same length as <code>a</code> such that each
element of the list is the result of reading the corresponding element of
<code>a</code>.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>length</value><doc>Return the number of elements of the given array.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>start</value><doc>Return the address of the first element of the given array.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>from_ptr</value><doc><code>from_ptr p n</code> creates an <code>n</code>-length array reference to the memory at
address <code>p</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>t</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>make</value><doc><code>make t n</code> creates an <code>n</code>-length array of type <code>t</code>. If the optional
argument <code>?initial</code> is supplied, it indicates a value that should be
used to initialise every element of the array. The argument <code>?finalise</code>,
if present, will be called just before the memory is freed.</doc><arrow><optional>finalise</optional><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><arrow><optional>initial</optional><var>a</var><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>t</type></identifier></resolved><var>a</var></path></arrow></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>element_type</value><doc>Retrieve the element type of an array.</doc><arrow><path><resolved><identifier><type><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module>t</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path></arrow></value></signature></type></module><comment><title level="4">Bigarray values</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>bigarray_start</value><doc>Return the address of the first element of the given Bigarray value.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>bigarray_class</type></identifier></resolved><object><name>element</name><var>a</var><name>ba_repr</name><any/><name>bigarray</name><var>b</var><name>carray</name><any/><name>dims</name><any/></object></path><arrow><var>b</var><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>bigarray_of_ptr</value><doc><code>bigarray_of_ptr c dims k p</code> converts the C pointer <code>p</code> to a bigarray
value. No copy is made; the bigarray references the memory pointed to by
<code>p</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>bigarray_class</type></identifier></resolved><object><name>element</name><var>a</var><name>ba_repr</name><var>f</var><name>bigarray</name><var>b</var><name>carray</name><any/><name>dims</name><var>i</var></object></path><arrow><var>i</var><arrow><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>kind</type></resolved><var>a</var><var>f</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path><var>b</var></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>array_of_bigarray</value><doc><code>array_of_bigarray c b</code> converts the bigarray value <code>b</code> to a value of type
<reference><element><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module></identifier>t</type></resolved></element></reference>. No copy is made; the result occupies the same memory as
<code>b</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>bigarray_class</type></identifier></resolved><object><name>element</name><any/><name>ba_repr</name><any/><name>bigarray</name><var>b</var><name>carray</name><var>c</var><name>dims</name><any/></object></path><arrow><var>b</var><var>c</var></arrow></arrow></value><comment>Convert a Bigarray value to a C array.</comment><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>bigarray_of_array</value><doc><code>bigarray_of_array c k a</code> converts the <reference><element><resolved><type><identifier><module><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>CArray</module></identifier>t</type></resolved></element></reference> value <code>c</code> to a bigarray
value. No copy is made; the result occupies the same memory as <code>c</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>bigarray_class</type></identifier></resolved><object><name>element</name><var>a</var><name>ba_repr</name><var>f</var><name>bigarray</name><var>b</var><name>carray</name><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>carray</type></identifier></resolved><var>c</var></path><name>dims</name><var>i</var></object></path><arrow><path><resolved><type><identifier><root><base><html src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.html"><xml src="../../../../../ocaml.4.02.1+doc/otherlibs/bigarray/bigarray/index.xml"><cmti name="Bigarray" src="/home/dsheets/.opam/doc/build/ocaml/otherlibs/bigarray/bigarray.cmti" digest="0643187a8b562858118690c393d01c2e"/></xml></html></base>Bigarray</root></identifier>kind</type></resolved><var>a</var><var>f</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>carray</type></identifier></resolved><var>c</var></path><var>b</var></arrow></arrow></arrow></value><comment><title level="3">Struct and union values</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>make</value><doc>Allocate a fresh, uninitialised structure or union value. The argument
<code>?finalise</code>, if present, will be called just before the underlying memory is
freed.</doc><arrow><optional>finalise</optional><arrow><var>s</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><alias><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structured</type></identifier></resolved><any/><any/></path>s</alias></path><var>s</var></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>setf</value><doc><code>setf s f v</code> overwrites the value of the field <code>f</code> in the structure or
union <code>s</code> with <code>v</code>.</doc><arrow><alias><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structured</type></identifier></resolved><any/><any/></path>s</alias><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>field</type></identifier></resolved><var>a</var><var>s</var></path><arrow><var>a</var><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>getf</value><doc><code>getf s f</code> retrieves the value of the field <code>f</code> in the structure or union
<code>s</code>. The semantics for non-scalar types are non-copying, as for
<reference><element><root>(!@)</root></element></reference>.</doc><arrow><alias><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structured</type></identifier></resolved><any/><any/></path>s</alias><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>field</type></identifier></resolved><var>a</var><var>s</var></path><var>a</var></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>(@.)</value><doc><code>s @. f</code> computes the address of the field <code>f</code> in the structure or union
value <code>s</code>.</doc><arrow><alias><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structured</type></identifier></resolved><any/><any/></path>s</alias><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>field</type></identifier></resolved><var>a</var><var>s</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>(|-&gt;)</value><doc><code>p |-&gt; f</code> computes the address of the field <code>f</code> in the structure or union
value pointed to by <code>p</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><alias><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structured</type></identifier></resolved><any/><any/></path>s</alias></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>field</type></identifier></resolved><var>a</var><var>s</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>a</var></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>offsetof</value><doc><code>offsetof f</code> returns the offset, in bytes, of the field <code>f</code> from the
beginning of the associated struct type.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>field</type></identifier></resolved><any/><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structure</type></identifier></resolved><any/></path></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>field_type</value><doc><code>field_type f</code> returns the type of the field <code>f</code>.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>field</type></identifier></resolved><var>a</var><any/></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>addr</value><doc><code>addr s</code> returns the address of the structure or union <code>s</code>.</doc><arrow><alias><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>structured</type></identifier></resolved><any/><any/></path>s</alias><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ptr</type></identifier></resolved><var>s</var></path></arrow></value><comment><title level="3">Coercions</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>coerce</value><doc><code>coerce t1 t2</code> returns a coercion function between the types represented
by <code>t1</code> and <code>t2</code>. If <code>t1</code> cannot be coerced to <code>t2</code>, <code>coerce</code> raises
<reference><element><resolved><identifier><exception><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>Uncoercible</exception></identifier></resolved></element></reference>.<newline/>The following coercions are currently supported:<newline/><list><item>All pointer types are intercoercible.</item><item>Any type may be coerced to <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>void</value></identifier></resolved></element></reference></item><item>There is a coercion between a <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>view</value></identifier></resolved></element></reference> and another type <code>t</code> (in either
direction) if there is a coercion between the representation type
underlying the view and <code>t</code>.</item><item>Coercion is transitive: if <code>t1</code> is coercible to <code>t2</code> and <code>t2</code> is
coercible to <code>t3</code>, then <code>t1</code> is directly coercible to <code>t3</code>.</item></list>The set of supported coercions is subject to change. Future versions of
ctypes may both add new types of coercion and restrict the existing
coercions.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>typ</type></identifier></resolved><var>b</var></path><arrow><var>a</var><var>b</var></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>coerce_fn</value><doc><code>coerce_fn f1 f2</code> returns a coercion function between the function
types represented by <code>f1</code> and <code>f2</code>. If <code>f1</code> cannot be coerced to
<code>f2</code>, <code>coerce_fn</code> raises <reference><element><resolved><identifier><exception><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>Uncoercible</exception></identifier></resolved></element></reference>.<newline/>A function type <code>f1</code> may be coerced to another function type <code>f2</code>
if all of the following hold:<newline/><list><item>the C types described by <code>f1</code> and <code>f2</code> have the same arity</item></list><list><item>each argument of <code>f2</code> may be coerced to the corresponding
argument of <code>f1</code></item></list><list><item>the return type of <code>f1</code> may be coerced to the return type of <code>f2</code></item></list>The set of supported coercions is subject to change. Future versions of
ctypes may both add new types of coercion and restrict the existing
coercions.</doc><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>fn</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>fn</type></identifier></resolved><var>b</var></path><arrow><var>a</var><var>b</var></arrow></arrow></arrow></value><comment><title level="2">Exceptions</title></comment><exception><exception><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>Unsupported</exception><doc>An attempt was made to use a feature not currently supported by ctypes.
In practice this refers to attempts to use an union, array or abstract
type as an argument or return type of a function.</doc><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>ModifyingSealedType</exception><doc>An attempt was made to modify a sealed struct or union type
description.</doc><arguments><path><resolved><identifier><type>string</type></identifier></resolved></path></arguments></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>IncompleteType</exception><doc>An attempt was made to compute the size or alignment of an incomplete
type.<newline/>The incomplete types are struct and union types that have not been sealed,
and the void type.<newline/>It is not permitted to compute the size or alignment requirements of an
incomplete type, to use it as a struct or union member, to read or write a
value of the type through a pointer or to use it as the referenced type in
pointer arithmetic. Additionally, incomplete struct and union types
cannot be used as argument or return types.</doc></exception><exception><exception><root><base><xml src="index.xml"><cmti name="Ctypes" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes/ctypes.cmti" digest="a209b3c3904d897aa99ee3acbc9ab4dc"/></xml></base>Ctypes</root>Uncoercible</exception><doc>An attempt was made to coerce between uncoercible types.</doc></exception></unit>