<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><xml src="index.xml"><cmti name="Foreign" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes-foreign-unthreaded/foreign.cmti" digest="6696689f05756d3ce310c4b3102151f4"/></xml></base>Foreign</root><digest>6696689f05756d3ce310c4b3102151f4</digest><import>Bigarray<digest>0643187a8b562858118690c393d01c2e</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>Bytes<digest>4c433013a088edac8556bb94512e4988</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Complex<digest>d0dcc1da3c694cf9a7e924c7832d1528</digest></import><import>Ctypes<digest>a209b3c3904d897aa99ee3acbc9ab4dc</digest></import><import>Ctypes_bigarray<digest>8ba498be454ef6d169c217dfc7a6ac05</digest></import><import>Ctypes_path<digest>97a0835e9989462986c86762d17d953a</digest></import><import>Ctypes_primitives<digest>b9a4fb7c7287c4c63edd1821a614b454</digest></import><import>Ctypes_raw<digest>7b877d018c7e4f35afc6b81c67b29b3f</digest></import><import>Dl<digest>c65df5e80f3586a47f92a1e61e92d933</digest></import><import>Format<digest>61d4350242b30078d3ad96c904c9f7a1</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Libffi_abi<digest>350a10ef0dbfcbee85f709b986901f8b</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Primitives<digest>218641e645fb9701bc31592de778b3d0</digest></import><import>Signed<digest>1d45bfd71b293f949af17f0ea4c61089</digest></import><import>Static<digest>6bbc665275eef458e20f0f4e5df43966</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><import>Unsigned<digest>501e55aed1d2848c27903d1467c057dd</digest></import><source><file>src/ctypes-foreign-unthreaded/foreign.mli</file><dir>/home/dsheets/.opam/doc/build/ctypes.0.3.4</dir><digest>8becc07425b7e29c57561e708f68e371</digest></source><doc>High-level bindings for C functions and values</doc><value><value><root><base><xml src="index.xml"><cmti name="Foreign" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes-foreign-unthreaded/foreign.cmti" digest="6696689f05756d3ce310c4b3102151f4"/></xml></base>Foreign</root>foreign</value><doc><code>foreign name typ</code> exposes the C function of type <code>typ</code> named by <code>name</code> as
an OCaml value.<newline/>The argument <code>?from</code>, if supplied, is a library handle returned by
<reference><element><dot><root>Dl</root>dlopen</dot></element></reference>.<newline/>The argument <code>?stub</code>, if <code>true</code> (defaults to <code>false</code>), indicates that the
function should not raise an exception if <code>name</code> is not found but return
an OCaml value that raises an exception when called.<newline/>The value <code>?check_errno</code>, which defaults to <code>false</code>, indicates whether
<reference><element><dot><root>Unix</root>Unix_error</dot></element></reference> should be raised if the C function modifies <code>errno</code>.<raise><name>Dl.DL_error</name>if <code>name</code> is not found in <code>?from</code> and <code>?stub</code> is
<code>false</code>.</raise></doc><arrow><optional>abi</optional><path><dot><root>Libffi_abi</root>abi</dot></path><arrow><optional>from</optional><path><dot><root>Dl</root>library</dot></path><arrow><optional>stub</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>check_errno</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><dot><root>Ctypes</root>fn</dot><arrow><var>a</var><var>b</var></arrow></path><arrow><var>a</var><var>b</var></arrow></arrow></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Foreign" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes-foreign-unthreaded/foreign.cmti" digest="6696689f05756d3ce310c4b3102151f4"/></xml></base>Foreign</root>foreign_value</value><doc><code>foreign_value name typ</code> exposes the C value of type <code>typ</code> named by <code>name</code>
as an OCaml value. The argument <code>?from</code>, if supplied, is a library handle
returned by <reference><element><dot><root>Dl</root>dlopen</dot></element></reference>.</doc><arrow><optional>from</optional><path><dot><root>Dl</root>library</dot></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><dot><root>Ctypes</root>typ</dot><var>a</var></path><path><dot><root>Ctypes</root>ptr</dot><var>a</var></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Foreign" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes-foreign-unthreaded/foreign.cmti" digest="6696689f05756d3ce310c4b3102151f4"/></xml></base>Foreign</root>funptr</value><doc>Construct a function pointer type from a function type.<newline/>The ctypes library, like C itself, distinguishes functions and function
pointers. Functions are not first class: it is not possible to use them
as arguments or return values of calls, or store them in addressable
memory. Function pointers are first class, and so have none of these
restrictions.<newline/>The value <code>?check_errno</code>, which defaults to <code>false</code>, indicates whether
<reference><element><dot><root>Unix</root>Unix_error</dot></element></reference> should be raised if the C function modifies <code>errno</code>.</doc><arrow><optional>abi</optional><path><dot><root>Libffi_abi</root>abi</dot></path><arrow><optional>name</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><optional>check_errno</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><dot><root>Ctypes</root>fn</dot><arrow><var>a</var><var>b</var></arrow></path><path><dot><root>Ctypes</root>typ</dot><arrow><var>a</var><var>b</var></arrow></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Foreign" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes-foreign-unthreaded/foreign.cmti" digest="6696689f05756d3ce310c4b3102151f4"/></xml></base>Foreign</root>funptr_opt</value><doc>Construct a function pointer type from a function type.<newline/>This behaves like <reference><element><resolved><identifier><value><root><base><xml src="index.xml"><cmti name="Foreign" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes-foreign-unthreaded/foreign.cmti" digest="6696689f05756d3ce310c4b3102151f4"/></xml></base>Foreign</root>funptr</value></identifier></resolved></element></reference>, except that null pointers appear in OCaml as
<code>None</code>.</doc><arrow><optional>abi</optional><path><dot><root>Libffi_abi</root>abi</dot></path><arrow><path><dot><root>Ctypes</root>fn</dot><arrow><var>a</var><var>b</var></arrow></path><path><dot><root>Ctypes</root>typ</dot><path><resolved><identifier><type>option</type></identifier></resolved><arrow><var>a</var><var>b</var></arrow></path></path></arrow></arrow></value><exception><exception><root><base><xml src="index.xml"><cmti name="Foreign" src="/home/dsheets/.opam/doc/build/ctypes.0.3.4/_build/src/ctypes-foreign-unthreaded/foreign.cmti" digest="6696689f05756d3ce310c4b3102151f4"/></xml></base>Foreign</root>CallToExpiredClosure</exception><doc>A closure passed to C was collected by the OCaml garbage collector before
it was called.</doc></exception></unit>