<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Ocamlbuild_js_of_ocaml" src="/home/dsheets/.opam/doc/build/js_of_ocaml.2.5/ocamlbuild/_build/ocamlbuild_js_of_ocaml.cmti" digest="914b7ff69ed1219f13b9afb233afed46"/></xml></html></base>Ocamlbuild_js_of_ocaml</root><digest>914b7ff69ed1219f13b9afb233afed46</digest><import>Arg<digest>1a93c52516966fe6a58564a4c4d9e4fa</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Digest<digest>eab54f58b34b8a6fdc763db6966614a1</digest></import><import>Format<digest>61d4350242b30078d3ad96c904c9f7a1</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Lazy<digest>7dba0bf02f60e5ff44e9e4057263f28d</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>List<digest>8988208489274193e4e3f69dc6ec2f75</digest></import><import>Ocamlbuild_pack<digest>79818df4d0d21a22758e76ee5fc80e6e</digest></import><import>Ocamlbuild_plugin<digest>821d5b5cf7ecf8334e432e97c75b29e6</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>String<digest>9cb286f2c4569fd32c379b1a05c7b590</digest></import><source><file>ocamlbuild_js_of_ocaml.mli</file><dir>/home/dsheets/.opam/doc/build/js_of_ocaml.2.5/ocamlbuild/_build</dir><digest>ca55443eec00700a756dc293207bcf3f</digest></source><doc>Ocamlbuild plugin to build with js_of_ocaml</doc><comment>Js_of_ocaml comes with a support for OCamlbuild.<newline/><title level="2">Initialize</title><newline/>Initialize the js_of_ocaml ocamlbuild plugin with the following
code in <italic>myocamlbuild.ml</italic>:
<precode>     let _ = Ocamlbuild_plugin.dispatch Ocamlbuild_js_of_ocaml.dispatcher</precode>
<bold>Side note</bold>: <reference><element><dot><root>Ocamlbuild_plugin</root>dispatch</dot></element></reference> should be used only
once. The last call will override previous ones.<newline/><title level="3">With Oasis</title><newline/>If you use oasis, <bold>myocamlbuild.ml</bold> should look like:
<precode>     let _ =
       Ocamlbuild_plugin.dispatch
         (fun hook -&gt;
            dispatch_default hook;
            Ocamlbuild_js_of_ocaml.dispatcher
              ~oasis_executables:[&quot;src/yourprogram.byte&quot;]
              hook;
         )</precode><newline/><title level="2">Build</title><newline/>Build a JavaScript program <bold>myprog.js</bold> by calling the command:
<precode>     ocamlbuild -use-ocamlfind -plugin-tag &quot;package(js_of_ocaml.ocamlbuild)&quot; myprog.js</precode>
It will first build the bytecode <bold>myprog.byte</bold> and finally produce <bold>myprog.js</bold> (in <bold>_build</bold>).<newline/><title level="2">Options</title><newline/>One can pass option to the Js_of_ocaml compiler using tags.
See &lt;&lt;a_manual chapter=&quot;options&quot; |Options&gt;&gt;.<newline/>Available tags:<list><item><bold>pretty</bold>: Pretty print the generated javascript.</item><item><bold>debuginfo</bold>: Output debug information.</item><item><bold>noinline</bold>: Disable inlining</item><item><bold>sourcemap</bold>: Generate sourcemap</item><item><bold>tailcall(none)</bold>: Set the tailcall optimisation (default &quot;trampoline&quot;)</item><item><bold>opt(3)</bold>: Set the compilation profile (default 1)</item><item><bold>debug</bold>: enables <bold>pretty</bold>, <bold>debuginfo</bold>, <bold>sourcemap</bold></item></list><title level="3">Exemples</title><newline/>In the <bold>_tags</bold> file:
<precode>     &lt;myprog.js&gt;:pretty, opt(3)</precode><newline/><title level="2">Dispatchers</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Ocamlbuild_js_of_ocaml" src="/home/dsheets/.opam/doc/build/js_of_ocaml.2.5/ocamlbuild/_build/ocamlbuild_js_of_ocaml.cmti" digest="914b7ff69ed1219f13b9afb233afed46"/></xml></base>Ocamlbuild_js_of_ocaml</root>dispatcher</value><doc>The main dispatcher<newline/><code>?oasis_executables</code> is the paths of the executables
(having the .byte extension) you want to compile
as a javascript executable. The former executables are still compiled.<newline/>Side note: <reference><element><dot><root>Ocamlbuild_plugin</root>dispatch</dot></element></reference> should be used only once as
it record only one function for an ocamlbuild module.</doc><arrow><optional>oasis_executables</optional><path><resolved><identifier><type>list</type></identifier></resolved><path><dot><dot><root>Ocamlbuild_plugin</root>Pathname</dot>t</dot></path></path><arrow><path><dot><root>Ocamlbuild_plugin</root>hook</dot></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><comment><title level="2">Low level functions</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Ocamlbuild_js_of_ocaml" src="/home/dsheets/.opam/doc/build/js_of_ocaml.2.5/ocamlbuild/_build/ocamlbuild_js_of_ocaml.cmti" digest="914b7ff69ed1219f13b9afb233afed46"/></xml></base>Ocamlbuild_js_of_ocaml</root>oasis_support</value><doc>Map each targets given as argument to ocamlbuild and replace each element
that exists in <code>~executables</code> by its corresponding .js target.</doc><arrow><label>executables</label><path><resolved><identifier><type>list</type></identifier></resolved><path><dot><dot><root>Ocamlbuild_plugin</root>Pathname</dot>t</dot></path></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value></unit>