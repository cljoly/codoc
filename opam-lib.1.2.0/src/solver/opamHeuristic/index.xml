<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></html></base>OpamHeuristic</root><digest>950dcc09c97087a03952070043e1db12</digest><import>Algo<digest>d099ea64df51877d3edcea97407f75b6</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Common<digest>12976446a1a74ec3754d458ab00daf61</digest></import><import>Cudf<digest>96758eeba4c5ad5c2939e119b23320c6</digest></import><import>Cudf_conf<digest>9832b1a88497b989cdc24edb1d0d2d0b</digest></import><import>Cudf_parser<digest>ce5575fb6a3e03be4eaf9c5a57153117</digest></import><import>Cudf_printer<digest>4e8b2e682eab57ea4d2f7607c989e93a</digest></import><import>Cudf_types<digest>22cf93bcf40ff0d52823351ba0f5f0cb</digest></import><import>Cudf_types_pp<digest>a1a8e0c33cca9fa894bb62100af051e6</digest></import><import>Enum<digest>c6a721b94dd09df685682bcf714ce089</digest></import><import>ExtArray<digest>7dc6114514d27f0edf6a7d901dee8036</digest></import><import>ExtHashtbl<digest>eec8fca75ae4f56fc5da96a4e572614a</digest></import><import>ExtLib<digest>ef3a84aa1393f721dc9119a23908edfd</digest></import><import>ExtList<digest>bef07cb290907d4aa026456d25df695f</digest></import><import>ExtString<digest>7a5af04d79c862c97be20950f8948e45</digest></import><import>Filename<digest>3817bec1dad20c6f594d3a85b13020b8</digest></import><import>Format<digest>61d4350242b30078d3ad96c904c9f7a1</digest></import><import>Graph<digest>490c7d14b9e0c1e73a0300b7b03a94c3</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>IO<digest>d305778c3ff399200af445abf45c03b5</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>List<digest>8988208489274193e4e3f69dc6ec2f75</digest></import><import>Map<digest>770e6123e5460eeb42d3050f13c5ad53</digest></import><import>Marshal<digest>6a7be818a4d43f06397faef2c6f9d35b</digest></import><import>Nativeint<digest>d9e04753374f7110b66feda40414e5e3</digest></import><import>OpamCompiler<digest>9e136b40aa42d3d7ea8202fdfa74a838</digest></import><import>OpamCudf<digest>d63f04a52fd022db26bd88295400377b</digest></import><import>OpamFilename<digest>916090dd04a01ffc77c53db3506c82b8</digest></import><import>OpamFormula<digest>8f304f2b7ff2a9374bb64d033bdbe045</digest></import><import>OpamGlobals<digest>cafa3810e1781e92f82c4a4e3b3dbafd</digest></import><import>OpamJson<digest>9aecd22a397535b28fa95b1d4dba6739</digest></import><import>OpamMisc<digest>91574d9b4024d163e7fc73ebff59077b</digest></import><import>OpamPackage<digest>2587c33c5610afa22b1dfd99efe464d3</digest></import><import>OpamParallel<digest>828b430ce747fb6ecef03349445939d4</digest></import><import>OpamProcess<digest>db7d4de72553cde961e49335d51cd9d3</digest></import><import>OpamRepositoryName<digest>df5c7946440f17f65e2a79758cc167e1</digest></import><import>OpamSwitch<digest>d82d58b64cbce38e9b5890098f15ee27</digest></import><import>OpamTypes<digest>a158eed1fade5c9ccee05fd03e01869d</digest></import><import>OpamVariable<digest>bb9c35067ef83457db1fd5078e55c359</digest></import><import>OpamVersion<digest>40a0f6c375e83b0114954b986274c0ae</digest></import><import>Option<digest>1d3747c0f0976163b45e1f516f5346ab</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Queue<digest>06a89c77a23c672d34cb97e6dfc5f30d</digest></import><import>Re<digest>34660b39dc17499bd1e46982ccc5ac58</digest></import><import>Re_pcre<digest>a8afb2017cb64bf9b172425dcf3c5429</digest></import><import>Re_perl<digest>04390acbac5d3d1305ad351085eb2c3f</digest></import><import>RefList<digest>1a322b058cd7db0ce67f87eb2ca7bc85</digest></import><import>Scanf<digest>31f1631ff7e3da78eabf4b08e91d2861</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>Std<digest>02ea2a63eaeeab73add996d72973d822</digest></import><import>String<digest>9cb286f2c4569fd32c379b1a05c7b590</digest></import><import>Sys<digest>0ce699458ce4430954d7e6a78874647c</digest></import><import>Unix<digest>30a4cc8e5f4f902ea609c91caec48af7</digest></import><source><file>solver/opamHeuristic.mli</file><dir>/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src</dir><digest>662592c0694c5d31c53ed8b24578bc34</digest></source><doc>Solver heuristics.</doc><comment>This module tries to turn an efficient solution checker (such as
the one provided by the dose3 library, writen by J. Vouillon) into
a relatively good solution finder.<newline/>The method we are using is the following:<newline/><list><item>We ultimately rely on a brute-force exploration loop, where we
iterate over the state-space implicitely, using a monotonous
successor function which encodes the optimization criteria we
are interested in;</item></list><list><item>As brute-force exploration is costly, the goal is to provide the
exploration function a state-space as small as possible. To do
so, we use different kind of constraints that we deduce from the
request;</item></list><list><item>We remove from the state-space every packages and versions that
are not needed: we are only considering (i) the installed root
packages (with no specific version constraint); (ii) the new
packages that the user might have asking to install or upgrade
(with some eventual version constraints); and (iii) the
transitive closure of (i) and (ii) (with the corresponding
version constraints);</item></list>Finally, we run all this in a loop, until we reach a fix point. We
use a timeout to interrupt too long explorations.</comment><comment><title level="2">High-level API</title></comment><value><value><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>resolve</value><doc>Optimized resolution</doc><arrow><optional>verbose</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><label>version_map</label><path><resolved><type><module><identifier><root><base><xml src="../../../../opam-lib.1.2.0/src/core/opamPackage/index.xml"><cmti name="OpamPackage" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/core/opamPackage.cmti" digest="2587c33c5610afa22b1dfd99efe464d3"/></xml></base>OpamPackage</root></identifier>Map</module>t</type></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><arrow><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf/index.xml"><cmti name="Cudf" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf.cmti" digest="96758eeba4c5ad5c2939e119b23320c6"/></xml></base>Cudf</root></identifier>universe</type></resolved></path><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf/index.xml"><cmti name="Cudf" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf.cmti" digest="96758eeba4c5ad5c2939e119b23320c6"/></xml></base>Cudf</root></identifier>universe</type></resolved></path></arrow><arrow><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf/index.xml"><cmti name="Cudf" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf.cmti" digest="96758eeba4c5ad5c2939e119b23320c6"/></xml></base>Cudf</root></identifier>universe</type></resolved></path><arrow><path><resolved><type><identifier><root><base><xml src="../../../../opam-lib.1.2.0/src/core/opamTypes/index.xml"><cmti name="OpamTypes" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/core/opamTypes.cmti" digest="a158eed1fade5c9ccee05fd03e01869d"/></xml></base>OpamTypes</root></identifier>request</type></resolved><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf_types/index.xml"><cmti name="Cudf_types" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf_types.cmti" digest="22cf93bcf40ff0d52823351ba0f5f0cb"/></xml></base>Cudf_types</root></identifier>vpkg</type></resolved></path></path><path><resolved><type><identifier><root><base><xml src="../../../../opam-lib.1.2.0/src/core/opamTypes/index.xml"><cmti name="OpamTypes" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/core/opamTypes.cmti" digest="a158eed1fade5c9ccee05fd03e01869d"/></xml></base>OpamTypes</root></identifier>result</type></resolved><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../opam-lib.1.2.0/src/core/opamTypes/index.xml"><cmti name="OpamTypes" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/core/opamTypes.cmti" digest="a158eed1fade5c9ccee05fd03e01869d"/></xml></base>OpamTypes</root></identifier>action</type></resolved><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf/index.xml"><cmti name="Cudf" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf.cmti" digest="96758eeba4c5ad5c2939e119b23320c6"/></xml></base>Cudf</root></identifier>package</type></resolved></path></path></path><path><resolved><type><identifier><root><base><xml src="../../../../opam-lib.1.2.0/src/solver/opamCudf/index.xml"><cmti name="OpamCudf" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamCudf.cmti" digest="d63f04a52fd022db26bd88295400377b"/></xml></base>OpamCudf</root></identifier>conflict</type></resolved></path></path></arrow></arrow></arrow></arrow></arrow></value><comment><title level="2">Internal API</title></comment><comment>These functions can be used independently of OPAM, so we document
them here. It is not expected than any other file in OPAM use them,
though.</comment><type><type><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>state</type><doc>A state. In our case, it is a list package we would like to see
installed.</doc><param>a</param><path><resolved><identifier><type>list</type></identifier></resolved><var>a</var></path></type><type><type><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>state_space</type><doc>A state space. In our case, it is a collection of available
packages: each cell contains all the versions available for one
package, ordered by version.</doc><param>a</param><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>array</type></identifier></resolved><var>a</var></path></path></type><comment><title level="4">Integer space</title></comment><comment>The hearth of the brute-force algorithm lies here. Wwe want to
iterate on the state-space (which can be hudge) and stop the
first time we hit a consistant state. This means two things:
(i) we don't want to build the full universe before iterating
on it; (ii) we need to enumerate the states in a meaningful
order, eg. an order which should reflect the optimization
criteria we are intersted in.</comment><comment>To overcome this difficulties, we use a monotonous successor
function to compute the next state to test from a given valid
non-consistent state, see <code>succ</code> for more details.</comment><value><value><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>zero</value><doc><code>zero n</code> returns the tuple with <code>n</code> zeros, which is the first
state to explore.</doc><arrow><path><resolved><identifier><type>int</type></identifier></resolved></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>state</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>succ</value><doc>Given a list of bounds and a tuple, return the next tuple which
satisfies the bounds (each component will be stricly lesser than
the bounds). The enumeration respect the following invariant:<newline/><list><item>it is complete, eg. all the state are enumerated until <code>None</code> is
returned.</item></list><list><item>it it monotonous: the sum of components always increase, eg.
<code>|succ x| &gt;= |x|</code>, where <code>|None|</code> is <code>max_int</code>, <code>|Some x| = |x|</code>
and <code>|(x_1,...,x_n) = x_1 + ... + x_n|</code>.</item></list>That enumeration encodes the heuristic we are trying to implement,
which is: we first try to install the 'ideal' state, where all
packages are installed with their most recent versions; if this
does not work, we try to minimize the distance between the ideal
state and the solution we are proposing.</doc><arrow><label>bounds</label><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>state</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>state</type></identifier></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path></path></arrow></arrow></value><comment><title level="4">Polymorphic space</title></comment><value><value><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>brute_force</value><doc><code>explore is_constent state_space</code> explore a state space by
implicitely enumerating all the state in a sensitive order.</doc><arrow><optional>verbose</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><label>dump</label><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>state</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow><arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>state</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>state_space</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>state</type></identifier></resolved><var>a</var></path></path></arrow></arrow></arrow></arrow></value><comment><title level="4">Package space</title></comment><value><value><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>state_space</value><doc>Build a state space from a list of package names. The <code>filter</code>
option helps to reduce the size of the state-space, which is
useful to deal with both user-defined constraints (added on the
command line for instance) and refined requests (see below).</doc><arrow><optional>filters</optional><arrow><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf_types/index.xml"><cmti name="Cudf_types" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf_types.cmti" digest="22cf93bcf40ff0d52823351ba0f5f0cb"/></xml></base>Cudf_types</root></identifier>pkgname</type></resolved></path><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf_types/index.xml"><cmti name="Cudf_types" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf_types.cmti" digest="22cf93bcf40ff0d52823351ba0f5f0cb"/></xml></base>Cudf_types</root></identifier>constr</type></resolved></path></arrow><arrow><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf/index.xml"><cmti name="Cudf" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf.cmti" digest="96758eeba4c5ad5c2939e119b23320c6"/></xml></base>Cudf</root></identifier>universe</type></resolved></path><arrow><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf_types/index.xml"><cmti name="Cudf_types" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf_types.cmti" digest="22cf93bcf40ff0d52823351ba0f5f0cb"/></xml></base>Cudf_types</root></identifier>vpkglist</type></resolved></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf_types/index.xml"><cmti name="Cudf_types" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf_types.cmti" digest="22cf93bcf40ff0d52823351ba0f5f0cb"/></xml></base>Cudf_types</root></identifier>pkgname</type></resolved></path></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>state_space</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf/index.xml"><cmti name="Cudf" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf.cmti" digest="96758eeba4c5ad5c2939e119b23320c6"/></xml></base>Cudf</root></identifier>package</type></resolved></path></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>explore</value><doc>Explore the given package state-space using the <code>brute_force</code> strategy.
We assume that all the packages belong to the given universe.</doc><arrow><optional>verbose</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf/index.xml"><cmti name="Cudf" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf.cmti" digest="96758eeba4c5ad5c2939e119b23320c6"/></xml></base>Cudf</root></identifier>universe</type></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>state_space</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf/index.xml"><cmti name="Cudf" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf.cmti" digest="96758eeba4c5ad5c2939e119b23320c6"/></xml></base>Cudf</root></identifier>package</type></resolved></path></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>state</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf/index.xml"><cmti name="Cudf" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf.cmti" digest="96758eeba4c5ad5c2939e119b23320c6"/></xml></base>Cudf</root></identifier>package</type></resolved></path></path></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>state_of_request</value><doc>Find a possible good state which satisfies a request. The idea is
call iteratively this function while refining the constraints in
the request until reaching a fix-point. This function tries to
minimize the state to explore, based on the request constraints:
the more constrained request you have, the smaller the state-space
to explore is. Once the state-space is computed using
<code>state_space</code>, it calls <code>explore</code> (which will use <code>brute_force</code>)
to get an approximate solution to the request.</doc><arrow><optional>verbose</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><label>version_map</label><path><resolved><type><module><identifier><root><base><xml src="../../../../opam-lib.1.2.0/src/core/opamPackage/index.xml"><cmti name="OpamPackage" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/core/opamPackage.cmti" digest="2587c33c5610afa22b1dfd99efe464d3"/></xml></base>OpamPackage</root></identifier>Map</module>t</type></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf/index.xml"><cmti name="Cudf" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf.cmti" digest="96758eeba4c5ad5c2939e119b23320c6"/></xml></base>Cudf</root></identifier>universe</type></resolved></path><arrow><path><resolved><type><identifier><root><base><xml src="../../../../opam-lib.1.2.0/src/core/opamTypes/index.xml"><cmti name="OpamTypes" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/core/opamTypes.cmti" digest="a158eed1fade5c9ccee05fd03e01869d"/></xml></base>OpamTypes</root></identifier>request</type></resolved><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf_types/index.xml"><cmti name="Cudf_types" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf_types.cmti" digest="22cf93bcf40ff0d52823351ba0f5f0cb"/></xml></base>Cudf_types</root></identifier>vpkg</type></resolved></path></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>state</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf/index.xml"><cmti name="Cudf" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf.cmti" digest="96758eeba4c5ad5c2939e119b23320c6"/></xml></base>Cudf</root></identifier>package</type></resolved></path></path></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>actions_of_state</value><doc>Convert a state into a series of action (withour the full closure
of reinstallations). Raise <code>Not_reachable</code> is the state is not
reachable. This function is called once we get a consistent state
to build a solution than we can propose to the user.</doc><arrow><label>version_map</label><path><resolved><type><module><identifier><root><base><xml src="../../../../opam-lib.1.2.0/src/core/opamPackage/index.xml"><cmti name="OpamPackage" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/core/opamPackage.cmti" digest="2587c33c5610afa22b1dfd99efe464d3"/></xml></base>OpamPackage</root></identifier>Map</module>t</type></resolved><path><resolved><identifier><type>int</type></identifier></resolved></path></path><arrow><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf/index.xml"><cmti name="Cudf" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf.cmti" digest="96758eeba4c5ad5c2939e119b23320c6"/></xml></base>Cudf</root></identifier>universe</type></resolved></path><arrow><arrow><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf/index.xml"><cmti name="Cudf" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf.cmti" digest="96758eeba4c5ad5c2939e119b23320c6"/></xml></base>Cudf</root></identifier>universe</type></resolved></path><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf/index.xml"><cmti name="Cudf" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf.cmti" digest="96758eeba4c5ad5c2939e119b23320c6"/></xml></base>Cudf</root></identifier>universe</type></resolved></path></arrow><arrow><path><resolved><type><identifier><root><base><xml src="../../../../opam-lib.1.2.0/src/core/opamTypes/index.xml"><cmti name="OpamTypes" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/core/opamTypes.cmti" digest="a158eed1fade5c9ccee05fd03e01869d"/></xml></base>OpamTypes</root></identifier>request</type></resolved><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf_types/index.xml"><cmti name="Cudf_types" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf_types.cmti" digest="22cf93bcf40ff0d52823351ba0f5f0cb"/></xml></base>Cudf_types</root></identifier>vpkg</type></resolved></path></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="OpamHeuristic" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/solver/opamHeuristic.cmti" digest="950dcc09c97087a03952070043e1db12"/></xml></base>OpamHeuristic</root>state</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf/index.xml"><cmti name="Cudf" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf.cmti" digest="96758eeba4c5ad5c2939e119b23320c6"/></xml></base>Cudf</root></identifier>package</type></resolved></path></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><type><identifier><root><base><xml src="../../../../opam-lib.1.2.0/src/core/opamTypes/index.xml"><cmti name="OpamTypes" src="/home/dsheets/.opam/doc/build/opam-lib.1.2.0/src/core/opamTypes.cmti" digest="a158eed1fade5c9ccee05fd03e01869d"/></xml></base>OpamTypes</root></identifier>action</type></resolved><path><resolved><type><identifier><root><base><xml src="../../../../cudf.0.7/_build/cudf/index.xml"><cmti name="Cudf" src="/home/dsheets/.opam/doc/build/cudf.0.7/_build/cudf.cmti" digest="96758eeba4c5ad5c2939e119b23320c6"/></xml></base>Cudf</root></identifier>package</type></resolved></path></path></path></arrow></arrow></arrow></arrow></arrow></value></unit>