<?xml version="1.0" encoding="UTF-8"?>
<unit><root><base><html src="index.html"><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></html></base>Pa_type_conv</root><digest>b71be8b49d757684a88d264bc4329f3d</digest><import>Arg<digest>1a93c52516966fe6a58564a4c4d9e4fa</digest></import><import>Array<digest>ae800d8cf9903f1d36856950940430e6</digest></import><import>Asttypes<digest>0cfeab07f44495f54c41e552bdabbd80</digest></import><import>Buffer<digest>a579f4a57e300ec755f84af883c1e51b</digest></import><import>CamlinternalFormatBasics<digest>ba1be62eb45abd435c75cb59cc46b922</digest></import><import>Camlp4<digest>65bf89e76a5df158c8c008285ac8a759</digest></import><import>Camlp4_config<digest>58f3a58639c5433a05695ad179d1135c</digest></import><import>Char<digest>60fd98ba6ff303baf9287e7bfb886f12</digest></import><import>Documentation<digest>9396fde3d5ef91ac8c6ceb3fee1786d9</digest></import><import>Format<digest>61d4350242b30078d3ad96c904c9f7a1</digest></import><import>Hashtbl<digest>bb8e269d690301a1c4ff14a08e96e83e</digest></import><import>Int32<digest>f43b8a2972804b40e28b661b6fdf157a</digest></import><import>Int64<digest>3565b288ec68024088360805650448dd</digest></import><import>Lexing<digest>1be6a5484fb3cfb69d2c981438a7be62</digest></import><import>List<digest>8988208489274193e4e3f69dc6ec2f75</digest></import><import>Location<digest>f82fe26c67463f69beba6b78cef55df9</digest></import><import>Longident<digest>1abca0377f9b5ee27748e4348907b700</digest></import><import>Nativeint<digest>d9e04753374f7110b66feda40414e5e3</digest></import><import>Obj<digest>825c406ee2d12ed12fd12dc0e4de1d26</digest></import><import>Parsetree<digest>1312efc024d61049156a01477ab5a0f8</digest></import><import>Pervasives<digest>0d015a5a2136659b0de431be7f1545be</digest></import><import>Printexc<digest>fb616c60404add6295347001c01bfcaa</digest></import><import>Printf<digest>eb49a17645c5ea2dd298430a3c986186</digest></import><import>Queue<digest>06a89c77a23c672d34cb97e6dfc5f30d</digest></import><import>Set<digest>487197ccd2fea64d52f1cd917061caf2</digest></import><import>Stream<digest>55948988e71c3ee1749feb21ccec9fc9</digest></import><import>String<digest>9cb286f2c4569fd32c379b1a05c7b590</digest></import><import>Warnings<digest>03dcdeaeb257a4b96114b2b765fdeb72</digest></import><source><file>lib/pa_type_conv.mli</file><dir>/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build</dir><digest>134db10f9341a43b109a405786c77e02</digest></source><doc>Pa_type_conv: Preprocessing Module for Registering Type Conversions</doc><comment><title level="6">Generator registration</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>set_conv_path_if_not_set</value><doc><code>set_conv_path_if_not_set loc</code> sets the path to the file/module being
converted for improved error messages.</doc><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>get_conv_path</value><doc><code>get_conv_path ()</code><return>the name to module containing a type
as required for error messages.</return></doc><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>add_generator</value><doc><code>add_generator ?is_exn name gen</code> adds the code generator <code>gen</code>,
which maps type or exception declarations to structure items, where
<code>is_exn</code> specifies whether the declaration is an exception. Note that
the original type/exception declarations get added automatically in
any case.<param><name>is_exn</name>= <code>false</code></param></doc><arrow><optional>is_exn</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><arrow><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>str_item</dot></path></arrow></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>add_generator_with_arg</value><doc><code>add_generator_with_arg ?is_exn name entry generator</code> same as
<code>add_generator</code>, but the generator may accept an argument, which is
parsed with <code>entry</code>.</doc><arrow><optional>is_exn</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Gram</dot>Entry</dot>t</dot><var>a</var></path><arrow><arrow><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>str_item</dot></path></arrow></arrow></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>rm_generator</value><doc><code>rm_generator ?is_exn name</code> removes the code generator named <code>name</code>
for types if <code>is_exn</code> is <code>false</code>, or exceptions otherwise.<param><name>is_exn</name>= <code>false</code></param></doc><arrow><optional>is_exn</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>add_sig_generator</value><doc><code>add_sig_generator ?delayed ?is_exn name gen</code> adds the code generator <code>gen</code>,
which maps type or exception declarations to signature items, where
<code>is_exn</code> specifies whether the declaration is an exception. Note that the
original type/exception declarations get added automatically in any case. If
<code>delayed</code> is set to true, the output of this generator is appended to the
signature in which it's defined<param><name>delayed</name>= <code>false</code></param><param><name>is_exn</name>= <code>false</code></param></doc><arrow><optional>delayed</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>is_exn</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><arrow><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>sig_item</dot></path></arrow></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>add_sig_generator_with_arg</value><doc><code>add_sig_generator_with_arg ?delayed ?is_exn name entry generator</code> same as
<code>add_sig_generator</code>, but the generator may accept an argument,
which is parsed with <code>entry</code>.</doc><arrow><optional>delayed</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>is_exn</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Gram</dot>Entry</dot>t</dot><var>a</var></path><arrow><arrow><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path><arrow><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>sig_item</dot></path></arrow></arrow></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>rm_sig_generator</value><doc><code>rm_sig_generator ?is_exn name</code> removes the signature code generator named
<code>name</code> for types if <code>is_exn</code> is <code>false</code>, or exceptions otherwise.<param><name>is_exn</name>= <code>false</code></param></doc><arrow><optional>is_exn</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><type><type><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>record_field_generator</type><doc>Type of record field code generators</doc><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></type><value><value><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>add_record_field_generator</value><doc><code>add_record_field_generator gen_name gen</code> adds the record field code
generator <code>gen</code> with name <code>gen_name</code>, which acts on the location
identifying the record field.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>record_field_generator</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>add_record_field_generator_with_arg</value><doc><code>add_record_field_generator_with_arg name entry generator</code> same as
<code>add_record_field_generator</code>, but the <code>generator</code> takes an argument,
which is parsed with <code>entry</code>. If <code>None</code> is passed to the generator,
parsing of the argument failed, otherwise <code>Some arg</code> will be passed,
where <code>arg</code> is the successfully parsed argument.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Gram</dot>Entry</dot>t</dot><var>a</var></path><arrow><arrow><path><resolved><identifier><type>option</type></identifier></resolved><var>a</var></path><path><resolved><identifier><type><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>record_field_generator</type></identifier></resolved></path></arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>rm_record_field_generator</value><doc><code>rm_record_field_generator name</code> removes the record field code generator
named <code>name</code>.</doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value><comment><title level="6">Generator sets registration</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>add_sig_set</value><doc><code>add_sig_set ?is_exn id ~set</code> adds the generator <code>id</code> to the list
of generators for signatures.
This generator will behave as if is all the generators from <code>set</code>
had been given instead. Any duplicate arising from repeatedly
expanding such generators are removed.
If <code>is_exn</code>, then it is a generator for exception declaration, or
else it is a generator for type declaration.</doc><arrow><optional>is_exn</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><label>set</label><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>add_str_set</value><doc><code>add_str_set ?is_exn id ~set</code> behaves exactly like
<code>add_sig_set ?is_exn id ~set</code> but for structure items instead of
signatures items.</doc><arrow><optional>is_exn</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><label>set</label><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>add_set</value><doc><code>add_set ~kind ~is_exn id ~set</code> is a shorthand for doing multiple
calls to <code>add_str_set</code> and <code>add_sig_set</code></doc><arrow><label>kind</label><poly_variant><fixed/><constructor>Str<constant/></constructor><constructor>Sig<constant/></constructor><constructor>Both<constant/></constructor></poly_variant><arrow><label>is_exn</label><poly_variant><fixed/><constructor>Yes<constant/></constructor><constructor>No<constant/></constructor><constructor>Both<constant/></constructor></poly_variant><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><label>set</label><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><comment><title level="6">Utility functions</title></comment><value><value><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>get_loc_err</value><doc><code>get_loc_err loc msg</code> generates a compile-time error message.</doc><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></value><value><value><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>hash_variant</value><doc><code>hash_variant str</code><return>the integer encoding a variant tag with
name <code>str</code>.</return></doc><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>int</type></identifier></resolved></path></arrow></value><comment><title level="6">General purpose code generation module</title></comment><module><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module><type><signature><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>regular_constr_of_revised_constr</value><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>exApp_of_list</value><doc><code>expr_app_of_list l</code> takes list <code>l</code> of expressions <code>e1; e2; e3; ...</code>
and returns the expression <code>e1 e2 e3</code>. C.f.: <code>Ast.exSem_of_list</code>.</doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>expr</dot></path></path><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>expr</dot></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>tyArr_of_list</value><doc><code>tyArr_of_list l</code> takes list <code>l</code> of types <code>e1; e2; e3; ...</code> and
returns the type <code>e1 -&gt; e2 -&gt; e3</code>. C.f.: <code>Ast.exSem_of_list</code>.</doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path></path><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>paOr_of_list</value><doc><code>paOr_of_list l</code> takes list <code>l</code> of patterns <code>p1; p2; p3; ...</code> and returns
the pattern <code>p1 | p2 | p3 | ...</code></doc><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>patt</dot></path></path><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>patt</dot></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>gensym</value><doc><code>gensym ?prefix ()</code> generates a fresh variable name with <code>prefix</code>.
When used with the default parameters, it will return: <code>_x__001</code>,
<code>_x__002</code>, <code>_x__003</code>, ...<param><name>prefix</name>default = &quot;_x&quot;</param></doc><arrow><optional>prefix</optional><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><resolved><identifier><type>unit</type></identifier></resolved></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>error</value><doc><code>error tp ~fn ~msg</code> raises an error with <code>msg</code> on type <code>tp</code> occuring
in function <code>fn</code>.</doc><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><arrow><label>fn</label><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><label>msg</label><path><resolved><identifier><type>string</type></identifier></resolved></path><any/></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>unknown_type</value><doc><code>unknown_type tp fn</code> type <code>tp</code> cannot be handled by function <code>fn</code>.</doc><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><any/></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>ty_var_list_of_ctyp</value><doc><code>ty_var_list_of_ctyp tp acc</code> accumulates a list of type parameters
contained in <code>tp</code> into <code>acc</code> as strings.</doc><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>get_rev_id_path</value><doc><code>get_rev_id_path id acc</code> takes an identifier.<return>a reversed
module path (list of strings) denoting this identifier, appending
it to <code>acc</code>.</return></doc><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ident</dot></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>ident_of_rev_path</value><doc><code>ident_of_rev_path loc path</code> takes a location <code>loc</code> and a reversed path
<code>rev_path</code> to an identifier.<return>identifier denoting the
bound value.</return></doc><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><resolved><identifier><type>string</type></identifier></resolved></path></path><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ident</dot></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>get_appl_path</value><doc><code>get_appl_path loc tp</code><return>the identifier path associated with
a polymorphic type.</return></doc><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ident</dot></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>abstract</value><doc><code>abstract loc patts body</code> takes a location <code>loc</code>, a pattern list
<code>patts</code>, and an expression <code>body</code>.<return>a function expression
that takes the patterns as arguments, and binds them in <code>body</code>.</return></doc><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>patt</dot></path></path><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>expr</dot></path><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>expr</dot></path></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>apply</value><doc><code>apply loc f_expr arg_exprs</code> takes a location <code>loc</code>, an expression
<code>f_expr</code> representing a function, and a list of argument expressions
<code>arg_exprs</code>.<return>an expression in which the function is
applied to its arguments.</return></doc><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>expr</dot></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>expr</dot></path></path><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>expr</dot></path></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>switch_tp_def</value><doc><code>switch_tp_def ~alias ~sum ~record ~variants ~mani tp_def</code>
takes a handler function for each kind of type definition and
applies the appropriate handler when <code>tp_def</code> matches.</doc><arrow><label>alias</label><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><var>a</var></arrow></arrow><arrow><label>sum</label><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><var>a</var></arrow></arrow><arrow><label>record</label><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><var>a</var></arrow></arrow><arrow><label>variants</label><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><var>a</var></arrow></arrow><arrow><label>mani</label><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><var>a</var></arrow></arrow></arrow><arrow><label>nil</label><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><var>a</var></arrow><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><var>a</var></arrow></arrow></arrow></arrow></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>mk_expr_lst</value><doc><code>mk_expr_lst loc expr_list</code> takes a list of expressions.<return>an expression representing a list of expressions.</return></doc><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>expr</dot></path></path><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>expr</dot></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>mk_patt_lst</value><doc><code>mk_patt_lst _loc patt_list</code> takes a list of patterns.<return>a pattern representing a list of patterns.</return></doc><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><arrow><path><resolved><identifier><type>list</type></identifier></resolved><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>patt</dot></path></path><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>patt</dot></path></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>get_tparam_id</value><doc><code>get_tparam_id tp</code><return>the string identifier associated with
<code>tp</code> if it is a type parameter.</return><raise><name>Failure</name>otherwise.</raise></doc><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><path><resolved><identifier><type>string</type></identifier></resolved></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>type_is_recursive</value><doc><code>type_is_recursive ?short_circuit id tp</code><return>whether the type <code>tp</code> with name <code>id</code>
refers to itself, assuming that it is not mutually recursive with
another type.</return><param><name>short_circuit</name>allows you to override the search for certain
type expressions.</param><param><name>stop_on_functions</name>allows to disregard the recursive occurences appearing in
arrow types. The default is to disregard them.</param></doc><arrow><optional>stop_on_functions</optional><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><optional>short_circuit</optional><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><path><resolved><identifier><type>option</type></identifier></resolved><path><resolved><identifier><type>bool</type></identifier></resolved></path></path></arrow><arrow><path><resolved><identifier><type>string</type></identifier></resolved></path><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><path><resolved><identifier><type>bool</type></identifier></resolved></path></arrow></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>drop_variance_annotations</value><doc><code>drop_variance_annotations tp</code><return>the type resulting from dropping
all variance annotations in <code>tp</code>.</return></doc><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>find_record_default</value><doc><code>find_record_default loc</code><return>the optional default expression
associated with the record field at source location <code>loc</code> if defined.</return></doc><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><path><resolved><identifier><type>option</type></identifier></resolved><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>expr</dot></path></path></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Gen</module>delay_sig_item</value><doc><code>delay_sig_item item</code> places <code>item</code> at the end of the current signature</doc><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>sig_item</dot></path><path><resolved><identifier><type>unit</type></identifier></resolved></path></arrow></value></signature></type></module><comment><title level="6">Utility functions to rewrite type definitions</title></comment><module><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Rewrite_tds</module><type><signature><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Rewrite_tds</module>sig_</value><doc><code>sig_ loc rec_ typedefs</code> rewrites the given type definition to make it either
recursive or non recursive.
For instance, the parser calls <code>sig_ loc false (TyDcl (_, t, [], t, []))</code> when it
encouters <code>type t = t</code> and calls <code>sig_ loc true (TyDcl (_, t, [], t, []))</code> when it
encouters <code>type nonrec t = t</code> in signatures.</doc><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><arrow><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>sig_item</dot></path></arrow></arrow></arrow></value><value><value><module><root><base><xml src="index.xml"><cmti name="Pa_type_conv" src="/home/dsheets/.opam/doc/build/type_conv.112.01.00/_build/lib/pa_type_conv.cmti" digest="b71be8b49d757684a88d264bc4329f3d"/></xml></base>Pa_type_conv</root>Rewrite_tds</module>str_</value><doc><code>str_ loc rec_ typedefs</code> does the same thing as <code>sig_ loc rec_ typedefs</code>, except
that it returns a structure item instead of a signature item.</doc><arrow><path><dot><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>Loc</dot>t</dot></path><arrow><path><resolved><identifier><type>bool</type></identifier></resolved></path><arrow><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>ctyp</dot></path><path><dot><dot><dot><root>Camlp4</root>PreCast</dot>Ast</dot>str_item</dot></path></arrow></arrow></arrow></value></signature></type></module></unit>